
cube_F411CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000677c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800696c  0800696c  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006974  08006974  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006974  08006974  00016974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006978  08006978  00016978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800697c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000154c  20000184  08006b00  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016d0  08006b00  000216d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f098  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fbc  00000000  00000000  0002f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00032208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00032ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192b6  00000000  00000000  000339d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011502  00000000  00000000  0004cc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7cb  00000000  00000000  0005e188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea953  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000318c  00000000  00000000  000ea9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000184 	.word	0x20000184
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080068fc 	.word	0x080068fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000188 	.word	0x20000188
 80001d4:	080068fc 	.word	0x080068fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MX_GPIO_Init+0x9c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a1f      	ldr	r2, [pc, #124]	; (8000578 <MX_GPIO_Init+0x9c>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a11      	ldr	r2, [pc, #68]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_GPIO_Init+0x9c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <MX_GPIO_Init+0xa0>)
 800054e:	f000 fcab 	bl	8000ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 8000552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4619      	mov	r1, r3
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_GPIO_Init+0xa0>)
 800056c:	f000 fb18 	bl	8000ba0 <HAL_GPIO_Init>

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40023800 	.word	0x40023800
 800057c:	40020800 	.word	0x40020800

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 f964 	bl	8000850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f808 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f7ff ffa6 	bl	80004dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000590:	f005 fc04 	bl	8005d9c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000594:	f000 f872 	bl	800067c <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0x18>
	...

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 f99e 	bl	80068ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	; (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	; (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80005f8:	2305      	movs	r3, #5
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000602:	2301      	movs	r3, #1
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000610:	2319      	movs	r3, #25
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000614:	23c0      	movs	r3, #192	; 0xc0
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fddb 	bl	80021e0 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000630:	f000 f81e 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2103      	movs	r1, #3
 8000650:	4618      	mov	r0, r3
 8000652:	f002 f83d 	bl	80026d0 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800065c:	f000 f808 	bl	8000670 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	; 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_RTC_Init+0x44>)
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <MX_RTC_Init+0x48>)
 8000684:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_RTC_Init+0x44>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_RTC_Init+0x44>)
 800068e:	227f      	movs	r2, #127	; 0x7f
 8000690:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_RTC_Init+0x44>)
 8000694:	22ff      	movs	r2, #255	; 0xff
 8000696:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_RTC_Init+0x44>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_RTC_Init+0x44>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_RTC_Init+0x44>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_RTC_Init+0x44>)
 80006ac:	f002 fab8 	bl	8002c20 <HAL_RTC_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80006b6:	f7ff ffdb 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200001a0 	.word	0x200001a0
 80006c4:	40002800 	.word	0x40002800

080006c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <HAL_RTC_MspInit+0x50>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d111      	bne.n	8000710 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006ec:	2302      	movs	r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 f9a0 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000706:	f7ff ffb3 	bl	8000670 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <HAL_RTC_MspInit+0x54>)
 800070c:	2201      	movs	r2, #1
 800070e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40002800 	.word	0x40002800
 800071c:	42470e3c 	.word	0x42470e3c

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 f89a 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <OTG_FS_IRQHandler+0x10>)
 80007ca:	f000 fcd6 	bl	800117a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200010a8 	.word	0x200010a8

080007d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <SystemInit+0x20>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <SystemInit+0x20>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000834 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000802:	490e      	ldr	r1, [pc, #56]	; (800083c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000804:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000818:	4c0b      	ldr	r4, [pc, #44]	; (8000848 <LoopFillZerobss+0x26>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000826:	f7ff ffd7 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082a:	f006 f83b 	bl	80068a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082e:	f7ff fea7 	bl	8000580 <main>
  bx  lr    
 8000832:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000834:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800083c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000840:	0800697c 	.word	0x0800697c
  ldr r2, =_sbss
 8000844:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000848:	200016d0 	.word	0x200016d0

0800084c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC_IRQHandler>
	...

08000850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <HAL_Init+0x40>)
 800085a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800085e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_Init+0x40>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <HAL_Init+0x40>)
 8000866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_Init+0x40>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_Init+0x40>)
 8000872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f94f 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	200f      	movs	r0, #15
 8000880:	f000 f808 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000884:	f7ff ff4c 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023c00 	.word	0x40023c00

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x54>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x58>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f967 	bl	8000b86 <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e00e      	b.n	80008e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d80a      	bhi.n	80008de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 f92f 	bl	8000b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_InitTick+0x5c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000004 	.word	0x20000004

080008f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_IncTick+0x20>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_IncTick+0x24>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_IncTick+0x24>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000008 	.word	0x20000008
 8000918:	200001c0 	.word	0x200001c0

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <HAL_GetTick+0x14>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200001c0 	.word	0x200001c0

08000934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800093c:	f7ff ffee 	bl	800091c <HAL_GetTick>
 8000940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800094c:	d005      	beq.n	800095a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_Delay+0x44>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800095a:	bf00      	nop
 800095c:	f7ff ffde 	bl	800091c <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d8f7      	bhi.n	800095c <HAL_Delay+0x28>
  {
  }
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <__NVIC_EnableIRQ+0x38>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f7ff ff8e 	bl	8000a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff29 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b44:	f7ff ff3e 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	6978      	ldr	r0, [r7, #20]
 8000b50:	f7ff ff8e 	bl	8000a70 <NVIC_EncodePriority>
 8000b54:	4602      	mov	r2, r0
 8000b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff5d 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff31 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffa2 	bl	8000ad8 <SysTick_Config>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	e159      	b.n	8000e70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	f040 8148 	bne.w	8000e6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d005      	beq.n	8000bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d130      	bne.n	8000c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4013      	ands	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	f003 0201 	and.w	r2, r3, #1
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d017      	beq.n	8000c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d123      	bne.n	8000ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	08da      	lsrs	r2, r3, #3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3208      	adds	r2, #8
 8000ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	691a      	ldr	r2, [r3, #16]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	08da      	lsrs	r2, r3, #3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3208      	adds	r2, #8
 8000cde:	69b9      	ldr	r1, [r7, #24]
 8000ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0203 	and.w	r2, r3, #3
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f000 80a2 	beq.w	8000e6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <HAL_GPIO_Init+0x2e8>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a56      	ldr	r2, [pc, #344]	; (8000e88 <HAL_GPIO_Init+0x2e8>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b54      	ldr	r3, [pc, #336]	; (8000e88 <HAL_GPIO_Init+0x2e8>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d42:	4a52      	ldr	r2, [pc, #328]	; (8000e8c <HAL_GPIO_Init+0x2ec>)
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a49      	ldr	r2, [pc, #292]	; (8000e90 <HAL_GPIO_Init+0x2f0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d019      	beq.n	8000da2 <HAL_GPIO_Init+0x202>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a48      	ldr	r2, [pc, #288]	; (8000e94 <HAL_GPIO_Init+0x2f4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x1fe>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a47      	ldr	r2, [pc, #284]	; (8000e98 <HAL_GPIO_Init+0x2f8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x1fa>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a46      	ldr	r2, [pc, #280]	; (8000e9c <HAL_GPIO_Init+0x2fc>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x1f6>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a45      	ldr	r2, [pc, #276]	; (8000ea0 <HAL_GPIO_Init+0x300>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x1f2>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	e008      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d92:	2307      	movs	r3, #7
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e004      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000da2:	2300      	movs	r3, #0
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	f002 0203 	and.w	r2, r2, #3
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	4093      	lsls	r3, r2
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db4:	4935      	ldr	r1, [pc, #212]	; (8000e8c <HAL_GPIO_Init+0x2ec>)
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000de6:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e10:	4a24      	ldr	r2, [pc, #144]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	f67f aea2 	bls.w	8000bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40013800 	.word	0x40013800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40013c00 	.word	0x40013c00

08000ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb8:	787b      	ldrb	r3, [r7, #1]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ec4:	e003      	b.n	8000ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	041a      	lsls	r2, r3, #16
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	619a      	str	r2, [r3, #24]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000edc:	b08f      	sub	sp, #60	; 0x3c
 8000ede:	af0a      	add	r7, sp, #40	; 0x28
 8000ee0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e10f      	b.n	800110c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d106      	bne.n	8000f0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f005 f9c2 	bl	8006290 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2203      	movs	r2, #3
 8000f10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 f871 	bl	8003012 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	687e      	ldr	r6, [r7, #4]
 8000f38:	466d      	mov	r5, sp
 8000f3a:	f106 0410 	add.w	r4, r6, #16
 8000f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f4e:	1d33      	adds	r3, r6, #4
 8000f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f52:	6838      	ldr	r0, [r7, #0]
 8000f54:	f001 ff49 	bl	8002dea <USB_CoreInit>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2202      	movs	r2, #2
 8000f62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e0d0      	b.n	800110c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 f85f 	bl	8003034 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e04a      	b.n	8001012 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	333d      	adds	r3, #61	; 0x3d
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	333c      	adds	r3, #60	; 0x3c
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	b298      	uxth	r0, r3
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3342      	adds	r3, #66	; 0x42
 8000fb8:	4602      	mov	r2, r0
 8000fba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	333f      	adds	r3, #63	; 0x3f
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fd0:	7bfa      	ldrb	r2, [r7, #15]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	3344      	adds	r3, #68	; 0x44
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	1a9b      	subs	r3, r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3348      	adds	r3, #72	; 0x48
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	3350      	adds	r3, #80	; 0x50
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	3301      	adds	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	d3af      	bcc.n	8000f7c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e044      	b.n	80010ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	1a9b      	subs	r3, r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	1a9b      	subs	r3, r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	3301      	adds	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3b5      	bcc.n	8001022 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	687e      	ldr	r6, [r7, #4]
 80010be:	466d      	mov	r5, sp
 80010c0:	f106 0410 	add.w	r4, r6, #16
 80010c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010d4:	1d33      	adds	r3, r6, #4
 80010d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f001 fff7 	bl	80030cc <USB_DevInit>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2202      	movs	r2, #2
 80010e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e00d      	b.n	800110c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f003 f873 	bl	80041f0 <USB_DevDisconnect>

  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001114 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_PCD_Start+0x1c>
 800112c:	2302      	movs	r3, #2
 800112e:	e020      	b.n	8001172 <HAL_PCD_Start+0x5e>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	2b01      	cmp	r3, #1
 800113e:	d109      	bne.n	8001154 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001144:	2b01      	cmp	r3, #1
 8001146:	d005      	beq.n	8001154 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f001 ff49 	bl	8002ff0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f003 f823 	bl	80041ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800117a:	b590      	push	{r4, r7, lr}
 800117c:	b08d      	sub	sp, #52	; 0x34
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f003 f8e1 	bl	8004358 <USB_GetMode>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	f040 839d 	bne.w	80018d8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f845 	bl	8004232 <USB_ReadInterrupts>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8393 	beq.w	80018d6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 f83c 	bl	8004232 <USB_ReadInterrupts>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d107      	bne.n	80011d4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f002 0202 	and.w	r2, r2, #2
 80011d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 f82a 	bl	8004232 <USB_ReadInterrupts>
 80011de:	4603      	mov	r3, r0
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	2b10      	cmp	r3, #16
 80011e6:	d161      	bne.n	80012ac <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	699a      	ldr	r2, [r3, #24]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0210 	bic.w	r2, r2, #16
 80011f6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f003 020f 	and.w	r2, r3, #15
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	3304      	adds	r3, #4
 8001216:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	0c5b      	lsrs	r3, r3, #17
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	2b02      	cmp	r3, #2
 8001222:	d124      	bne.n	800126e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800122a:	4013      	ands	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d035      	beq.n	800129c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800123a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800123e:	b29b      	uxth	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	6a38      	ldr	r0, [r7, #32]
 8001244:	f002 fe61 	bl	8003f0a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001254:	441a      	add	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001266:	441a      	add	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	619a      	str	r2, [r3, #24]
 800126c:	e016      	b.n	800129c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	0c5b      	lsrs	r3, r3, #17
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	2b06      	cmp	r3, #6
 8001278:	d110      	bne.n	800129c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001280:	2208      	movs	r2, #8
 8001282:	4619      	mov	r1, r3
 8001284:	6a38      	ldr	r0, [r7, #32]
 8001286:	f002 fe40 	bl	8003f0a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001296:	441a      	add	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0210 	orr.w	r2, r2, #16
 80012aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 ffbe 	bl	8004232 <USB_ReadInterrupts>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012c0:	d16e      	bne.n	80013a0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 ffc4 	bl	8004258 <USB_ReadDevAllOutEpInterrupt>
 80012d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012d2:	e062      	b.n	800139a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d057      	beq.n	800138e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 ffe9 	bl	80042c0 <USB_ReadDevOutEPInterrupt>
 80012ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00c      	beq.n	8001314 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	015a      	lsls	r2, r3, #5
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	4413      	add	r3, r2
 8001302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001306:	461a      	mov	r2, r3
 8001308:	2301      	movs	r3, #1
 800130a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800130c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fdb0 	bl	8001e74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00c      	beq.n	8001338 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	015a      	lsls	r2, r3, #5
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	4413      	add	r3, r2
 8001326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800132a:	461a      	mov	r2, r3
 800132c:	2308      	movs	r3, #8
 800132e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 feaa 	bl	800208c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	015a      	lsls	r2, r3, #5
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	4413      	add	r3, r2
 800134a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800134e:	461a      	mov	r2, r3
 8001350:	2310      	movs	r3, #16
 8001352:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	2b00      	cmp	r3, #0
 800135c:	d008      	beq.n	8001370 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	015a      	lsls	r2, r3, #5
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	4413      	add	r3, r2
 8001366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136a:	461a      	mov	r2, r3
 800136c:	2320      	movs	r3, #32
 800136e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	015a      	lsls	r2, r3, #5
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001386:	461a      	mov	r2, r3
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	3301      	adds	r3, #1
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	085b      	lsrs	r3, r3, #1
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139c:	2b00      	cmp	r3, #0
 800139e:	d199      	bne.n	80012d4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 ff44 	bl	8004232 <USB_ReadInterrupts>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013b4:	f040 80c0 	bne.w	8001538 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 ff65 	bl	800428c <USB_ReadDevAllInEpInterrupt>
 80013c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013c8:	e0b2      	b.n	8001530 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80a7 	beq.w	8001524 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 ff8b 	bl	80042fc <USB_ReadDevInEPInterrupt>
 80013e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d057      	beq.n	80014a2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43db      	mvns	r3, r3
 800140c:	69f9      	ldr	r1, [r7, #28]
 800140e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001412:	4013      	ands	r3, r2
 8001414:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	015a      	lsls	r2, r3, #5
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001422:	461a      	mov	r2, r3
 8001424:	2301      	movs	r3, #1
 8001426:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d132      	bne.n	8001496 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001434:	4613      	mov	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	3348      	adds	r3, #72	; 0x48
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4403      	add	r3, r0
 8001450:	3344      	adds	r3, #68	; 0x44
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4419      	add	r1, r3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4403      	add	r3, r0
 8001464:	3348      	adds	r3, #72	; 0x48
 8001466:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	2b00      	cmp	r3, #0
 800146c:	d113      	bne.n	8001496 <HAL_PCD_IRQHandler+0x31c>
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	3350      	adds	r3, #80	; 0x50
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d108      	bne.n	8001496 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800148e:	461a      	mov	r2, r3
 8001490:	2101      	movs	r1, #1
 8001492:	f002 ff93 	bl	80043bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f004 ff78 	bl	8006392 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014b8:	461a      	mov	r2, r3
 80014ba:	2308      	movs	r3, #8
 80014bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	015a      	lsls	r2, r3, #5
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014d4:	461a      	mov	r2, r3
 80014d6:	2310      	movs	r3, #16
 80014d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	015a      	lsls	r2, r3, #5
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f0:	461a      	mov	r2, r3
 80014f2:	2340      	movs	r3, #64	; 0x40
 80014f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4413      	add	r3, r2
 8001508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800150c:	461a      	mov	r2, r3
 800150e:	2302      	movs	r3, #2
 8001510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800151c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fc1b 	bl	8001d5a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	3301      	adds	r3, #1
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001532:	2b00      	cmp	r3, #0
 8001534:	f47f af49 	bne.w	80013ca <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fe78 	bl	8004232 <USB_ReadInterrupts>
 8001542:	4603      	mov	r3, r0
 8001544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800154c:	d122      	bne.n	8001594 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001568:	2b01      	cmp	r3, #1
 800156a:	d108      	bne.n	800157e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001574:	2100      	movs	r1, #0
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fe26 	bl	80021c8 <HAL_PCDEx_LPM_Callback>
 800157c:	e002      	b.n	8001584 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f004 ff74 	bl	800646c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fe4a 	bl	8004232 <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015a8:	d112      	bne.n	80015d0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d102      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f004 ff30 	bl	8006420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015ce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fe2c 	bl	8004232 <USB_ReadInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e4:	f040 80c7 	bne.w	8001776 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2110      	movs	r1, #16
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fec6 	bl	8003394 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800160c:	e056      	b.n	80016bc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800161a:	461a      	mov	r2, r3
 800161c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001620:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001624:	015a      	lsls	r2, r3, #5
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	4413      	add	r3, r2
 800162a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001632:	0151      	lsls	r1, r2, #5
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	440a      	add	r2, r1
 8001638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800163c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001640:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001652:	0151      	lsls	r1, r2, #5
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	440a      	add	r2, r1
 8001658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800165c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001660:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800166e:	461a      	mov	r2, r3
 8001670:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001674:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001678:	015a      	lsls	r2, r3, #5
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	4413      	add	r3, r2
 800167e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001686:	0151      	lsls	r1, r2, #5
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	440a      	add	r2, r1
 800168c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001690:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001694:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	4413      	add	r3, r2
 800169e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a6:	0151      	lsls	r1, r2, #5
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	440a      	add	r2, r1
 80016ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	3301      	adds	r3, #1
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d3a3      	bcc.n	800160e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d016      	beq.n	8001710 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f2:	f043 030b 	orr.w	r3, r3, #11
 80016f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001708:	f043 030b 	orr.w	r3, r3, #11
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	e015      	b.n	800173c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800171e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001722:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001726:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001736:	f043 030b 	orr.w	r3, r3, #11
 800173a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800174a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800174e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001760:	461a      	mov	r2, r3
 8001762:	f002 fe2b 	bl	80043bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fd59 	bl	8004232 <USB_ReadInterrupts>
 8001780:	4603      	mov	r3, r0
 8001782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800178a:	d124      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f002 fdef 	bl	8004374 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f001 fe57 	bl	800344e <USB_GetDevSpeed>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681c      	ldr	r4, [r3, #0]
 80017ac:	f001 f93c 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 80017b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4620      	mov	r0, r4
 80017bc:	f001 fb76 	bl	8002eac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f004 fe0e 	bl	80063e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 fd29 	bl	8004232 <USB_ReadInterrupts>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d10a      	bne.n	8001800 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f004 fdeb 	bl	80063c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f002 0208 	and.w	r2, r2, #8
 80017fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fd14 	bl	8004232 <USB_ReadInterrupts>
 800180a:	4603      	mov	r3, r0
 800180c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001814:	d10f      	bne.n	8001836 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f004 fe43 	bl	80064ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fcf9 	bl	8004232 <USB_ReadInterrupts>
 8001840:	4603      	mov	r3, r0
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800184a:	d10f      	bne.n	800186c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f004 fe16 	bl	8006488 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800186a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fcde 	bl	8004232 <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001880:	d10a      	bne.n	8001898 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f004 fe24 	bl	80064d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fcc8 	bl	8004232 <USB_ReadInterrupts>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d115      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f004 fe14 	bl	80064ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6859      	ldr	r1, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	e000      	b.n	80018d8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80018d6:	bf00      	nop
    }
  }
}
 80018d8:	3734      	adds	r7, #52	; 0x34
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd90      	pop	{r4, r7, pc}

080018de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_PCD_SetAddress+0x1a>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e013      	b.n	8001920 <HAL_PCD_SetAddress+0x42>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fc26 	bl	8004162 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4603      	mov	r3, r0
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	460b      	mov	r3, r1
 800193c:	803b      	strh	r3, [r7, #0]
 800193e:	4613      	mov	r3, r2
 8001940:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800194a:	2b00      	cmp	r3, #0
 800194c:	da0f      	bge.n	800196e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 020f 	and.w	r2, r3, #15
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	3338      	adds	r3, #56	; 0x38
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	3304      	adds	r3, #4
 8001964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	705a      	strb	r2, [r3, #1]
 800196c:	e00f      	b.n	800198e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 020f 	and.w	r2, r3, #15
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	3304      	adds	r3, #4
 8001986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800199a:	883a      	ldrh	r2, [r7, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	78ba      	ldrb	r2, [r7, #2]
 80019a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019b8:	78bb      	ldrb	r3, [r7, #2]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d102      	bne.n	80019c4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_EP_Open+0xaa>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e00e      	b.n	80019f0 <HAL_PCD_EP_Open+0xc8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fd59 	bl	8003498 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80019ee:	7afb      	ldrb	r3, [r7, #11]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da0f      	bge.n	8001a2c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f003 020f 	and.w	r2, r3, #15
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	3338      	adds	r3, #56	; 0x38
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	3304      	adds	r3, #4
 8001a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	705a      	strb	r2, [r3, #1]
 8001a2a:	e00f      	b.n	8001a4c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	f003 020f 	and.w	r2, r3, #15
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	3304      	adds	r3, #4
 8001a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_PCD_EP_Close+0x6e>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e00e      	b.n	8001a84 <HAL_PCD_EP_Close+0x8c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 fd97 	bl	80035a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	f003 020f 	and.w	r2, r3, #15
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2200      	movs	r2, #0
 8001acc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	6979      	ldr	r1, [r7, #20]
 8001b00:	f002 f872 	bl	8003be8 <USB_EP0StartXfer>
 8001b04:	e008      	b.n	8001b18 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	6979      	ldr	r1, [r7, #20]
 8001b14:	f001 fe24 	bl	8003760 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	f003 020f 	and.w	r2, r3, #15
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001b44:	681b      	ldr	r3, [r3, #0]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b62:	7afb      	ldrb	r3, [r7, #11]
 8001b64:	f003 020f 	and.w	r2, r3, #15
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	3338      	adds	r3, #56	; 0x38
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bac:	7afb      	ldrb	r3, [r7, #11]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	6979      	ldr	r1, [r7, #20]
 8001bc4:	f002 f810 	bl	8003be8 <USB_EP0StartXfer>
 8001bc8:	e008      	b.n	8001bdc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	f001 fdc2 	bl	8003760 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	f003 020f 	and.w	r2, r3, #15
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d901      	bls.n	8001c04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e050      	b.n	8001ca6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da0f      	bge.n	8001c2c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	f003 020f 	and.w	r2, r3, #15
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	3338      	adds	r3, #56	; 0x38
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	3304      	adds	r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	705a      	strb	r2, [r3, #1]
 8001c2a:	e00d      	b.n	8001c48 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_PCD_EP_SetStall+0x82>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e01e      	b.n	8001ca6 <HAL_PCD_EP_SetStall+0xc0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 f99f 	bl	8003fba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10a      	bne.n	8001c9c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	b2d9      	uxtb	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c96:	461a      	mov	r2, r3
 8001c98:	f002 fb90 	bl	80043bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d901      	bls.n	8001ccc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e042      	b.n	8001d52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	da0f      	bge.n	8001cf4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	f003 020f 	and.w	r2, r3, #15
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	3338      	adds	r3, #56	; 0x38
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3304      	adds	r3, #4
 8001cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	705a      	strb	r2, [r3, #1]
 8001cf2:	e00f      	b.n	8001d14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	f003 020f 	and.w	r2, r3, #15
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_PCD_EP_ClrStall+0x86>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e00e      	b.n	8001d52 <HAL_PCD_EP_ClrStall+0xa4>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 f9a7 	bl	8004096 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b08a      	sub	sp, #40	; 0x28
 8001d5e:	af02      	add	r7, sp, #8
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	3338      	adds	r3, #56	; 0x38
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3304      	adds	r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d901      	bls.n	8001d92 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e06c      	b.n	8001e6c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d902      	bls.n	8001dae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3303      	adds	r3, #3
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001db6:	e02b      	b.n	8001e10 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d902      	bls.n	8001dd4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	3303      	adds	r3, #3
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	68d9      	ldr	r1, [r3, #12]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4603      	mov	r3, r0
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f002 f84b 	bl	8003e8e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	441a      	add	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	699a      	ldr	r2, [r3, #24]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	441a      	add	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d809      	bhi.n	8001e3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d203      	bcs.n	8001e3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1be      	bne.n	8001db8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d811      	bhi.n	8001e6a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e66:	4013      	ands	r3, r2
 8001e68:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	333c      	adds	r3, #60	; 0x3c
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	f040 80a0 	bne.w	8001fec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a72      	ldr	r2, [pc, #456]	; (8002084 <PCD_EP_OutXfrComplete_int+0x210>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	f240 80dd 	bls.w	800207a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80d7 	beq.w	800207a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ede:	6093      	str	r3, [r2, #8]
 8001ee0:	e0cb      	b.n	800207a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d009      	beq.n	8001f00 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2320      	movs	r3, #32
 8001efc:	6093      	str	r3, [r2, #8]
 8001efe:	e0bc      	b.n	800207a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 80b7 	bne.w	800207a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a5d      	ldr	r2, [pc, #372]	; (8002084 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d90f      	bls.n	8001f34 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f30:	6093      	str	r3, [r2, #8]
 8001f32:	e0a2      	b.n	800207a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f46:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	0159      	lsls	r1, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	440b      	add	r3, r1
 8001f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001f5a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4403      	add	r3, r0
 8001f6a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f6e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4403      	add	r3, r0
 8001f92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4419      	add	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4403      	add	r3, r0
 8001fa8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d114      	bne.n	8001fde <PCD_EP_OutXfrComplete_int+0x16a>
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d108      	bne.n	8001fde <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2101      	movs	r1, #1
 8001fda:	f002 f9ef 	bl	80043bc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f004 f9b9 	bl	800635c <HAL_PCD_DataOutStageCallback>
 8001fea:	e046      	b.n	800207a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a26      	ldr	r2, [pc, #152]	; (8002088 <PCD_EP_OutXfrComplete_int+0x214>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d124      	bne.n	800203e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200a:	461a      	mov	r2, r3
 800200c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002010:	6093      	str	r3, [r2, #8]
 8002012:	e032      	b.n	800207a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202a:	461a      	mov	r2, r3
 800202c:	2320      	movs	r3, #32
 800202e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f004 f990 	bl	800635c <HAL_PCD_DataOutStageCallback>
 800203c:	e01d      	b.n	800207a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d114      	bne.n	800206e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d108      	bne.n	800206e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002066:	461a      	mov	r2, r3
 8002068:	2100      	movs	r1, #0
 800206a:	f002 f9a7 	bl	80043bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f004 f971 	bl	800635c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	4f54300a 	.word	0x4f54300a
 8002088:	4f54310a 	.word	0x4f54310a

0800208c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	333c      	adds	r3, #60	; 0x3c
 80020a4:	3304      	adds	r3, #4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4a15      	ldr	r2, [pc, #84]	; (8002114 <PCD_EP_OutSetupPacket_int+0x88>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d90e      	bls.n	80020e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d8:	461a      	mov	r2, r3
 80020da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f004 f929 	bl	8006338 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <PCD_EP_OutSetupPacket_int+0x88>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d90c      	bls.n	8002108 <PCD_EP_OutSetupPacket_int+0x7c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002100:	461a      	mov	r2, r3
 8002102:	2101      	movs	r1, #1
 8002104:	f002 f95a 	bl	80043bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	4f54300a 	.word	0x4f54300a

08002118 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
 8002124:	4613      	mov	r3, r2
 8002126:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d107      	bne.n	8002146 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002136:	883b      	ldrh	r3, [r7, #0]
 8002138:	0419      	lsls	r1, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	430a      	orrs	r2, r1
 8002142:	629a      	str	r2, [r3, #40]	; 0x28
 8002144:	e028      	b.n	8002198 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	0c1b      	lsrs	r3, r3, #16
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4413      	add	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e00d      	b.n	8002176 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	3340      	adds	r3, #64	; 0x40
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	4413      	add	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	3301      	adds	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	3b01      	subs	r3, #1
 800217c:	429a      	cmp	r2, r3
 800217e:	d3ec      	bcc.n	800215a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002180:	883b      	ldrh	r3, [r7, #0]
 8002182:	0418      	lsls	r0, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6819      	ldr	r1, [r3, #0]
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	3b01      	subs	r3, #1
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4302      	orrs	r2, r0
 8002190:	3340      	adds	r3, #64	; 0x40
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e267      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d075      	beq.n	80022ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fe:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b04      	cmp	r3, #4
 8002208:	d00c      	beq.n	8002224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220a:	4b85      	ldr	r3, [pc, #532]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002212:	2b08      	cmp	r3, #8
 8002214:	d112      	bne.n	800223c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002216:	4b82      	ldr	r3, [pc, #520]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002222:	d10b      	bne.n	800223c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	4b7e      	ldr	r3, [pc, #504]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d05b      	beq.n	80022e8 <HAL_RCC_OscConfig+0x108>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d157      	bne.n	80022e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e242      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d106      	bne.n	8002254 <HAL_RCC_OscConfig+0x74>
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xb0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x98>
 800225e:	4b70      	ldr	r3, [pc, #448]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a6f      	ldr	r2, [pc, #444]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6c      	ldr	r2, [pc, #432]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xb0>
 8002278:	4b69      	ldr	r3, [pc, #420]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a68      	ldr	r2, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b66      	ldr	r3, [pc, #408]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a65      	ldr	r2, [pc, #404]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fb40 	bl	800091c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a0:	f7fe fb3c 	bl	800091c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e207      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xc0>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fb2c 	bl	800091c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe fb28 	bl	800091c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1f3      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b51      	ldr	r3, [pc, #324]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0xe8>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022f6:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230e:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x152>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1c7      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4937      	ldr	r1, [pc, #220]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_RCC_OscConfig+0x244>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fae1 	bl	800091c <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235e:	f7fe fadd 	bl	800091c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1a8      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4925      	ldr	r1, [pc, #148]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_OscConfig+0x244>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fac0 	bl	800091c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a0:	f7fe fabc 	bl	800091c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e187      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d036      	beq.n	8002438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_RCC_OscConfig+0x248>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe faa0 	bl	800091c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fa9c 	bl	800091c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e167      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x240>)
 80023f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x200>
 80023fe:	e01b      	b.n	8002438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_OscConfig+0x248>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7fe fa89 	bl	800091c <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	e00e      	b.n	800242c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240e:	f7fe fa85 	bl	800091c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d907      	bls.n	800242c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e150      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
 8002420:	40023800 	.word	0x40023800
 8002424:	42470000 	.word	0x42470000
 8002428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	4b88      	ldr	r3, [pc, #544]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800242e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ea      	bne.n	800240e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8097 	beq.w	8002574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244a:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10f      	bne.n	8002476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a7c      	ldr	r2, [pc, #496]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b77      	ldr	r3, [pc, #476]	; (8002654 <HAL_RCC_OscConfig+0x474>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b74      	ldr	r3, [pc, #464]	; (8002654 <HAL_RCC_OscConfig+0x474>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a73      	ldr	r2, [pc, #460]	; (8002654 <HAL_RCC_OscConfig+0x474>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fe fa45 	bl	800091c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fe fa41 	bl	800091c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e10c      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCC_OscConfig+0x474>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x2ea>
 80024bc:	4b64      	ldr	r3, [pc, #400]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	4a63      	ldr	r2, [pc, #396]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6713      	str	r3, [r2, #112]	; 0x70
 80024c8:	e01c      	b.n	8002504 <HAL_RCC_OscConfig+0x324>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x30c>
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a5e      	ldr	r2, [pc, #376]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a5b      	ldr	r2, [pc, #364]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0x324>
 80024ec:	4b58      	ldr	r3, [pc, #352]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	4a57      	ldr	r2, [pc, #348]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6713      	str	r3, [r2, #112]	; 0x70
 80024f8:	4b55      	ldr	r3, [pc, #340]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a54      	ldr	r2, [pc, #336]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80024fe:	f023 0304 	bic.w	r3, r3, #4
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d015      	beq.n	8002538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe fa06 	bl	800091c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002512:	e00a      	b.n	800252a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fa02 	bl	800091c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e0cb      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252a:	4b49      	ldr	r3, [pc, #292]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0ee      	beq.n	8002514 <HAL_RCC_OscConfig+0x334>
 8002536:	e014      	b.n	8002562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002538:	f7fe f9f0 	bl	800091c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7fe f9ec 	bl	800091c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e0b5      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002556:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ee      	bne.n	8002540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002568:	4b39      	ldr	r3, [pc, #228]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a38      	ldr	r2, [pc, #224]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800256e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a1 	beq.w	80026c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800257e:	4b34      	ldr	r3, [pc, #208]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b08      	cmp	r3, #8
 8002588:	d05c      	beq.n	8002644 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d141      	bne.n	8002616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b31      	ldr	r3, [pc, #196]	; (8002658 <HAL_RCC_OscConfig+0x478>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe f9c0 	bl	800091c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe f9bc 	bl	800091c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e087      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	019b      	lsls	r3, r3, #6
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	3b01      	subs	r3, #1
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	491b      	ldr	r1, [pc, #108]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x478>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe f995 	bl	800091c <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe f991 	bl	800091c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e05c      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x416>
 8002614:	e054      	b.n	80026c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_RCC_OscConfig+0x478>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe f97e 	bl	800091c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe f97a 	bl	800091c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e045      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCC_OscConfig+0x470>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x444>
 8002642:	e03d      	b.n	80026c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e038      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
 8002650:	40023800 	.word	0x40023800
 8002654:	40007000 	.word	0x40007000
 8002658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x4ec>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d028      	beq.n	80026bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d121      	bne.n	80026bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d11a      	bne.n	80026bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002694:	4293      	cmp	r3, r2
 8002696:	d111      	bne.n	80026bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0cc      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d90c      	bls.n	800270c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b65      	ldr	r3, [pc, #404]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0b8      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a58      	ldr	r2, [pc, #352]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800272e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800273c:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4a52      	ldr	r2, [pc, #328]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	494d      	ldr	r1, [pc, #308]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d044      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d119      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d003      	beq.n	800278e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278a:	2b03      	cmp	r3, #3
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e067      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4934      	ldr	r1, [pc, #208]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c0:	f7fe f8ac 	bl	800091c <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7fe f8a8 	bl	800091c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e04f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d20c      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e032      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4916      	ldr	r1, [pc, #88]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002856:	f000 f821 	bl	800289c <HAL_RCC_GetSysClockFreq>
 800285a:	4602      	mov	r2, r0
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	490a      	ldr	r1, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	5ccb      	ldrb	r3, [r1, r3]
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe f80c 	bl	8000894 <HAL_InitTick>

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00
 800288c:	40023800 	.word	0x40023800
 8002890:	0800695c 	.word	0x0800695c
 8002894:	20000000 	.word	0x20000000
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a0:	b090      	sub	sp, #64	; 0x40
 80028a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
 80028a8:	2300      	movs	r3, #0
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ac:	2300      	movs	r3, #0
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b4:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d00d      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x40>
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	f200 80a1 	bhi.w	8002a08 <HAL_RCC_GetSysClockFreq+0x16c>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ce:	e09b      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x184>)
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80028d4:	e09b      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028d6:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x188>)
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028da:	e098      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028dc:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e6:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d028      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f2:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	2200      	movs	r2, #0
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	627a      	str	r2, [r7, #36]	; 0x24
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002904:	2100      	movs	r1, #0
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002908:	fb03 f201 	mul.w	r2, r3, r1
 800290c:	2300      	movs	r3, #0
 800290e:	fb00 f303 	mul.w	r3, r0, r3
 8002912:	4413      	add	r3, r2
 8002914:	4a43      	ldr	r2, [pc, #268]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002916:	fba0 1202 	umull	r1, r2, r0, r2
 800291a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800291c:	460a      	mov	r2, r1
 800291e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002922:	4413      	add	r3, r2
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002928:	2200      	movs	r2, #0
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	61fa      	str	r2, [r7, #28]
 800292e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002932:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002936:	f7fd fc4f 	bl	80001d8 <__aeabi_uldivmod>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4613      	mov	r3, r2
 8002940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002942:	e053      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002944:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	2200      	movs	r2, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	617a      	str	r2, [r7, #20]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002956:	f04f 0b00 	mov.w	fp, #0
 800295a:	4652      	mov	r2, sl
 800295c:	465b      	mov	r3, fp
 800295e:	f04f 0000 	mov.w	r0, #0
 8002962:	f04f 0100 	mov.w	r1, #0
 8002966:	0159      	lsls	r1, r3, #5
 8002968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800296c:	0150      	lsls	r0, r2, #5
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	ebb2 080a 	subs.w	r8, r2, sl
 8002976:	eb63 090b 	sbc.w	r9, r3, fp
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002986:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800298a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800298e:	ebb2 0408 	subs.w	r4, r2, r8
 8002992:	eb63 0509 	sbc.w	r5, r3, r9
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	00eb      	lsls	r3, r5, #3
 80029a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a4:	00e2      	lsls	r2, r4, #3
 80029a6:	4614      	mov	r4, r2
 80029a8:	461d      	mov	r5, r3
 80029aa:	eb14 030a 	adds.w	r3, r4, sl
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	eb45 030b 	adc.w	r3, r5, fp
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c2:	4629      	mov	r1, r5
 80029c4:	028b      	lsls	r3, r1, #10
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029cc:	4621      	mov	r1, r4
 80029ce:	028a      	lsls	r2, r1, #10
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d6:	2200      	movs	r2, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	60fa      	str	r2, [r7, #12]
 80029dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029e0:	f7fd fbfa 	bl	80001d8 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4613      	mov	r3, r2
 80029ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	3301      	adds	r3, #1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a06:	e002      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3740      	adds	r7, #64	; 0x40
 8002a14:	46bd      	mov	sp, r7
 8002a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	017d7840 	.word	0x017d7840

08002a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000000 	.word	0x20000000

08002a40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d038      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a6e:	f7fd ff55 	bl	800091c <HAL_GetTick>
 8002a72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a76:	f7fd ff51 	bl	800091c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0bd      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a88:	4b61      	ldr	r3, [pc, #388]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	019b      	lsls	r3, r3, #6
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	071b      	lsls	r3, r3, #28
 8002aa6:	495a      	ldr	r1, [pc, #360]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002aae:	4b57      	ldr	r3, [pc, #348]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fd ff32 	bl	800091c <HAL_GetTick>
 8002ab8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002abc:	f7fd ff2e 	bl	800091c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e09a      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ace:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 8083 	beq.w	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	4a47      	ldr	r2, [pc, #284]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6413      	str	r3, [r2, #64]	; 0x40
 8002af8:	4b45      	ldr	r3, [pc, #276]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b04:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b10:	f7fd ff04 	bl	800091c <HAL_GetTick>
 8002b14:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7fd ff00 	bl	800091c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e06c      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b36:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d02f      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d028      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b54:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b64:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b6a:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d114      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fd fece 	bl	800091c <HAL_GetTick>
 8002b80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b82:	e00a      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fd feca 	bl	800091c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e034      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0ee      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002bb4:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc8:	4911      	ldr	r1, [pc, #68]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
 8002bce:	e005      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bda:	6093      	str	r3, [r2, #8]
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be8:	4909      	ldr	r1, [pc, #36]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7d1a      	ldrb	r2, [r3, #20]
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002c00:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	42470068 	.word	0x42470068
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40007000 	.word	0x40007000
 8002c18:	42470e40 	.word	0x42470e40
 8002c1c:	424711e0 	.word	0x424711e0

08002c20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e083      	b.n	8002d3a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7f5b      	ldrb	r3, [r3, #29]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd fd40 	bl	80006c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	22ca      	movs	r2, #202	; 0xca
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2253      	movs	r2, #83	; 0x53
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f897 	bl	8002d92 <RTC_EnterInitMode>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	22ff      	movs	r2, #255	; 0xff
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2204      	movs	r2, #4
 8002c76:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e05e      	b.n	8002d3a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6919      	ldr	r1, [r3, #16]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	041a      	lsls	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10e      	bne.n	8002d08 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f829 	bl	8002d42 <HAL_RTC_WaitForSynchro>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	22ff      	movs	r2, #255	; 0xff
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2204      	movs	r2, #4
 8002d02:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e018      	b.n	8002d3a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	22ff      	movs	r2, #255	; 0xff
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5e:	f7fd fddd 	bl	800091c <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002d64:	e009      	b.n	8002d7a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d66:	f7fd fdd9 	bl	800091c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d74:	d901      	bls.n	8002d7a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e007      	b.n	8002d8a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ee      	beq.n	8002d66 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d119      	bne.n	8002de0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295
 8002db4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002db6:	f7fd fdb1 	bl	800091c <HAL_GetTick>
 8002dba:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002dbc:	e009      	b.n	8002dd2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002dbe:	f7fd fdad 	bl	800091c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dcc:	d901      	bls.n	8002dd2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e007      	b.n	8002de2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ee      	beq.n	8002dbe <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002dea:	b084      	sub	sp, #16
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	f107 001c 	add.w	r0, r7, #28
 8002df8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d122      	bne.n	8002e48 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f001 fb1b 	bl	8004478 <USB_CoreReset>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	e01a      	b.n	8002e7e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f001 fb0f 	bl	8004478 <USB_CoreReset>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
 8002e70:	e005      	b.n	8002e7e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10b      	bne.n	8002e9c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f043 0206 	orr.w	r2, r3, #6
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ea8:	b004      	add	sp, #16
 8002eaa:	4770      	bx	lr

08002eac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d165      	bne.n	8002f8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4a41      	ldr	r2, [pc, #260]	; (8002fc8 <USB_SetTurnaroundTime+0x11c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d906      	bls.n	8002ed6 <USB_SetTurnaroundTime+0x2a>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4a40      	ldr	r2, [pc, #256]	; (8002fcc <USB_SetTurnaroundTime+0x120>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d202      	bcs.n	8002ed6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ed0:	230f      	movs	r3, #15
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e062      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4a3c      	ldr	r2, [pc, #240]	; (8002fcc <USB_SetTurnaroundTime+0x120>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d306      	bcc.n	8002eec <USB_SetTurnaroundTime+0x40>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4a3b      	ldr	r2, [pc, #236]	; (8002fd0 <USB_SetTurnaroundTime+0x124>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d202      	bcs.n	8002eec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002ee6:	230e      	movs	r3, #14
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e057      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4a38      	ldr	r2, [pc, #224]	; (8002fd0 <USB_SetTurnaroundTime+0x124>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d306      	bcc.n	8002f02 <USB_SetTurnaroundTime+0x56>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4a37      	ldr	r2, [pc, #220]	; (8002fd4 <USB_SetTurnaroundTime+0x128>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d202      	bcs.n	8002f02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002efc:	230d      	movs	r3, #13
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e04c      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4a33      	ldr	r2, [pc, #204]	; (8002fd4 <USB_SetTurnaroundTime+0x128>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d306      	bcc.n	8002f18 <USB_SetTurnaroundTime+0x6c>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4a32      	ldr	r2, [pc, #200]	; (8002fd8 <USB_SetTurnaroundTime+0x12c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d802      	bhi.n	8002f18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002f12:	230c      	movs	r3, #12
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e041      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <USB_SetTurnaroundTime+0x12c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d906      	bls.n	8002f2e <USB_SetTurnaroundTime+0x82>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4a2e      	ldr	r2, [pc, #184]	; (8002fdc <USB_SetTurnaroundTime+0x130>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d802      	bhi.n	8002f2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002f28:	230b      	movs	r3, #11
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e036      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <USB_SetTurnaroundTime+0x130>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d906      	bls.n	8002f44 <USB_SetTurnaroundTime+0x98>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <USB_SetTurnaroundTime+0x134>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d802      	bhi.n	8002f44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002f3e:	230a      	movs	r3, #10
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e02b      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4a26      	ldr	r2, [pc, #152]	; (8002fe0 <USB_SetTurnaroundTime+0x134>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d906      	bls.n	8002f5a <USB_SetTurnaroundTime+0xae>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4a25      	ldr	r2, [pc, #148]	; (8002fe4 <USB_SetTurnaroundTime+0x138>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d202      	bcs.n	8002f5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002f54:	2309      	movs	r3, #9
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e020      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <USB_SetTurnaroundTime+0x138>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d306      	bcc.n	8002f70 <USB_SetTurnaroundTime+0xc4>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <USB_SetTurnaroundTime+0x13c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d802      	bhi.n	8002f70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e015      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <USB_SetTurnaroundTime+0x13c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d906      	bls.n	8002f86 <USB_SetTurnaroundTime+0xda>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <USB_SetTurnaroundTime+0x140>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d202      	bcs.n	8002f86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002f80:	2307      	movs	r3, #7
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	e00a      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002f86:	2306      	movs	r3, #6
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e007      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f92:	2309      	movs	r3, #9
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	e001      	b.n	8002f9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002f98:	2309      	movs	r3, #9
 8002f9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	029b      	lsls	r3, r3, #10
 8002fb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	00d8acbf 	.word	0x00d8acbf
 8002fcc:	00e4e1c0 	.word	0x00e4e1c0
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	01067380 	.word	0x01067380
 8002fd8:	011a499f 	.word	0x011a499f
 8002fdc:	01312cff 	.word	0x01312cff
 8002fe0:	014ca43f 	.word	0x014ca43f
 8002fe4:	016e3600 	.word	0x016e3600
 8002fe8:	01a6ab1f 	.word	0x01a6ab1f
 8002fec:	01e84800 	.word	0x01e84800

08002ff0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f023 0201 	bic.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d115      	bne.n	8003082 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003062:	2001      	movs	r0, #1
 8003064:	f7fd fc66 	bl	8000934 <HAL_Delay>
      ms++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3301      	adds	r3, #1
 800306c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f001 f972 	bl	8004358 <USB_GetMode>
 8003074:	4603      	mov	r3, r0
 8003076:	2b01      	cmp	r3, #1
 8003078:	d01e      	beq.n	80030b8 <USB_SetCurrentMode+0x84>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b31      	cmp	r3, #49	; 0x31
 800307e:	d9f0      	bls.n	8003062 <USB_SetCurrentMode+0x2e>
 8003080:	e01a      	b.n	80030b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d115      	bne.n	80030b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003094:	2001      	movs	r0, #1
 8003096:	f7fd fc4d 	bl	8000934 <HAL_Delay>
      ms++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3301      	adds	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f001 f959 	bl	8004358 <USB_GetMode>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <USB_SetCurrentMode+0x84>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b31      	cmp	r3, #49	; 0x31
 80030b0:	d9f0      	bls.n	8003094 <USB_SetCurrentMode+0x60>
 80030b2:	e001      	b.n	80030b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e005      	b.n	80030c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b32      	cmp	r3, #50	; 0x32
 80030bc:	d101      	bne.n	80030c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030cc:	b084      	sub	sp, #16
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	e009      	b.n	8003100 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	3340      	adds	r3, #64	; 0x40
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	2200      	movs	r2, #0
 80030f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	3301      	adds	r3, #1
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b0e      	cmp	r3, #14
 8003104:	d9f2      	bls.n	80030ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d11c      	bne.n	8003146 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	639a      	str	r2, [r3, #56]	; 0x38
 8003144:	e00b      	b.n	800315e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003164:	461a      	mov	r2, r3
 8003166:	2300      	movs	r3, #0
 8003168:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003170:	4619      	mov	r1, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003178:	461a      	mov	r2, r3
 800317a:	680b      	ldr	r3, [r1, #0]
 800317c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10c      	bne.n	800319e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800318a:	2100      	movs	r1, #0
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f945 	bl	800341c <USB_SetDevSpeed>
 8003192:	e008      	b.n	80031a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003194:	2101      	movs	r1, #1
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f940 	bl	800341c <USB_SetDevSpeed>
 800319c:	e003      	b.n	80031a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800319e:	2103      	movs	r1, #3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f93b 	bl	800341c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031a6:	2110      	movs	r1, #16
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8f3 	bl	8003394 <USB_FlushTxFifo>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f90f 	bl	80033dc <USB_FlushRxFifo>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ce:	461a      	mov	r2, r3
 80031d0:	2300      	movs	r3, #0
 80031d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031da:	461a      	mov	r2, r3
 80031dc:	2300      	movs	r3, #0
 80031de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e6:	461a      	mov	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	e043      	b.n	800327a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003208:	d118      	bne.n	800323c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321c:	461a      	mov	r2, r3
 800321e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e013      	b.n	800324e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003232:	461a      	mov	r2, r3
 8003234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e008      	b.n	800324e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003248:	461a      	mov	r2, r3
 800324a:	2300      	movs	r3, #0
 800324c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325a:	461a      	mov	r2, r3
 800325c:	2300      	movs	r3, #0
 800325e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326c:	461a      	mov	r2, r3
 800326e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003272:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	3301      	adds	r3, #1
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	429a      	cmp	r2, r3
 8003280:	d3b7      	bcc.n	80031f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	e043      	b.n	8003310 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800329a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800329e:	d118      	bne.n	80032d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b2:	461a      	mov	r2, r3
 80032b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e013      	b.n	80032e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c8:	461a      	mov	r2, r3
 80032ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e008      	b.n	80032e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032de:	461a      	mov	r2, r3
 80032e0:	2300      	movs	r3, #0
 80032e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f0:	461a      	mov	r2, r3
 80032f2:	2300      	movs	r3, #0
 80032f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003302:	461a      	mov	r2, r3
 8003304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	3301      	adds	r3, #1
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	429a      	cmp	r2, r3
 8003316:	d3b7      	bcc.n	8003288 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800332a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003338:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f043 0210 	orr.w	r2, r3, #16
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <USB_DevInit+0x2c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f043 0208 	orr.w	r2, r3, #8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800336a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003380:	7dfb      	ldrb	r3, [r7, #23]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800338c:	b004      	add	sp, #16
 800338e:	4770      	bx	lr
 8003390:	803c3800 	.word	0x803c3800

08003394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	019b      	lsls	r3, r3, #6
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3301      	adds	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <USB_FlushTxFifo+0x44>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e006      	b.n	80033cc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d0f1      	beq.n	80033ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	00030d40 	.word	0x00030d40

080033dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2210      	movs	r2, #16
 80033ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3301      	adds	r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	4a08      	ldr	r2, [pc, #32]	; (8003418 <USB_FlushRxFifo+0x3c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e006      	b.n	800340c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b10      	cmp	r3, #16
 8003408:	d0f1      	beq.n	80033ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	00030d40 	.word	0x00030d40

0800341c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800344e:	b480      	push	{r7}
 8003450:	b087      	sub	sp, #28
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0306 	and.w	r3, r3, #6
 8003466:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d102      	bne.n	8003474 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
 8003472:	e00a      	b.n	800348a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d002      	beq.n	8003480 <USB_GetDevSpeed+0x32>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b06      	cmp	r3, #6
 800347e:	d102      	bne.n	8003486 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003480:	2302      	movs	r3, #2
 8003482:	75fb      	strb	r3, [r7, #23]
 8003484:	e001      	b.n	800348a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003486:	230f      	movs	r3, #15
 8003488:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800348a:	7dfb      	ldrb	r3, [r7, #23]
}
 800348c:	4618      	mov	r0, r3
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	785b      	ldrb	r3, [r3, #1]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d13a      	bne.n	800352a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	68f9      	ldr	r1, [r7, #12]
 80034ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d155      	bne.n	8003598 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	78db      	ldrb	r3, [r3, #3]
 8003506:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003508:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	059b      	lsls	r3, r3, #22
 800350e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003510:	4313      	orrs	r3, r2
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	0151      	lsls	r1, r2, #5
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	440a      	add	r2, r1
 800351a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e036      	b.n	8003598 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	68f9      	ldr	r1, [r7, #12]
 8003544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003548:	4313      	orrs	r3, r2
 800354a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11a      	bne.n	8003598 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	78db      	ldrb	r3, [r3, #3]
 800357c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800357e:	430b      	orrs	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	0151      	lsls	r1, r2, #5
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	440a      	add	r2, r1
 800358a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800358e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003596:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	785b      	ldrb	r3, [r3, #1]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d161      	bne.n	8003688 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035da:	d11f      	bne.n	800361c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800361a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	2101      	movs	r1, #1
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	b29b      	uxth	r3, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800363c:	4013      	ands	r3, r2
 800363e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f303 	lsl.w	r3, r1, r3
 8003656:	b29b      	uxth	r3, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003660:	4013      	ands	r3, r2
 8003662:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	0159      	lsls	r1, r3, #5
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	440b      	add	r3, r1
 800367a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367e:	4619      	mov	r1, r3
 8003680:	4b35      	ldr	r3, [pc, #212]	; (8003758 <USB_DeactivateEndpoint+0x1b0>)
 8003682:	4013      	ands	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
 8003686:	e060      	b.n	800374a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800369a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800369e:	d11f      	bne.n	80036e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	0151      	lsls	r1, r2, #5
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	440a      	add	r2, r1
 80036b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	0151      	lsls	r1, r2, #5
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	440a      	add	r2, r1
 80036d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	43db      	mvns	r3, r3
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003700:	4013      	ands	r3, r2
 8003702:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	041b      	lsls	r3, r3, #16
 800371c:	43db      	mvns	r3, r3
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003724:	4013      	ands	r3, r2
 8003726:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	0159      	lsls	r1, r3, #5
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	440b      	add	r3, r1
 800373e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003742:	4619      	mov	r1, r3
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <USB_DeactivateEndpoint+0x1b4>)
 8003746:	4013      	ands	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	ec337800 	.word	0xec337800
 800375c:	eff37800 	.word	0xeff37800

08003760 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	785b      	ldrb	r3, [r3, #1]
 800377c:	2b01      	cmp	r3, #1
 800377e:	f040 815c 	bne.w	8003a3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d132      	bne.n	80037f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	0151      	lsls	r1, r2, #5
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	440a      	add	r2, r1
 80037a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e8:	0cdb      	lsrs	r3, r3, #19
 80037ea:	04db      	lsls	r3, r3, #19
 80037ec:	6113      	str	r3, [r2, #16]
 80037ee:	e074      	b.n	80038da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	0151      	lsls	r1, r2, #5
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	440a      	add	r2, r1
 8003806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380a:	0cdb      	lsrs	r3, r3, #19
 800380c:	04db      	lsls	r3, r3, #19
 800380e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	440a      	add	r2, r1
 8003826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800382e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003840:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	6959      	ldr	r1, [r3, #20]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	440b      	add	r3, r1
 800384c:	1e59      	subs	r1, r3, #1
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	fbb1 f3f3 	udiv	r3, r1, r3
 8003856:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003858:	4b9d      	ldr	r3, [pc, #628]	; (8003ad0 <USB_EPStartXfer+0x370>)
 800385a:	400b      	ands	r3, r1
 800385c:	69b9      	ldr	r1, [r7, #24]
 800385e:	0148      	lsls	r0, r1, #5
 8003860:	69f9      	ldr	r1, [r7, #28]
 8003862:	4401      	add	r1, r0
 8003864:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003868:	4313      	orrs	r3, r2
 800386a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003882:	69b9      	ldr	r1, [r7, #24]
 8003884:	0148      	lsls	r0, r1, #5
 8003886:	69f9      	ldr	r1, [r7, #28]
 8003888:	4401      	add	r1, r0
 800388a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800388e:	4313      	orrs	r3, r2
 8003890:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	78db      	ldrb	r3, [r3, #3]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d11f      	bne.n	80038da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	0151      	lsls	r1, r2, #5
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	440a      	add	r2, r1
 80038b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80038b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	0151      	lsls	r1, r2, #5
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	440a      	add	r2, r1
 80038d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d14b      	bne.n	8003978 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	78db      	ldrb	r3, [r3, #3]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d128      	bne.n	8003956 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d110      	bne.n	8003936 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	0151      	lsls	r1, r2, #5
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	440a      	add	r2, r1
 800392a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800392e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	e00f      	b.n	8003956 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	440a      	add	r2, r1
 800394c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003954:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	0151      	lsls	r1, r2, #5
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	440a      	add	r2, r1
 800396c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003970:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e12f      	b.n	8003bd8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	440a      	add	r2, r1
 800398e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003992:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003996:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	78db      	ldrb	r3, [r3, #3]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d015      	beq.n	80039cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8117 	beq.w	8003bd8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	2101      	movs	r1, #1
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	69f9      	ldr	r1, [r7, #28]
 80039c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039c6:	4313      	orrs	r3, r2
 80039c8:	634b      	str	r3, [r1, #52]	; 0x34
 80039ca:	e105      	b.n	8003bd8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d110      	bne.n	80039fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	0151      	lsls	r1, r2, #5
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	440a      	add	r2, r1
 80039f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e00f      	b.n	8003a1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	68d9      	ldr	r1, [r3, #12]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	b298      	uxth	r0, r3
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	4603      	mov	r3, r0
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fa2b 	bl	8003e8e <USB_WritePacket>
 8003a38:	e0ce      	b.n	8003bd8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	0151      	lsls	r1, r2, #5
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	440a      	add	r2, r1
 8003a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a54:	0cdb      	lsrs	r3, r3, #19
 8003a56:	04db      	lsls	r3, r3, #19
 8003a58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	0151      	lsls	r1, r2, #5
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	440a      	add	r2, r1
 8003a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d126      	bne.n	8003ad4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9c:	69b9      	ldr	r1, [r7, #24]
 8003a9e:	0148      	lsls	r0, r1, #5
 8003aa0:	69f9      	ldr	r1, [r7, #28]
 8003aa2:	4401      	add	r1, r0
 8003aa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	0151      	lsls	r1, r2, #5
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aca:	6113      	str	r3, [r2, #16]
 8003acc:	e036      	b.n	8003b3c <USB_EPStartXfer+0x3dc>
 8003ace:	bf00      	nop
 8003ad0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4413      	add	r3, r2
 8003ade:	1e5a      	subs	r2, r3, #1
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	8afb      	ldrh	r3, [r7, #22]
 8003afa:	04d9      	lsls	r1, r3, #19
 8003afc:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <USB_EPStartXfer+0x484>)
 8003afe:	400b      	ands	r3, r1
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	0148      	lsls	r0, r1, #5
 8003b04:	69f9      	ldr	r1, [r7, #28]
 8003b06:	4401      	add	r1, r0
 8003b08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	8af9      	ldrh	r1, [r7, #22]
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2c:	69b9      	ldr	r1, [r7, #24]
 8003b2e:	0148      	lsls	r0, r1, #5
 8003b30:	69f9      	ldr	r1, [r7, #28]
 8003b32:	4401      	add	r1, r0
 8003b34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d10d      	bne.n	8003b5e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	68d9      	ldr	r1, [r3, #12]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5a:	460a      	mov	r2, r1
 8003b5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	78db      	ldrb	r3, [r3, #3]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d128      	bne.n	8003bb8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d110      	bne.n	8003b98 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	0151      	lsls	r1, r2, #5
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	440a      	add	r2, r1
 8003b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e00f      	b.n	8003bb8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	0151      	lsls	r1, r2, #5
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	440a      	add	r2, r1
 8003bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	1ff80000 	.word	0x1ff80000

08003be8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	785b      	ldrb	r3, [r3, #1]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f040 80cd 	bne.w	8003da4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d132      	bne.n	8003c78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	0151      	lsls	r1, r2, #5
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	440a      	add	r2, r1
 8003c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c70:	0cdb      	lsrs	r3, r3, #19
 8003c72:	04db      	lsls	r3, r3, #19
 8003c74:	6113      	str	r3, [r2, #16]
 8003c76:	e04e      	b.n	8003d16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c92:	0cdb      	lsrs	r3, r3, #19
 8003c94:	04db      	lsls	r3, r3, #19
 8003c96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d903      	bls.n	8003cd0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d06:	6939      	ldr	r1, [r7, #16]
 8003d08:	0148      	lsls	r0, r1, #5
 8003d0a:	6979      	ldr	r1, [r7, #20]
 8003d0c:	4401      	add	r1, r0
 8003d0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d12:	4313      	orrs	r3, r2
 8003d14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d11e      	bne.n	8003d5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	e092      	b.n	8003e80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	0151      	lsls	r1, r2, #5
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	440a      	add	r2, r1
 8003d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d07e      	beq.n	8003e80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	6979      	ldr	r1, [r7, #20]
 8003d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	634b      	str	r3, [r1, #52]	; 0x34
 8003da2:	e06d      	b.n	8003e80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dbe:	0cdb      	lsrs	r3, r3, #19
 8003dc0:	04db      	lsls	r3, r3, #19
 8003dc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003de2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003de6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2e:	6939      	ldr	r1, [r7, #16]
 8003e30:	0148      	lsls	r0, r1, #5
 8003e32:	6979      	ldr	r1, [r7, #20]
 8003e34:	4401      	add	r1, r0
 8003e36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d10d      	bne.n	8003e60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	68d9      	ldr	r1, [r3, #12]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5c:	460a      	mov	r2, r1
 8003e5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b089      	sub	sp, #36	; 0x24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	4611      	mov	r1, r2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	71fb      	strb	r3, [r7, #7]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003eac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d123      	bne.n	8003efc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003eb4:	88bb      	ldrh	r3, [r7, #4]
 8003eb6:	3303      	adds	r3, #3
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	e018      	b.n	8003ef4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	031a      	lsls	r2, r3, #12
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ece:	461a      	mov	r2, r3
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	3301      	adds	r3, #1
 8003eec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d3e2      	bcc.n	8003ec2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3724      	adds	r7, #36	; 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b08b      	sub	sp, #44	; 0x2c
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	e014      	b.n	8003f60 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	3301      	adds	r3, #1
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	3301      	adds	r3, #1
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	3301      	adds	r3, #1
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	623b      	str	r3, [r7, #32]
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d3e6      	bcc.n	8003f36 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f68:	8bfb      	ldrh	r3, [r7, #30]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01e      	beq.n	8003fac <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f107 0310 	add.w	r3, r7, #16
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	701a      	strb	r2, [r3, #0]
      i++;
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	3301      	adds	r3, #1
 8003f98:	623b      	str	r3, [r7, #32]
      pDest++;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003fa0:	8bfb      	ldrh	r3, [r7, #30]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fa6:	8bfb      	ldrh	r3, [r7, #30]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1ea      	bne.n	8003f82 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	372c      	adds	r7, #44	; 0x2c
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	785b      	ldrb	r3, [r3, #1]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d12c      	bne.n	8004030 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db12      	blt.n	800400e <USB_EPSetStall+0x54>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00f      	beq.n	800400e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004008:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800400c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	0151      	lsls	r1, r2, #5
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	440a      	add	r2, r1
 8004024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e02b      	b.n	8004088 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	db12      	blt.n	8004068 <USB_EPSetStall+0xae>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00f      	beq.n	8004068 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004066:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	440a      	add	r2, r1
 800407e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004086:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	785b      	ldrb	r3, [r3, #1]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d128      	bne.n	8004104 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	78db      	ldrb	r3, [r3, #3]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d003      	beq.n	80040e2 <USB_EPClearStall+0x4c>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	78db      	ldrb	r3, [r3, #3]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d138      	bne.n	8004154 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e027      	b.n	8004154 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	440a      	add	r2, r1
 800411a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800411e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004122:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	78db      	ldrb	r3, [r3, #3]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d003      	beq.n	8004134 <USB_EPClearStall+0x9e>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	78db      	ldrb	r3, [r3, #3]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d10f      	bne.n	8004154 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004152:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004180:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004184:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041c8:	f023 0303 	bic.w	r3, r3, #3
 80041cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041dc:	f023 0302 	bic.w	r3, r3, #2
 80041e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800421e:	f043 0302 	orr.w	r3, r3, #2
 8004222:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4013      	ands	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800424a:	68fb      	ldr	r3, [r7, #12]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	0c1b      	lsrs	r3, r3, #16
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4013      	ands	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	b29b      	uxth	r3, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042ee:	68bb      	ldr	r3, [r7, #8]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
 800432c:	01db      	lsls	r3, r3, #7
 800432e:	b2db      	uxtb	r3, r3
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800434a:	68bb      	ldr	r3, [r7, #8]
}
 800434c:	4618      	mov	r0, r3
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0301 	and.w	r3, r3, #1
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800438e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004392:	f023 0307 	bic.w	r3, r3, #7
 8004396:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	460b      	mov	r3, r1
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	333c      	adds	r3, #60	; 0x3c
 80043d2:	3304      	adds	r3, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4a26      	ldr	r2, [pc, #152]	; (8004474 <USB_EP0_OutStart+0xb8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d90a      	bls.n	80043f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043f0:	d101      	bne.n	80043f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e037      	b.n	8004466 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	2300      	movs	r3, #0
 8004400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004410:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004414:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004424:	f043 0318 	orr.w	r3, r3, #24
 8004428:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004438:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800443c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800443e:	7afb      	ldrb	r3, [r7, #11]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d10f      	bne.n	8004464 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	461a      	mov	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800445e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	4f54300a 	.word	0x4f54300a

08004478 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	4a13      	ldr	r2, [pc, #76]	; (80044d8 <USB_CoreReset+0x60>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d901      	bls.n	8004494 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e01a      	b.n	80044ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	daf3      	bge.n	8004484 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f043 0201 	orr.w	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	4a09      	ldr	r2, [pc, #36]	; (80044d8 <USB_CoreReset+0x60>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d901      	bls.n	80044bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e006      	b.n	80044ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d0f1      	beq.n	80044ac <USB_CoreReset+0x34>

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	00030d40 	.word	0x00030d40

080044dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80044e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80044ec:	f002 f996 	bl	800681c <USBD_static_malloc>
 80044f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d105      	bne.n	8004504 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004500:	2302      	movs	r3, #2
 8004502:	e066      	b.n	80045d2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7c1b      	ldrb	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d119      	bne.n	8004548 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004518:	2202      	movs	r2, #2
 800451a:	2181      	movs	r1, #129	; 0x81
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f002 f85a 	bl	80065d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800452c:	2202      	movs	r2, #2
 800452e:	2101      	movs	r1, #1
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f002 f850 	bl	80065d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2210      	movs	r2, #16
 8004542:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004546:	e016      	b.n	8004576 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004548:	2340      	movs	r3, #64	; 0x40
 800454a:	2202      	movs	r2, #2
 800454c:	2181      	movs	r1, #129	; 0x81
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f002 f841 	bl	80065d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800455a:	2340      	movs	r3, #64	; 0x40
 800455c:	2202      	movs	r2, #2
 800455e:	2101      	movs	r1, #1
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f002 f838 	bl	80065d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2210      	movs	r2, #16
 8004572:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004576:	2308      	movs	r3, #8
 8004578:	2203      	movs	r2, #3
 800457a:	2182      	movs	r1, #130	; 0x82
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f002 f82a 	bl	80065d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	7c1b      	ldrb	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045b6:	2101      	movs	r1, #1
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f002 f8fb 	bl	80067b4 <USBD_LL_PrepareReceive>
 80045be:	e007      	b.n	80045d0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	2101      	movs	r1, #1
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f002 f8f2 	bl	80067b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80045e6:	2181      	movs	r1, #129	; 0x81
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f002 f81a 	bl	8006622 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80045f4:	2101      	movs	r1, #1
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f002 f813 	bl	8006622 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004604:	2182      	movs	r1, #130	; 0x82
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f002 f80b 	bl	8006622 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00e      	beq.n	8004644 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004636:	4618      	mov	r0, r3
 8004638:	f002 f8fe 	bl	8006838 <USBD_static_free>
    pdev->pClassData = NULL;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004660:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004674:	2303      	movs	r3, #3
 8004676:	e0af      	b.n	80047d8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004680:	2b00      	cmp	r3, #0
 8004682:	d03f      	beq.n	8004704 <USBD_CDC_Setup+0xb4>
 8004684:	2b20      	cmp	r3, #32
 8004686:	f040 809f 	bne.w	80047c8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	88db      	ldrh	r3, [r3, #6]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d02e      	beq.n	80046f0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b25b      	sxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	da16      	bge.n	80046ca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80046a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	88d2      	ldrh	r2, [r2, #6]
 80046ae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	88db      	ldrh	r3, [r3, #6]
 80046b4:	2b07      	cmp	r3, #7
 80046b6:	bf28      	it	cs
 80046b8:	2307      	movcs	r3, #7
 80046ba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	89fa      	ldrh	r2, [r7, #14]
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 fae9 	bl	8005c9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80046c8:	e085      	b.n	80047d6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	785a      	ldrb	r2, [r3, #1]
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	88db      	ldrh	r3, [r3, #6]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80046e0:	6939      	ldr	r1, [r7, #16]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	88db      	ldrh	r3, [r3, #6]
 80046e6:	461a      	mov	r2, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f001 fb02 	bl	8005cf2 <USBD_CtlPrepareRx>
      break;
 80046ee:	e072      	b.n	80047d6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	7850      	ldrb	r0, [r2, #1]
 80046fc:	2200      	movs	r2, #0
 80046fe:	6839      	ldr	r1, [r7, #0]
 8004700:	4798      	blx	r3
      break;
 8004702:	e068      	b.n	80047d6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2b0b      	cmp	r3, #11
 800470a:	d852      	bhi.n	80047b2 <USBD_CDC_Setup+0x162>
 800470c:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <USBD_CDC_Setup+0xc4>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004745 	.word	0x08004745
 8004718:	080047c1 	.word	0x080047c1
 800471c:	080047b3 	.word	0x080047b3
 8004720:	080047b3 	.word	0x080047b3
 8004724:	080047b3 	.word	0x080047b3
 8004728:	080047b3 	.word	0x080047b3
 800472c:	080047b3 	.word	0x080047b3
 8004730:	080047b3 	.word	0x080047b3
 8004734:	080047b3 	.word	0x080047b3
 8004738:	080047b3 	.word	0x080047b3
 800473c:	0800476f 	.word	0x0800476f
 8004740:	08004799 	.word	0x08004799
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b03      	cmp	r3, #3
 800474e:	d107      	bne.n	8004760 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004750:	f107 030a 	add.w	r3, r7, #10
 8004754:	2202      	movs	r2, #2
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f001 fa9e 	bl	8005c9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800475e:	e032      	b.n	80047c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f001 fa28 	bl	8005bb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8004768:	2303      	movs	r3, #3
 800476a:	75fb      	strb	r3, [r7, #23]
          break;
 800476c:	e02b      	b.n	80047c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b03      	cmp	r3, #3
 8004778:	d107      	bne.n	800478a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800477a:	f107 030d 	add.w	r3, r7, #13
 800477e:	2201      	movs	r2, #1
 8004780:	4619      	mov	r1, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f001 fa89 	bl	8005c9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004788:	e01d      	b.n	80047c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f001 fa13 	bl	8005bb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8004792:	2303      	movs	r3, #3
 8004794:	75fb      	strb	r3, [r7, #23]
          break;
 8004796:	e016      	b.n	80047c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d00f      	beq.n	80047c4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f001 fa06 	bl	8005bb8 <USBD_CtlError>
            ret = USBD_FAIL;
 80047ac:	2303      	movs	r3, #3
 80047ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80047b0:	e008      	b.n	80047c4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f001 f9ff 	bl	8005bb8 <USBD_CtlError>
          ret = USBD_FAIL;
 80047ba:	2303      	movs	r3, #3
 80047bc:	75fb      	strb	r3, [r7, #23]
          break;
 80047be:	e002      	b.n	80047c6 <USBD_CDC_Setup+0x176>
          break;
 80047c0:	bf00      	nop
 80047c2:	e008      	b.n	80047d6 <USBD_CDC_Setup+0x186>
          break;
 80047c4:	bf00      	nop
      }
      break;
 80047c6:	e006      	b.n	80047d6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 f9f4 	bl	8005bb8 <USBD_CtlError>
      ret = USBD_FAIL;
 80047d0:	2303      	movs	r3, #3
 80047d2:	75fb      	strb	r3, [r7, #23]
      break;
 80047d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80047f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80047fe:	2303      	movs	r3, #3
 8004800:	e04f      	b.n	80048a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004808:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3318      	adds	r3, #24
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d029      	beq.n	8004874 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3318      	adds	r3, #24
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	78f9      	ldrb	r1, [r7, #3]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	460b      	mov	r3, r1
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	1a5b      	subs	r3, r3, r1
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4403      	add	r3, r0
 8004840:	3344      	adds	r3, #68	; 0x44
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	fbb2 f1f3 	udiv	r1, r2, r3
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800484e:	2b00      	cmp	r3, #0
 8004850:	d110      	bne.n	8004874 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	3318      	adds	r3, #24
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004866:	78f9      	ldrb	r1, [r7, #3]
 8004868:	2300      	movs	r3, #0
 800486a:	2200      	movs	r2, #0
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f001 ff80 	bl	8006772 <USBD_LL_Transmit>
 8004872:	e015      	b.n	80048a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e015      	b.n	80048f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 ff90 	bl	80067f6 <USBD_LL_GetRxDataSize>
 80048d6:	4602      	mov	r2, r0
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80048f2:	4611      	mov	r1, r2
 80048f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800490e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004916:	2303      	movs	r3, #3
 8004918:	e01b      	b.n	8004952 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d015      	beq.n	8004950 <USBD_CDC_EP0_RxReady+0x50>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800492a:	2bff      	cmp	r3, #255	; 0xff
 800492c:	d010      	beq.n	8004950 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800493c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004944:	b292      	uxth	r2, r2
 8004946:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	22ff      	movs	r2, #255	; 0xff
 800494c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2243      	movs	r2, #67	; 0x43
 8004968:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800496a:	4b03      	ldr	r3, [pc, #12]	; (8004978 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	20000094 	.word	0x20000094

0800497c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2243      	movs	r2, #67	; 0x43
 8004988:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800498a:	4b03      	ldr	r3, [pc, #12]	; (8004998 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	20000050 	.word	0x20000050

0800499c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2243      	movs	r2, #67	; 0x43
 80049a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80049aa:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	200000d8 	.word	0x200000d8

080049bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	220a      	movs	r2, #10
 80049c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80049ca:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	2000000c 	.word	0x2000000c

080049dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e004      	b.n	80049fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b087      	sub	sp, #28
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a18:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e008      	b.n	8004a36 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e004      	b.n	8004a68 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e016      	b.n	8004ac0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	7c1b      	ldrb	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 fe84 	bl	80067b4 <USBD_LL_PrepareReceive>
 8004aac:	e007      	b.n	8004abe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ab4:	2340      	movs	r3, #64	; 0x40
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f001 fe7b 	bl	80067b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e01f      	b.n	8004b20 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	79fa      	ldrb	r2, [r7, #7]
 8004b12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f001 fcf7 	bl	8006508 <USBD_LL_Init>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e016      	b.n	8004b6e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	f107 020e 	add.w	r2, r7, #14
 8004b60:	4610      	mov	r0, r2
 8004b62:	4798      	blx	r3
 8004b64:	4602      	mov	r2, r0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f001 fd0e 	bl	80065a0 <USBD_LL_Start>
 8004b84:	4603      	mov	r3, r0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	78fa      	ldrb	r2, [r7, #3]
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
  }

  return USBD_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 ff90 	bl	8005b44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004c32:	461a      	mov	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d01a      	beq.n	8004c7e <USBD_LL_SetupStage+0x72>
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d822      	bhi.n	8004c92 <USBD_LL_SetupStage+0x86>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <USBD_LL_SetupStage+0x4a>
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d00a      	beq.n	8004c6a <USBD_LL_SetupStage+0x5e>
 8004c54:	e01d      	b.n	8004c92 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa62 	bl	8005128 <USBD_StdDevReq>
 8004c64:	4603      	mov	r3, r0
 8004c66:	73fb      	strb	r3, [r7, #15]
      break;
 8004c68:	e020      	b.n	8004cac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fac6 	bl	8005204 <USBD_StdItfReq>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	e016      	b.n	8004cac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fb05 	bl	8005296 <USBD_StdEPReq>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c90:	e00c      	b.n	8004cac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 fcdd 	bl	8006660 <USBD_LL_StallEP>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8004caa:	bf00      	nop
  }

  return ret;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004cc4:	7afb      	ldrb	r3, [r7, #11]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d138      	bne.n	8004d3c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004cd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d14a      	bne.n	8004d72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d913      	bls.n	8004d10 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	1ad2      	subs	r2, r2, r3
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	bf28      	it	cs
 8004d02:	4613      	movcs	r3, r2
 8004d04:	461a      	mov	r2, r3
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f001 f80f 	bl	8005d2c <USBD_CtlContinueRx>
 8004d0e:	e030      	b.n	8004d72 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d10b      	bne.n	8004d34 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f001 f80a 	bl	8005d4e <USBD_CtlSendStatus>
 8004d3a:	e01a      	b.n	8004d72 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d114      	bne.n	8004d72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00e      	beq.n	8004d72 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	7afa      	ldrb	r2, [r7, #11]
 8004d5e:	4611      	mov	r1, r2
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	4798      	blx	r3
 8004d64:	4603      	mov	r3, r0
 8004d66:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	e000      	b.n	8004d74 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	460b      	mov	r3, r1
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004d8a:	7afb      	ldrb	r3, [r7, #11]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d16b      	bne.n	8004e68 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3314      	adds	r3, #20
 8004d94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d156      	bne.n	8004e4e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d914      	bls.n	8004dd6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	1ad2      	subs	r2, r2, r3
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 ff84 	bl	8005cd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2100      	movs	r1, #0
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f001 fcf0 	bl	80067b4 <USBD_LL_PrepareReceive>
 8004dd4:	e03b      	b.n	8004e4e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d11c      	bne.n	8004e1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d316      	bcc.n	8004e1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d20f      	bcs.n	8004e1c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2100      	movs	r1, #0
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 ff65 	bl	8005cd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2200      	movs	r2, #0
 8004e12:	2100      	movs	r1, #0
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f001 fccd 	bl	80067b4 <USBD_LL_PrepareReceive>
 8004e1a:	e018      	b.n	8004e4e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d10b      	bne.n	8004e40 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e40:	2180      	movs	r1, #128	; 0x80
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f001 fc0c 	bl	8006660 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 ff93 	bl	8005d74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d122      	bne.n	8004e9e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff fe98 	bl	8004b8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004e66:	e01a      	b.n	8004e9e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d114      	bne.n	8004e9e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	7afa      	ldrb	r2, [r7, #11]
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	4798      	blx	r3
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
 8004e9c:	e000      	b.n	8004ea0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e02f      	b.n	8004f3c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00f      	beq.n	8004f06 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6852      	ldr	r2, [r2, #4]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	4611      	mov	r1, r2
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f06:	2340      	movs	r3, #64	; 0x40
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f001 fb62 	bl	80065d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2240      	movs	r2, #64	; 0x40
 8004f1e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f22:	2340      	movs	r3, #64	; 0x40
 8004f24:	2200      	movs	r2, #0
 8004f26:	2180      	movs	r1, #128	; 0x80
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f001 fb54 	bl	80065d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2240      	movs	r2, #64	; 0x40
 8004f38:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d106      	bne.n	8004fb2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e012      	b.n	8004ffc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d10b      	bne.n	8004ffa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800501a:	2303      	movs	r3, #3
 800501c:	e014      	b.n	8005048 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b03      	cmp	r3, #3
 8005028:	d10d      	bne.n	8005046 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	78fa      	ldrb	r2, [r7, #3]
 8005040:	4611      	mov	r1, r2
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005066:	2303      	movs	r3, #3
 8005068:	e014      	b.n	8005094 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b03      	cmp	r3, #3
 8005074:	d10d      	bne.n	8005092 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	4611      	mov	r1, r2
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d009      	beq.n	80050e0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6852      	ldr	r2, [r2, #4]
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	4611      	mov	r1, r2
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
  }

  return USBD_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b087      	sub	sp, #28
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	3301      	adds	r3, #1
 8005100:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005108:	8a3b      	ldrh	r3, [r7, #16]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	b21a      	sxth	r2, r3
 800510e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005112:	4313      	orrs	r3, r2
 8005114:	b21b      	sxth	r3, r3
 8005116:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005118:	89fb      	ldrh	r3, [r7, #14]
}
 800511a:	4618      	mov	r0, r3
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d005      	beq.n	800514e <USBD_StdDevReq+0x26>
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d853      	bhi.n	80051ee <USBD_StdDevReq+0xc6>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00b      	beq.n	8005162 <USBD_StdDevReq+0x3a>
 800514a:	2b20      	cmp	r3, #32
 800514c:	d14f      	bne.n	80051ee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	6839      	ldr	r1, [r7, #0]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
 800515c:	4603      	mov	r3, r0
 800515e:	73fb      	strb	r3, [r7, #15]
      break;
 8005160:	e04a      	b.n	80051f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	2b09      	cmp	r3, #9
 8005168:	d83b      	bhi.n	80051e2 <USBD_StdDevReq+0xba>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <USBD_StdDevReq+0x48>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	080051c5 	.word	0x080051c5
 8005174:	080051d9 	.word	0x080051d9
 8005178:	080051e3 	.word	0x080051e3
 800517c:	080051cf 	.word	0x080051cf
 8005180:	080051e3 	.word	0x080051e3
 8005184:	080051a3 	.word	0x080051a3
 8005188:	08005199 	.word	0x08005199
 800518c:	080051e3 	.word	0x080051e3
 8005190:	080051bb 	.word	0x080051bb
 8005194:	080051ad 	.word	0x080051ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f9de 	bl	800555c <USBD_GetDescriptor>
          break;
 80051a0:	e024      	b.n	80051ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb43 	bl	8005830 <USBD_SetAddress>
          break;
 80051aa:	e01f      	b.n	80051ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fb82 	bl	80058b8 <USBD_SetConfig>
 80051b4:	4603      	mov	r3, r0
 80051b6:	73fb      	strb	r3, [r7, #15]
          break;
 80051b8:	e018      	b.n	80051ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fc21 	bl	8005a04 <USBD_GetConfig>
          break;
 80051c2:	e013      	b.n	80051ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fc52 	bl	8005a70 <USBD_GetStatus>
          break;
 80051cc:	e00e      	b.n	80051ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fc81 	bl	8005ad8 <USBD_SetFeature>
          break;
 80051d6:	e009      	b.n	80051ec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fc90 	bl	8005b00 <USBD_ClrFeature>
          break;
 80051e0:	e004      	b.n	80051ec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fce7 	bl	8005bb8 <USBD_CtlError>
          break;
 80051ea:	bf00      	nop
      }
      break;
 80051ec:	e004      	b.n	80051f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fce1 	bl	8005bb8 <USBD_CtlError>
      break;
 80051f6:	bf00      	nop
  }

  return ret;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop

08005204 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d005      	beq.n	800522a <USBD_StdItfReq+0x26>
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d82f      	bhi.n	8005282 <USBD_StdItfReq+0x7e>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <USBD_StdItfReq+0x26>
 8005226:	2b20      	cmp	r3, #32
 8005228:	d12b      	bne.n	8005282 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005230:	b2db      	uxtb	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	2b02      	cmp	r3, #2
 8005236:	d81d      	bhi.n	8005274 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	889b      	ldrh	r3, [r3, #4]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d813      	bhi.n	800526a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	88db      	ldrh	r3, [r3, #6]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d110      	bne.n	800527e <USBD_StdItfReq+0x7a>
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10d      	bne.n	800527e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fd73 	bl	8005d4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005268:	e009      	b.n	800527e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fca3 	bl	8005bb8 <USBD_CtlError>
          break;
 8005272:	e004      	b.n	800527e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fc9e 	bl	8005bb8 <USBD_CtlError>
          break;
 800527c:	e000      	b.n	8005280 <USBD_StdItfReq+0x7c>
          break;
 800527e:	bf00      	nop
      }
      break;
 8005280:	e004      	b.n	800528c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fc97 	bl	8005bb8 <USBD_CtlError>
      break;
 800528a:	bf00      	nop
  }

  return ret;
 800528c:	7bfb      	ldrb	r3, [r7, #15]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	889b      	ldrh	r3, [r3, #4]
 80052a8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d007      	beq.n	80052c6 <USBD_StdEPReq+0x30>
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	f200 8145 	bhi.w	8005546 <USBD_StdEPReq+0x2b0>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00c      	beq.n	80052da <USBD_StdEPReq+0x44>
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	f040 8140 	bne.w	8005546 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
 80052d4:	4603      	mov	r3, r0
 80052d6:	73fb      	strb	r3, [r7, #15]
      break;
 80052d8:	e13a      	b.n	8005550 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d007      	beq.n	80052f2 <USBD_StdEPReq+0x5c>
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	f300 8129 	bgt.w	800553a <USBD_StdEPReq+0x2a4>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d07f      	beq.n	80053ec <USBD_StdEPReq+0x156>
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d03c      	beq.n	800536a <USBD_StdEPReq+0xd4>
 80052f0:	e123      	b.n	800553a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d002      	beq.n	8005304 <USBD_StdEPReq+0x6e>
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d016      	beq.n	8005330 <USBD_StdEPReq+0x9a>
 8005302:	e02c      	b.n	800535e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005304:	7bbb      	ldrb	r3, [r7, #14]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <USBD_StdEPReq+0x90>
 800530a:	7bbb      	ldrb	r3, [r7, #14]
 800530c:	2b80      	cmp	r3, #128	; 0x80
 800530e:	d00a      	beq.n	8005326 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 f9a3 	bl	8006660 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800531a:	2180      	movs	r1, #128	; 0x80
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 f99f 	bl	8006660 <USBD_LL_StallEP>
 8005322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005324:	e020      	b.n	8005368 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fc45 	bl	8005bb8 <USBD_CtlError>
              break;
 800532e:	e01b      	b.n	8005368 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	885b      	ldrh	r3, [r3, #2]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10e      	bne.n	8005356 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005338:	7bbb      	ldrb	r3, [r7, #14]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00b      	beq.n	8005356 <USBD_StdEPReq+0xc0>
 800533e:	7bbb      	ldrb	r3, [r7, #14]
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d008      	beq.n	8005356 <USBD_StdEPReq+0xc0>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	88db      	ldrh	r3, [r3, #6]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800534c:	7bbb      	ldrb	r3, [r7, #14]
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 f985 	bl	8006660 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fcf9 	bl	8005d4e <USBD_CtlSendStatus>

              break;
 800535c:	e004      	b.n	8005368 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fc29 	bl	8005bb8 <USBD_CtlError>
              break;
 8005366:	bf00      	nop
          }
          break;
 8005368:	e0ec      	b.n	8005544 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d002      	beq.n	800537c <USBD_StdEPReq+0xe6>
 8005376:	2b03      	cmp	r3, #3
 8005378:	d016      	beq.n	80053a8 <USBD_StdEPReq+0x112>
 800537a:	e030      	b.n	80053de <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800537c:	7bbb      	ldrb	r3, [r7, #14]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00d      	beq.n	800539e <USBD_StdEPReq+0x108>
 8005382:	7bbb      	ldrb	r3, [r7, #14]
 8005384:	2b80      	cmp	r3, #128	; 0x80
 8005386:	d00a      	beq.n	800539e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005388:	7bbb      	ldrb	r3, [r7, #14]
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 f967 	bl	8006660 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005392:	2180      	movs	r1, #128	; 0x80
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f001 f963 	bl	8006660 <USBD_LL_StallEP>
 800539a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800539c:	e025      	b.n	80053ea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fc09 	bl	8005bb8 <USBD_CtlError>
              break;
 80053a6:	e020      	b.n	80053ea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	885b      	ldrh	r3, [r3, #2]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d11b      	bne.n	80053e8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80053b0:	7bbb      	ldrb	r3, [r7, #14]
 80053b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80053ba:	7bbb      	ldrb	r3, [r7, #14]
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f001 f96d 	bl	800669e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fcc2 	bl	8005d4e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	4798      	blx	r3
 80053d8:	4603      	mov	r3, r0
 80053da:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80053dc:	e004      	b.n	80053e8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fbe9 	bl	8005bb8 <USBD_CtlError>
              break;
 80053e6:	e000      	b.n	80053ea <USBD_StdEPReq+0x154>
              break;
 80053e8:	bf00      	nop
          }
          break;
 80053ea:	e0ab      	b.n	8005544 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d002      	beq.n	80053fe <USBD_StdEPReq+0x168>
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d032      	beq.n	8005462 <USBD_StdEPReq+0x1cc>
 80053fc:	e097      	b.n	800552e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <USBD_StdEPReq+0x17e>
 8005404:	7bbb      	ldrb	r3, [r7, #14]
 8005406:	2b80      	cmp	r3, #128	; 0x80
 8005408:	d004      	beq.n	8005414 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fbd3 	bl	8005bb8 <USBD_CtlError>
                break;
 8005412:	e091      	b.n	8005538 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005418:	2b00      	cmp	r3, #0
 800541a:	da0b      	bge.n	8005434 <USBD_StdEPReq+0x19e>
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	3310      	adds	r3, #16
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4413      	add	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	e00b      	b.n	800544c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005434:	7bbb      	ldrb	r3, [r7, #14]
 8005436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	3304      	adds	r3, #4
 800544c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2202      	movs	r2, #2
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fc1d 	bl	8005c9a <USBD_CtlSendData>
              break;
 8005460:	e06a      	b.n	8005538 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005466:	2b00      	cmp	r3, #0
 8005468:	da11      	bge.n	800548e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800546a:	7bbb      	ldrb	r3, [r7, #14]
 800546c:	f003 020f 	and.w	r2, r3, #15
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	3324      	adds	r3, #36	; 0x24
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d117      	bne.n	80054b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fb96 	bl	8005bb8 <USBD_CtlError>
                  break;
 800548c:	e054      	b.n	8005538 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	f003 020f 	and.w	r2, r3, #15
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d104      	bne.n	80054b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb83 	bl	8005bb8 <USBD_CtlError>
                  break;
 80054b2:	e041      	b.n	8005538 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	da0b      	bge.n	80054d4 <USBD_StdEPReq+0x23e>
 80054bc:	7bbb      	ldrb	r3, [r7, #14]
 80054be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	3310      	adds	r3, #16
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4413      	add	r3, r2
 80054d0:	3304      	adds	r3, #4
 80054d2:	e00b      	b.n	80054ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80054d4:	7bbb      	ldrb	r3, [r7, #14]
 80054d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	4413      	add	r3, r2
 80054ea:	3304      	adds	r3, #4
 80054ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80054ee:	7bbb      	ldrb	r3, [r7, #14]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <USBD_StdEPReq+0x264>
 80054f4:	7bbb      	ldrb	r3, [r7, #14]
 80054f6:	2b80      	cmp	r3, #128	; 0x80
 80054f8:	d103      	bne.n	8005502 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	e00e      	b.n	8005520 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005502:	7bbb      	ldrb	r3, [r7, #14]
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 f8e8 	bl	80066dc <USBD_LL_IsStallEP>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	e002      	b.n	8005520 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2202      	movs	r2, #2
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fbb7 	bl	8005c9a <USBD_CtlSendData>
              break;
 800552c:	e004      	b.n	8005538 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fb41 	bl	8005bb8 <USBD_CtlError>
              break;
 8005536:	bf00      	nop
          }
          break;
 8005538:	e004      	b.n	8005544 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fb3b 	bl	8005bb8 <USBD_CtlError>
          break;
 8005542:	bf00      	nop
      }
      break;
 8005544:	e004      	b.n	8005550 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fb35 	bl	8005bb8 <USBD_CtlError>
      break;
 800554e:	bf00      	nop
  }

  return ret;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	885b      	ldrh	r3, [r3, #2]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	2b06      	cmp	r3, #6
 800557e:	f200 8128 	bhi.w	80057d2 <USBD_GetDescriptor+0x276>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <USBD_GetDescriptor+0x2c>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055a5 	.word	0x080055a5
 800558c:	080055bd 	.word	0x080055bd
 8005590:	080055fd 	.word	0x080055fd
 8005594:	080057d3 	.word	0x080057d3
 8005598:	080057d3 	.word	0x080057d3
 800559c:	08005773 	.word	0x08005773
 80055a0:	0800579f 	.word	0x0800579f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	7c12      	ldrb	r2, [r2, #16]
 80055b0:	f107 0108 	add.w	r1, r7, #8
 80055b4:	4610      	mov	r0, r2
 80055b6:	4798      	blx	r3
 80055b8:	60f8      	str	r0, [r7, #12]
      break;
 80055ba:	e112      	b.n	80057e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	7c1b      	ldrb	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10d      	bne.n	80055e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	f107 0208 	add.w	r2, r7, #8
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
 80055d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	2202      	movs	r2, #2
 80055dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80055de:	e100      	b.n	80057e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f107 0208 	add.w	r2, r7, #8
 80055ec:	4610      	mov	r0, r2
 80055ee:	4798      	blx	r3
 80055f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	2202      	movs	r2, #2
 80055f8:	701a      	strb	r2, [r3, #0]
      break;
 80055fa:	e0f2      	b.n	80057e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	885b      	ldrh	r3, [r3, #2]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b05      	cmp	r3, #5
 8005604:	f200 80ac 	bhi.w	8005760 <USBD_GetDescriptor+0x204>
 8005608:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <USBD_GetDescriptor+0xb4>)
 800560a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560e:	bf00      	nop
 8005610:	08005629 	.word	0x08005629
 8005614:	0800565d 	.word	0x0800565d
 8005618:	08005691 	.word	0x08005691
 800561c:	080056c5 	.word	0x080056c5
 8005620:	080056f9 	.word	0x080056f9
 8005624:	0800572d 	.word	0x0800572d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	7c12      	ldrb	r2, [r2, #16]
 8005640:	f107 0108 	add.w	r1, r7, #8
 8005644:	4610      	mov	r0, r2
 8005646:	4798      	blx	r3
 8005648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800564a:	e091      	b.n	8005770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fab2 	bl	8005bb8 <USBD_CtlError>
            err++;
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	3301      	adds	r3, #1
 8005658:	72fb      	strb	r3, [r7, #11]
          break;
 800565a:	e089      	b.n	8005770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	7c12      	ldrb	r2, [r2, #16]
 8005674:	f107 0108 	add.w	r1, r7, #8
 8005678:	4610      	mov	r0, r2
 800567a:	4798      	blx	r3
 800567c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800567e:	e077      	b.n	8005770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fa98 	bl	8005bb8 <USBD_CtlError>
            err++;
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	3301      	adds	r3, #1
 800568c:	72fb      	strb	r3, [r7, #11]
          break;
 800568e:	e06f      	b.n	8005770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	7c12      	ldrb	r2, [r2, #16]
 80056a8:	f107 0108 	add.w	r1, r7, #8
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
 80056b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056b2:	e05d      	b.n	8005770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa7e 	bl	8005bb8 <USBD_CtlError>
            err++;
 80056bc:	7afb      	ldrb	r3, [r7, #11]
 80056be:	3301      	adds	r3, #1
 80056c0:	72fb      	strb	r3, [r7, #11]
          break;
 80056c2:	e055      	b.n	8005770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	7c12      	ldrb	r2, [r2, #16]
 80056dc:	f107 0108 	add.w	r1, r7, #8
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
 80056e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056e6:	e043      	b.n	8005770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa64 	bl	8005bb8 <USBD_CtlError>
            err++;
 80056f0:	7afb      	ldrb	r3, [r7, #11]
 80056f2:	3301      	adds	r3, #1
 80056f4:	72fb      	strb	r3, [r7, #11]
          break;
 80056f6:	e03b      	b.n	8005770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	7c12      	ldrb	r2, [r2, #16]
 8005710:	f107 0108 	add.w	r1, r7, #8
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
 8005718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800571a:	e029      	b.n	8005770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa4a 	bl	8005bb8 <USBD_CtlError>
            err++;
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	3301      	adds	r3, #1
 8005728:	72fb      	strb	r3, [r7, #11]
          break;
 800572a:	e021      	b.n	8005770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00b      	beq.n	8005750 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	7c12      	ldrb	r2, [r2, #16]
 8005744:	f107 0108 	add.w	r1, r7, #8
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
 800574c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800574e:	e00f      	b.n	8005770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa30 	bl	8005bb8 <USBD_CtlError>
            err++;
 8005758:	7afb      	ldrb	r3, [r7, #11]
 800575a:	3301      	adds	r3, #1
 800575c:	72fb      	strb	r3, [r7, #11]
          break;
 800575e:	e007      	b.n	8005770 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa28 	bl	8005bb8 <USBD_CtlError>
          err++;
 8005768:	7afb      	ldrb	r3, [r7, #11]
 800576a:	3301      	adds	r3, #1
 800576c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800576e:	bf00      	nop
      }
      break;
 8005770:	e037      	b.n	80057e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	7c1b      	ldrb	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005782:	f107 0208 	add.w	r2, r7, #8
 8005786:	4610      	mov	r0, r2
 8005788:	4798      	blx	r3
 800578a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800578c:	e029      	b.n	80057e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fa11 	bl	8005bb8 <USBD_CtlError>
        err++;
 8005796:	7afb      	ldrb	r3, [r7, #11]
 8005798:	3301      	adds	r3, #1
 800579a:	72fb      	strb	r3, [r7, #11]
      break;
 800579c:	e021      	b.n	80057e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	7c1b      	ldrb	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10d      	bne.n	80057c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	f107 0208 	add.w	r2, r7, #8
 80057b2:	4610      	mov	r0, r2
 80057b4:	4798      	blx	r3
 80057b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	2207      	movs	r2, #7
 80057be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80057c0:	e00f      	b.n	80057e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f9f7 	bl	8005bb8 <USBD_CtlError>
        err++;
 80057ca:	7afb      	ldrb	r3, [r7, #11]
 80057cc:	3301      	adds	r3, #1
 80057ce:	72fb      	strb	r3, [r7, #11]
      break;
 80057d0:	e007      	b.n	80057e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f9ef 	bl	8005bb8 <USBD_CtlError>
      err++;
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	3301      	adds	r3, #1
 80057de:	72fb      	strb	r3, [r7, #11]
      break;
 80057e0:	bf00      	nop
  }

  if (err != 0U)
 80057e2:	7afb      	ldrb	r3, [r7, #11]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d11e      	bne.n	8005826 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	88db      	ldrh	r3, [r3, #6]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d016      	beq.n	800581e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80057f0:	893b      	ldrh	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	88da      	ldrh	r2, [r3, #6]
 80057fa:	893b      	ldrh	r3, [r7, #8]
 80057fc:	4293      	cmp	r3, r2
 80057fe:	bf28      	it	cs
 8005800:	4613      	movcs	r3, r2
 8005802:	b29b      	uxth	r3, r3
 8005804:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005806:	893b      	ldrh	r3, [r7, #8]
 8005808:	461a      	mov	r2, r3
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fa44 	bl	8005c9a <USBD_CtlSendData>
 8005812:	e009      	b.n	8005828 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f9ce 	bl	8005bb8 <USBD_CtlError>
 800581c:	e004      	b.n	8005828 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fa95 	bl	8005d4e <USBD_CtlSendStatus>
 8005824:	e000      	b.n	8005828 <USBD_GetDescriptor+0x2cc>
    return;
 8005826:	bf00      	nop
  }
}
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop

08005830 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	889b      	ldrh	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d131      	bne.n	80058a6 <USBD_SetAddress+0x76>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	88db      	ldrh	r3, [r3, #6]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d12d      	bne.n	80058a6 <USBD_SetAddress+0x76>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	885b      	ldrh	r3, [r3, #2]
 800584e:	2b7f      	cmp	r3, #127	; 0x7f
 8005850:	d829      	bhi.n	80058a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	885b      	ldrh	r3, [r3, #2]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b03      	cmp	r3, #3
 8005868:	d104      	bne.n	8005874 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f9a3 	bl	8005bb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005872:	e01d      	b.n	80058b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	7bfa      	ldrb	r2, [r7, #15]
 8005878:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 ff57 	bl	8006734 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa61 	bl	8005d4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800589a:	e009      	b.n	80058b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a4:	e004      	b.n	80058b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f985 	bl	8005bb8 <USBD_CtlError>
  }
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	885b      	ldrh	r3, [r3, #2]
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	4b4c      	ldr	r3, [pc, #304]	; (8005a00 <USBD_SetConfig+0x148>)
 80058ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058d0:	4b4b      	ldr	r3, [pc, #300]	; (8005a00 <USBD_SetConfig+0x148>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d905      	bls.n	80058e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f96c 	bl	8005bb8 <USBD_CtlError>
    return USBD_FAIL;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e088      	b.n	80059f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d002      	beq.n	80058f6 <USBD_SetConfig+0x3e>
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d025      	beq.n	8005940 <USBD_SetConfig+0x88>
 80058f4:	e071      	b.n	80059da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80058f6:	4b42      	ldr	r3, [pc, #264]	; (8005a00 <USBD_SetConfig+0x148>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01c      	beq.n	8005938 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80058fe:	4b40      	ldr	r3, [pc, #256]	; (8005a00 <USBD_SetConfig+0x148>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005908:	4b3d      	ldr	r3, [pc, #244]	; (8005a00 <USBD_SetConfig+0x148>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff f948 	bl	8004ba4 <USBD_SetClassConfig>
 8005914:	4603      	mov	r3, r0
 8005916:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d004      	beq.n	8005928 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f949 	bl	8005bb8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005926:	e065      	b.n	80059f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fa10 	bl	8005d4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2203      	movs	r2, #3
 8005932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005936:	e05d      	b.n	80059f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fa08 	bl	8005d4e <USBD_CtlSendStatus>
      break;
 800593e:	e059      	b.n	80059f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005940:	4b2f      	ldr	r3, [pc, #188]	; (8005a00 <USBD_SetConfig+0x148>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d112      	bne.n	800596e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005950:	4b2b      	ldr	r3, [pc, #172]	; (8005a00 <USBD_SetConfig+0x148>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800595a:	4b29      	ldr	r3, [pc, #164]	; (8005a00 <USBD_SetConfig+0x148>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff f93b 	bl	8004bdc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f9f1 	bl	8005d4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800596c:	e042      	b.n	80059f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <USBD_SetConfig+0x148>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	429a      	cmp	r2, r3
 800597a:	d02a      	beq.n	80059d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff f929 	bl	8004bdc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800598a:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <USBD_SetConfig+0x148>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005994:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <USBD_SetConfig+0x148>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff f902 	bl	8004ba4 <USBD_SetClassConfig>
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00f      	beq.n	80059ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f903 	bl	8005bb8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff f90e 	bl	8004bdc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80059c8:	e014      	b.n	80059f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f9bf 	bl	8005d4e <USBD_CtlSendStatus>
      break;
 80059d0:	e010      	b.n	80059f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f9bb 	bl	8005d4e <USBD_CtlSendStatus>
      break;
 80059d8:	e00c      	b.n	80059f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f8eb 	bl	8005bb8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <USBD_SetConfig+0x148>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff f8f7 	bl	8004bdc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80059ee:	2303      	movs	r3, #3
 80059f0:	73fb      	strb	r3, [r7, #15]
      break;
 80059f2:	bf00      	nop
  }

  return ret;
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	200001c4 	.word	0x200001c4

08005a04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	88db      	ldrh	r3, [r3, #6]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d004      	beq.n	8005a20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f8cd 	bl	8005bb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005a1e:	e023      	b.n	8005a68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	dc02      	bgt.n	8005a32 <USBD_GetConfig+0x2e>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	dc03      	bgt.n	8005a38 <USBD_GetConfig+0x34>
 8005a30:	e015      	b.n	8005a5e <USBD_GetConfig+0x5a>
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d00b      	beq.n	8005a4e <USBD_GetConfig+0x4a>
 8005a36:	e012      	b.n	8005a5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3308      	adds	r3, #8
 8005a42:	2201      	movs	r2, #1
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f927 	bl	8005c9a <USBD_CtlSendData>
        break;
 8005a4c:	e00c      	b.n	8005a68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3304      	adds	r3, #4
 8005a52:	2201      	movs	r2, #1
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f91f 	bl	8005c9a <USBD_CtlSendData>
        break;
 8005a5c:	e004      	b.n	8005a68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f8a9 	bl	8005bb8 <USBD_CtlError>
        break;
 8005a66:	bf00      	nop
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d81e      	bhi.n	8005ac6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	88db      	ldrh	r3, [r3, #6]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d004      	beq.n	8005a9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f890 	bl	8005bb8 <USBD_CtlError>
        break;
 8005a98:	e01a      	b.n	8005ad0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f043 0202 	orr.w	r2, r3, #2
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	2202      	movs	r2, #2
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8eb 	bl	8005c9a <USBD_CtlSendData>
      break;
 8005ac4:	e004      	b.n	8005ad0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f875 	bl	8005bb8 <USBD_CtlError>
      break;
 8005ace:	bf00      	nop
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	885b      	ldrh	r3, [r3, #2]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d106      	bne.n	8005af8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f92b 	bl	8005d4e <USBD_CtlSendStatus>
  }
}
 8005af8:	bf00      	nop
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d80b      	bhi.n	8005b30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	885b      	ldrh	r3, [r3, #2]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d10c      	bne.n	8005b3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f910 	bl	8005d4e <USBD_CtlSendStatus>
      }
      break;
 8005b2e:	e004      	b.n	8005b3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f840 	bl	8005bb8 <USBD_CtlError>
      break;
 8005b38:	e000      	b.n	8005b3c <USBD_ClrFeature+0x3c>
      break;
 8005b3a:	bf00      	nop
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f7ff fabb 	bl	80050ea <SWAPBYTE>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff faae 	bl	80050ea <SWAPBYTE>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff faa1 	bl	80050ea <SWAPBYTE>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	461a      	mov	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	80da      	strh	r2, [r3, #6]
}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bc2:	2180      	movs	r1, #128	; 0x80
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fd4b 	bl	8006660 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005bca:	2100      	movs	r1, #0
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fd47 	bl	8006660 <USBD_LL_StallEP>
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d036      	beq.n	8005c5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005bf4:	6938      	ldr	r0, [r7, #16]
 8005bf6:	f000 f836 	bl	8005c66 <USBD_GetLen>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	7812      	ldrb	r2, [r2, #0]
 8005c12:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	3301      	adds	r3, #1
 8005c18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	4413      	add	r3, r2
 8005c20:	2203      	movs	r2, #3
 8005c22:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	3301      	adds	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005c2a:	e013      	b.n	8005c54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4413      	add	r3, r2
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	7812      	ldrb	r2, [r2, #0]
 8005c36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	613b      	str	r3, [r7, #16]
    idx++;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	3301      	adds	r3, #1
 8005c42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	4413      	add	r3, r2
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	3301      	adds	r3, #1
 8005c52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e7      	bne.n	8005c2c <USBD_GetString+0x52>
 8005c5c:	e000      	b.n	8005c60 <USBD_GetString+0x86>
    return;
 8005c5e:	bf00      	nop
  }
}
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005c76:	e005      	b.n	8005c84 <USBD_GetLen+0x1e>
  {
    len++;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1f5      	bne.n	8005c78 <USBD_GetLen+0x12>
  }

  return len;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fd56 	bl	8006772 <USBD_LL_Transmit>

  return USBD_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fd45 	bl	8006772 <USBD_LL_Transmit>

  return USBD_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2203      	movs	r2, #3
 8005d02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fd49 	bl	80067b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fd38 	bl	80067b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2204      	movs	r2, #4
 8005d5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2200      	movs	r2, #0
 8005d62:	2100      	movs	r1, #0
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fd04 	bl	8006772 <USBD_LL_Transmit>

  return USBD_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2205      	movs	r2, #5
 8005d80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d84:	2300      	movs	r3, #0
 8005d86:	2200      	movs	r2, #0
 8005d88:	2100      	movs	r1, #0
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fd12 	bl	80067b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005da0:	2200      	movs	r2, #0
 8005da2:	4912      	ldr	r1, [pc, #72]	; (8005dec <MX_USB_DEVICE_Init+0x50>)
 8005da4:	4812      	ldr	r0, [pc, #72]	; (8005df0 <MX_USB_DEVICE_Init+0x54>)
 8005da6:	f7fe fe8f 	bl	8004ac8 <USBD_Init>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005db0:	f7fa fc5e 	bl	8000670 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005db4:	490f      	ldr	r1, [pc, #60]	; (8005df4 <MX_USB_DEVICE_Init+0x58>)
 8005db6:	480e      	ldr	r0, [pc, #56]	; (8005df0 <MX_USB_DEVICE_Init+0x54>)
 8005db8:	f7fe feb6 	bl	8004b28 <USBD_RegisterClass>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005dc2:	f7fa fc55 	bl	8000670 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005dc6:	490c      	ldr	r1, [pc, #48]	; (8005df8 <MX_USB_DEVICE_Init+0x5c>)
 8005dc8:	4809      	ldr	r0, [pc, #36]	; (8005df0 <MX_USB_DEVICE_Init+0x54>)
 8005dca:	f7fe fe07 	bl	80049dc <USBD_CDC_RegisterInterface>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005dd4:	f7fa fc4c 	bl	8000670 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005dd8:	4805      	ldr	r0, [pc, #20]	; (8005df0 <MX_USB_DEVICE_Init+0x54>)
 8005dda:	f7fe fecc 	bl	8004b76 <USBD_Start>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005de4:	f7fa fc44 	bl	8000670 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005de8:	bf00      	nop
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000134 	.word	0x20000134
 8005df0:	200001c8 	.word	0x200001c8
 8005df4:	20000018 	.word	0x20000018
 8005df8:	20000120 	.word	0x20000120

08005dfc <cdcDataIn>:
	}
	return ret;
}

void cdcDataIn(uint8_t rx_data)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 8005e06:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <cdcDataIn+0x48>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	4a0e      	ldr	r2, [pc, #56]	; (8005e48 <cdcDataIn+0x4c>)
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e14:	fb01 f202 	mul.w	r2, r1, r2
 8005e18:	1a9b      	subs	r3, r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <cdcDataIn+0x48>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	490a      	ldr	r1, [pc, #40]	; (8005e4c <cdcDataIn+0x50>)
 8005e22:	79fa      	ldrb	r2, [r7, #7]
 8005e24:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 8005e26:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <cdcDataIn+0x54>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d002      	beq.n	8005e36 <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 8005e30:	4a04      	ldr	r2, [pc, #16]	; (8005e44 <cdcDataIn+0x48>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6013      	str	r3, [r2, #0]
	}
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	200004a0 	.word	0x200004a0
 8005e48:	2000011c 	.word	0x2000011c
 8005e4c:	200004a8 	.word	0x200004a8
 8005e50:	200004a4 	.word	0x200004a4

08005e54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4905      	ldr	r1, [pc, #20]	; (8005e70 <CDC_Init_FS+0x1c>)
 8005e5c:	4805      	ldr	r0, [pc, #20]	; (8005e74 <CDC_Init_FS+0x20>)
 8005e5e:	f7fe fdd2 	bl	8004a06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005e62:	4905      	ldr	r1, [pc, #20]	; (8005e78 <CDC_Init_FS+0x24>)
 8005e64:	4803      	ldr	r0, [pc, #12]	; (8005e74 <CDC_Init_FS+0x20>)
 8005e66:	f7fe fdec 	bl	8004a42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005e6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20000aa8 	.word	0x20000aa8
 8005e74:	200001c8 	.word	0x200001c8
 8005e78:	200006a8 	.word	0x200006a8

08005e7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005e80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	6039      	str	r1, [r7, #0]
 8005e96:	71fb      	strb	r3, [r7, #7]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	2b23      	cmp	r3, #35	; 0x23
 8005ea0:	f200 80a3 	bhi.w	8005fea <CDC_Control_FS+0x15e>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <CDC_Control_FS+0x20>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005feb 	.word	0x08005feb
 8005eb0:	08005feb 	.word	0x08005feb
 8005eb4:	08005feb 	.word	0x08005feb
 8005eb8:	08005feb 	.word	0x08005feb
 8005ebc:	08005feb 	.word	0x08005feb
 8005ec0:	08005feb 	.word	0x08005feb
 8005ec4:	08005feb 	.word	0x08005feb
 8005ec8:	08005feb 	.word	0x08005feb
 8005ecc:	08005feb 	.word	0x08005feb
 8005ed0:	08005feb 	.word	0x08005feb
 8005ed4:	08005feb 	.word	0x08005feb
 8005ed8:	08005feb 	.word	0x08005feb
 8005edc:	08005feb 	.word	0x08005feb
 8005ee0:	08005feb 	.word	0x08005feb
 8005ee4:	08005feb 	.word	0x08005feb
 8005ee8:	08005feb 	.word	0x08005feb
 8005eec:	08005feb 	.word	0x08005feb
 8005ef0:	08005feb 	.word	0x08005feb
 8005ef4:	08005feb 	.word	0x08005feb
 8005ef8:	08005feb 	.word	0x08005feb
 8005efc:	08005feb 	.word	0x08005feb
 8005f00:	08005feb 	.word	0x08005feb
 8005f04:	08005feb 	.word	0x08005feb
 8005f08:	08005feb 	.word	0x08005feb
 8005f0c:	08005feb 	.word	0x08005feb
 8005f10:	08005feb 	.word	0x08005feb
 8005f14:	08005feb 	.word	0x08005feb
 8005f18:	08005feb 	.word	0x08005feb
 8005f1c:	08005feb 	.word	0x08005feb
 8005f20:	08005feb 	.word	0x08005feb
 8005f24:	08005feb 	.word	0x08005feb
 8005f28:	08005feb 	.word	0x08005feb
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f97 	.word	0x08005f97
 8005f34:	08005feb 	.word	0x08005feb
 8005f38:	08005feb 	.word	0x08005feb
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU�? ?��?��?���? set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	461a      	mov	r2, r3
 8005f42:	4b2e      	ldr	r3, [pc, #184]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f44:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 8005f46:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	4313      	orrs	r3, r2
 8005f54:	4a29      	ldr	r2, [pc, #164]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f56:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 8005f58:	4b28      	ldr	r3, [pc, #160]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	3302      	adds	r3, #2
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	041b      	lsls	r3, r3, #16
 8005f64:	4313      	orrs	r3, r2
 8005f66:	4a25      	ldr	r2, [pc, #148]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f68:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 8005f6a:	4b24      	ldr	r3, [pc, #144]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	3303      	adds	r3, #3
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	061b      	lsls	r3, r3, #24
 8005f76:	4313      	orrs	r3, r2
 8005f78:	4a20      	ldr	r2, [pc, #128]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f7a:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	791a      	ldrb	r2, [r3, #4]
 8005f80:	4b1e      	ldr	r3, [pc, #120]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f82:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	795a      	ldrb	r2, [r3, #5]
 8005f88:	4b1c      	ldr	r3, [pc, #112]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f8a:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	799a      	ldrb	r2, [r3, #6]
 8005f90:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f92:	719a      	strb	r2, [r3, #6]
    break;
 8005f94:	e02a      	b.n	8005fec <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC�? ?��?��?���? ?��?���?
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8005f96:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <CDC_Control_FS+0x170>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8005fa0:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <CDC_Control_FS+0x170>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	0a1a      	lsrs	r2, r3, #8
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8005fae:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <CDC_Control_FS+0x170>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	0c1a      	lsrs	r2, r3, #16
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <CDC_Control_FS+0x170>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	0e1a      	lsrs	r2, r3, #24
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	3303      	adds	r3, #3
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4a0b      	ldr	r2, [pc, #44]	; (8005ffc <CDC_Control_FS+0x170>)
 8005fd0:	7912      	ldrb	r2, [r2, #4]
 8005fd2:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	3305      	adds	r3, #5
 8005fd8:	4a08      	ldr	r2, [pc, #32]	; (8005ffc <CDC_Control_FS+0x170>)
 8005fda:	7952      	ldrb	r2, [r2, #5]
 8005fdc:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	3306      	adds	r3, #6
 8005fe2:	4a06      	ldr	r2, [pc, #24]	; (8005ffc <CDC_Control_FS+0x170>)
 8005fe4:	7992      	ldrb	r2, [r2, #6]
 8005fe6:	701a      	strb	r2, [r3, #0]
    break;
 8005fe8:	e000      	b.n	8005fec <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005fea:	bf00      	nop
  }

  return (USBD_OK);
 8005fec:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000498 	.word	0x20000498

08006000 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	480e      	ldr	r0, [pc, #56]	; (8006048 <CDC_Receive_FS+0x48>)
 800600e:	f7fe fd18 	bl	8004a42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006012:	480d      	ldr	r0, [pc, #52]	; (8006048 <CDC_Receive_FS+0x48>)
 8006014:	f7fe fd2e 	bl	8004a74 <USBD_CDC_ReceivePacket>

  for(int i = 0 ; i < *Len ; i++)
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e009      	b.n	8006032 <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);// ?��?��?��?�� 발생?�� data in
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fee8 	bl	8005dfc <cdcDataIn>
  for(int i = 0 ; i < *Len ; i++)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	429a      	cmp	r2, r3
 800603a:	d8f0      	bhi.n	800601e <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 800603c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	200001c8 	.word	0x200001c8

0800604c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	4613      	mov	r3, r2
 8006058:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800605e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006062:	4618      	mov	r0, r3
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	6039      	str	r1, [r7, #0]
 800607a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2212      	movs	r2, #18
 8006080:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006082:	4b03      	ldr	r3, [pc, #12]	; (8006090 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	20000150 	.word	0x20000150

08006094 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	6039      	str	r1, [r7, #0]
 800609e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2204      	movs	r2, #4
 80060a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80060a6:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20000164 	.word	0x20000164

080060b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	6039      	str	r1, [r7, #0]
 80060c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d105      	bne.n	80060d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	4907      	ldr	r1, [pc, #28]	; (80060ec <USBD_FS_ProductStrDescriptor+0x34>)
 80060ce:	4808      	ldr	r0, [pc, #32]	; (80060f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80060d0:	f7ff fd83 	bl	8005bda <USBD_GetString>
 80060d4:	e004      	b.n	80060e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	4904      	ldr	r1, [pc, #16]	; (80060ec <USBD_FS_ProductStrDescriptor+0x34>)
 80060da:	4805      	ldr	r0, [pc, #20]	; (80060f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80060dc:	f7ff fd7d 	bl	8005bda <USBD_GetString>
  }
  return USBD_StrDesc;
 80060e0:	4b02      	ldr	r3, [pc, #8]	; (80060ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000ea8 	.word	0x20000ea8
 80060f0:	08006914 	.word	0x08006914

080060f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	4904      	ldr	r1, [pc, #16]	; (8006114 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006104:	4804      	ldr	r0, [pc, #16]	; (8006118 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006106:	f7ff fd68 	bl	8005bda <USBD_GetString>
  return USBD_StrDesc;
 800610a:	4b02      	ldr	r3, [pc, #8]	; (8006114 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20000ea8 	.word	0x20000ea8
 8006118:	0800692c 	.word	0x0800692c

0800611c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	6039      	str	r1, [r7, #0]
 8006126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	221a      	movs	r2, #26
 800612c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800612e:	f000 f843 	bl	80061b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006132:	4b02      	ldr	r3, [pc, #8]	; (800613c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000168 	.word	0x20000168

08006140 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	4603      	mov	r3, r0
 8006148:	6039      	str	r1, [r7, #0]
 800614a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d105      	bne.n	800615e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	4907      	ldr	r1, [pc, #28]	; (8006174 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006156:	4808      	ldr	r0, [pc, #32]	; (8006178 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006158:	f7ff fd3f 	bl	8005bda <USBD_GetString>
 800615c:	e004      	b.n	8006168 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	4904      	ldr	r1, [pc, #16]	; (8006174 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006162:	4805      	ldr	r0, [pc, #20]	; (8006178 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006164:	f7ff fd39 	bl	8005bda <USBD_GetString>
  }
  return USBD_StrDesc;
 8006168:	4b02      	ldr	r3, [pc, #8]	; (8006174 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000ea8 	.word	0x20000ea8
 8006178:	08006940 	.word	0x08006940

0800617c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	6039      	str	r1, [r7, #0]
 8006186:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d105      	bne.n	800619a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	4907      	ldr	r1, [pc, #28]	; (80061b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006192:	4808      	ldr	r0, [pc, #32]	; (80061b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006194:	f7ff fd21 	bl	8005bda <USBD_GetString>
 8006198:	e004      	b.n	80061a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	4904      	ldr	r1, [pc, #16]	; (80061b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800619e:	4805      	ldr	r0, [pc, #20]	; (80061b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80061a0:	f7ff fd1b 	bl	8005bda <USBD_GetString>
  }
  return USBD_StrDesc;
 80061a4:	4b02      	ldr	r3, [pc, #8]	; (80061b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000ea8 	.word	0x20000ea8
 80061b4:	0800694c 	.word	0x0800694c

080061b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80061be:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <Get_SerialNum+0x44>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <Get_SerialNum+0x48>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80061ca:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <Get_SerialNum+0x4c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4413      	add	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d009      	beq.n	80061f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80061de:	2208      	movs	r2, #8
 80061e0:	4909      	ldr	r1, [pc, #36]	; (8006208 <Get_SerialNum+0x50>)
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f814 	bl	8006210 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80061e8:	2204      	movs	r2, #4
 80061ea:	4908      	ldr	r1, [pc, #32]	; (800620c <Get_SerialNum+0x54>)
 80061ec:	68b8      	ldr	r0, [r7, #8]
 80061ee:	f000 f80f 	bl	8006210 <IntToUnicode>
  }
}
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	1fff7a10 	.word	0x1fff7a10
 8006200:	1fff7a14 	.word	0x1fff7a14
 8006204:	1fff7a18 	.word	0x1fff7a18
 8006208:	2000016a 	.word	0x2000016a
 800620c:	2000017a 	.word	0x2000017a

08006210 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006222:	2300      	movs	r3, #0
 8006224:	75fb      	strb	r3, [r7, #23]
 8006226:	e027      	b.n	8006278 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	0f1b      	lsrs	r3, r3, #28
 800622c:	2b09      	cmp	r3, #9
 800622e:	d80b      	bhi.n	8006248 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	0f1b      	lsrs	r3, r3, #28
 8006234:	b2da      	uxtb	r2, r3
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	4619      	mov	r1, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	440b      	add	r3, r1
 8006240:	3230      	adds	r2, #48	; 0x30
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e00a      	b.n	800625e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	0f1b      	lsrs	r3, r3, #28
 800624c:	b2da      	uxtb	r2, r3
 800624e:	7dfb      	ldrb	r3, [r7, #23]
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	4619      	mov	r1, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	440b      	add	r3, r1
 8006258:	3237      	adds	r2, #55	; 0x37
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	3301      	adds	r3, #1
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4413      	add	r3, r2
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	3301      	adds	r3, #1
 8006276:	75fb      	strb	r3, [r7, #23]
 8006278:	7dfa      	ldrb	r2, [r7, #23]
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	429a      	cmp	r2, r3
 800627e:	d3d3      	bcc.n	8006228 <IntToUnicode+0x18>
  }
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006298:	f107 0314 	add.w	r3, r7, #20
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	605a      	str	r2, [r3, #4]
 80062a2:	609a      	str	r2, [r3, #8]
 80062a4:	60da      	str	r2, [r3, #12]
 80062a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062b0:	d13a      	bne.n	8006328 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062b2:	2300      	movs	r3, #0
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	4b1e      	ldr	r3, [pc, #120]	; (8006330 <HAL_PCD_MspInit+0xa0>)
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	4a1d      	ldr	r2, [pc, #116]	; (8006330 <HAL_PCD_MspInit+0xa0>)
 80062bc:	f043 0301 	orr.w	r3, r3, #1
 80062c0:	6313      	str	r3, [r2, #48]	; 0x30
 80062c2:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <HAL_PCD_MspInit+0xa0>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80062ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80062d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d4:	2302      	movs	r3, #2
 80062d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d8:	2300      	movs	r3, #0
 80062da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062dc:	2303      	movs	r3, #3
 80062de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80062e0:	230a      	movs	r3, #10
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062e4:	f107 0314 	add.w	r3, r7, #20
 80062e8:	4619      	mov	r1, r3
 80062ea:	4812      	ldr	r0, [pc, #72]	; (8006334 <HAL_PCD_MspInit+0xa4>)
 80062ec:	f7fa fc58 	bl	8000ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062f0:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <HAL_PCD_MspInit+0xa0>)
 80062f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f4:	4a0e      	ldr	r2, [pc, #56]	; (8006330 <HAL_PCD_MspInit+0xa0>)
 80062f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fa:	6353      	str	r3, [r2, #52]	; 0x34
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <HAL_PCD_MspInit+0xa0>)
 8006302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006304:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <HAL_PCD_MspInit+0xa0>)
 8006306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800630a:	6453      	str	r3, [r2, #68]	; 0x44
 800630c:	4b08      	ldr	r3, [pc, #32]	; (8006330 <HAL_PCD_MspInit+0xa0>)
 800630e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006318:	2200      	movs	r2, #0
 800631a:	2100      	movs	r1, #0
 800631c:	2043      	movs	r0, #67	; 0x43
 800631e:	f7fa fc08 	bl	8000b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006322:	2043      	movs	r0, #67	; 0x43
 8006324:	f7fa fc21 	bl	8000b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006328:	bf00      	nop
 800632a:	3728      	adds	r7, #40	; 0x28
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40023800 	.word	0x40023800
 8006334:	40020000 	.word	0x40020000

08006338 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f7fe fc5c 	bl	8004c0c <USBD_LL_SetupStage>
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	4619      	mov	r1, r3
 8006386:	f7fe fc96 	bl	8004cb6 <USBD_LL_DataOutStage>
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	3348      	adds	r3, #72	; 0x48
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	4619      	mov	r1, r3
 80063ba:	f7fe fcdf 	bl	8004d7c <USBD_LL_DataInStage>
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe fdf3 	bl	8004fc0 <USBD_LL_SOF>
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d001      	beq.n	80063fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80063f6:	f7fa f93b 	bl	8000670 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006400:	7bfa      	ldrb	r2, [r7, #15]
 8006402:	4611      	mov	r1, r2
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe fd9d 	bl	8004f44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fd49 	bl	8004ea8 <USBD_LL_Reset>
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fd98 	bl	8004f64 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006454:	4b04      	ldr	r3, [pc, #16]	; (8006468 <HAL_PCD_SuspendCallback+0x48>)
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	4a03      	ldr	r2, [pc, #12]	; (8006468 <HAL_PCD_SuspendCallback+0x48>)
 800645a:	f043 0306 	orr.w	r3, r3, #6
 800645e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	e000ed00 	.word	0xe000ed00

0800646c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fd88 	bl	8004f90 <USBD_LL_Resume>
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	4611      	mov	r1, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fdd6 	bl	8005050 <USBD_LL_IsoOUTIncomplete>
}
 80064a4:	bf00      	nop
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064be:	78fa      	ldrb	r2, [r7, #3]
 80064c0:	4611      	mov	r1, r2
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fe fd9e 	bl	8005004 <USBD_LL_IsoINIncomplete>
}
 80064c8:	bf00      	nop
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fddc 	bl	800509c <USBD_LL_DevConnected>
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fdd9 	bl	80050b2 <USBD_LL_DevDisconnected>
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d13c      	bne.n	8006592 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006518:	4a20      	ldr	r2, [pc, #128]	; (800659c <USBD_LL_Init+0x94>)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a1e      	ldr	r2, [pc, #120]	; (800659c <USBD_LL_Init+0x94>)
 8006524:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006528:	4b1c      	ldr	r3, [pc, #112]	; (800659c <USBD_LL_Init+0x94>)
 800652a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800652e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006530:	4b1a      	ldr	r3, [pc, #104]	; (800659c <USBD_LL_Init+0x94>)
 8006532:	2204      	movs	r2, #4
 8006534:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006536:	4b19      	ldr	r3, [pc, #100]	; (800659c <USBD_LL_Init+0x94>)
 8006538:	2202      	movs	r2, #2
 800653a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800653c:	4b17      	ldr	r3, [pc, #92]	; (800659c <USBD_LL_Init+0x94>)
 800653e:	2200      	movs	r2, #0
 8006540:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006542:	4b16      	ldr	r3, [pc, #88]	; (800659c <USBD_LL_Init+0x94>)
 8006544:	2202      	movs	r2, #2
 8006546:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006548:	4b14      	ldr	r3, [pc, #80]	; (800659c <USBD_LL_Init+0x94>)
 800654a:	2200      	movs	r2, #0
 800654c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800654e:	4b13      	ldr	r3, [pc, #76]	; (800659c <USBD_LL_Init+0x94>)
 8006550:	2200      	movs	r2, #0
 8006552:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006554:	4b11      	ldr	r3, [pc, #68]	; (800659c <USBD_LL_Init+0x94>)
 8006556:	2200      	movs	r2, #0
 8006558:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800655a:	4b10      	ldr	r3, [pc, #64]	; (800659c <USBD_LL_Init+0x94>)
 800655c:	2200      	movs	r2, #0
 800655e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006560:	4b0e      	ldr	r3, [pc, #56]	; (800659c <USBD_LL_Init+0x94>)
 8006562:	2200      	movs	r2, #0
 8006564:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006566:	480d      	ldr	r0, [pc, #52]	; (800659c <USBD_LL_Init+0x94>)
 8006568:	f7fa fcb7 	bl	8000eda <HAL_PCD_Init>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006572:	f7fa f87d 	bl	8000670 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006576:	2180      	movs	r1, #128	; 0x80
 8006578:	4808      	ldr	r0, [pc, #32]	; (800659c <USBD_LL_Init+0x94>)
 800657a:	f7fb fe14 	bl	80021a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800657e:	2240      	movs	r2, #64	; 0x40
 8006580:	2100      	movs	r1, #0
 8006582:	4806      	ldr	r0, [pc, #24]	; (800659c <USBD_LL_Init+0x94>)
 8006584:	f7fb fdc8 	bl	8002118 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006588:	2280      	movs	r2, #128	; 0x80
 800658a:	2101      	movs	r1, #1
 800658c:	4803      	ldr	r0, [pc, #12]	; (800659c <USBD_LL_Init+0x94>)
 800658e:	f7fb fdc3 	bl	8002118 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	200010a8 	.word	0x200010a8

080065a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fa fdac 	bl	8001114 <HAL_PCD_Start>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f942 	bl	800684c <USBD_Get_USB_Status>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	4608      	mov	r0, r1
 80065e0:	4611      	mov	r1, r2
 80065e2:	461a      	mov	r2, r3
 80065e4:	4603      	mov	r3, r0
 80065e6:	70fb      	strb	r3, [r7, #3]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70bb      	strb	r3, [r7, #2]
 80065ec:	4613      	mov	r3, r2
 80065ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80065fe:	78bb      	ldrb	r3, [r7, #2]
 8006600:	883a      	ldrh	r2, [r7, #0]
 8006602:	78f9      	ldrb	r1, [r7, #3]
 8006604:	f7fb f990 	bl	8001928 <HAL_PCD_EP_Open>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f91c 	bl	800684c <USBD_Get_USB_Status>
 8006614:	4603      	mov	r3, r0
 8006616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006618:	7bbb      	ldrb	r3, [r7, #14]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800663c:	78fa      	ldrb	r2, [r7, #3]
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f7fb f9d9 	bl	80019f8 <HAL_PCD_EP_Close>
 8006646:	4603      	mov	r3, r0
 8006648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	4618      	mov	r0, r3
 800664e:	f000 f8fd 	bl	800684c <USBD_Get_USB_Status>
 8006652:	4603      	mov	r3, r0
 8006654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006656:	7bbb      	ldrb	r3, [r7, #14]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f7fb fab1 	bl	8001be6 <HAL_PCD_EP_SetStall>
 8006684:	4603      	mov	r3, r0
 8006686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 f8de 	bl	800684c <USBD_Get_USB_Status>
 8006690:	4603      	mov	r3, r0
 8006692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006694:	7bbb      	ldrb	r3, [r7, #14]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fb faf6 	bl	8001cae <HAL_PCD_EP_ClrStall>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 f8bf 	bl	800684c <USBD_Get_USB_Status>
 80066ce:	4603      	mov	r3, r0
 80066d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80066f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	da0b      	bge.n	8006710 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	333e      	adds	r3, #62	; 0x3e
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	e00b      	b.n	8006728 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	4613      	mov	r3, r2
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006726:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800674e:	78fa      	ldrb	r2, [r7, #3]
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f7fb f8c3 	bl	80018de <HAL_PCD_SetAddress>
 8006758:	4603      	mov	r3, r0
 800675a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	4618      	mov	r0, r3
 8006760:	f000 f874 	bl	800684c <USBD_Get_USB_Status>
 8006764:	4603      	mov	r3, r0
 8006766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006768:	7bbb      	ldrb	r3, [r7, #14]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b086      	sub	sp, #24
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
 800677e:	460b      	mov	r3, r1
 8006780:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006790:	7af9      	ldrb	r1, [r7, #11]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	f7fb f9dc 	bl	8001b52 <HAL_PCD_EP_Transmit>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f853 	bl	800684c <USBD_Get_USB_Status>
 80067a6:	4603      	mov	r3, r0
 80067a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	460b      	mov	r3, r1
 80067c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067d2:	7af9      	ldrb	r1, [r7, #11]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	f7fb f958 	bl	8001a8c <HAL_PCD_EP_Receive>
 80067dc:	4603      	mov	r3, r0
 80067de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f832 	bl	800684c <USBD_Get_USB_Status>
 80067e8:	4603      	mov	r3, r0
 80067ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	4611      	mov	r1, r2
 800680c:	4618      	mov	r0, r3
 800680e:	f7fb f988 	bl	8001b22 <HAL_PCD_EP_GetRxCount>
 8006812:	4603      	mov	r3, r0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006824:	4b03      	ldr	r3, [pc, #12]	; (8006834 <USBD_static_malloc+0x18>)
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	200014b0 	.word	0x200014b0

08006838 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]

}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	2b03      	cmp	r3, #3
 800685e:	d817      	bhi.n	8006890 <USBD_Get_USB_Status+0x44>
 8006860:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <USBD_Get_USB_Status+0x1c>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	08006879 	.word	0x08006879
 800686c:	0800687f 	.word	0x0800687f
 8006870:	08006885 	.word	0x08006885
 8006874:	0800688b 	.word	0x0800688b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	73fb      	strb	r3, [r7, #15]
    break;
 800687c:	e00b      	b.n	8006896 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800687e:	2303      	movs	r3, #3
 8006880:	73fb      	strb	r3, [r7, #15]
    break;
 8006882:	e008      	b.n	8006896 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
    break;
 8006888:	e005      	b.n	8006896 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800688a:	2303      	movs	r3, #3
 800688c:	73fb      	strb	r3, [r7, #15]
    break;
 800688e:	e002      	b.n	8006896 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	73fb      	strb	r3, [r7, #15]
    break;
 8006894:	bf00      	nop
  }
  return usb_status;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <__libc_init_array>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4d0d      	ldr	r5, [pc, #52]	; (80068dc <__libc_init_array+0x38>)
 80068a8:	4c0d      	ldr	r4, [pc, #52]	; (80068e0 <__libc_init_array+0x3c>)
 80068aa:	1b64      	subs	r4, r4, r5
 80068ac:	10a4      	asrs	r4, r4, #2
 80068ae:	2600      	movs	r6, #0
 80068b0:	42a6      	cmp	r6, r4
 80068b2:	d109      	bne.n	80068c8 <__libc_init_array+0x24>
 80068b4:	4d0b      	ldr	r5, [pc, #44]	; (80068e4 <__libc_init_array+0x40>)
 80068b6:	4c0c      	ldr	r4, [pc, #48]	; (80068e8 <__libc_init_array+0x44>)
 80068b8:	f000 f820 	bl	80068fc <_init>
 80068bc:	1b64      	subs	r4, r4, r5
 80068be:	10a4      	asrs	r4, r4, #2
 80068c0:	2600      	movs	r6, #0
 80068c2:	42a6      	cmp	r6, r4
 80068c4:	d105      	bne.n	80068d2 <__libc_init_array+0x2e>
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068cc:	4798      	blx	r3
 80068ce:	3601      	adds	r6, #1
 80068d0:	e7ee      	b.n	80068b0 <__libc_init_array+0xc>
 80068d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d6:	4798      	blx	r3
 80068d8:	3601      	adds	r6, #1
 80068da:	e7f2      	b.n	80068c2 <__libc_init_array+0x1e>
 80068dc:	08006974 	.word	0x08006974
 80068e0:	08006974 	.word	0x08006974
 80068e4:	08006974 	.word	0x08006974
 80068e8:	08006978 	.word	0x08006978

080068ec <memset>:
 80068ec:	4402      	add	r2, r0
 80068ee:	4603      	mov	r3, r0
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d100      	bne.n	80068f6 <memset+0xa>
 80068f4:	4770      	bx	lr
 80068f6:	f803 1b01 	strb.w	r1, [r3], #1
 80068fa:	e7f9      	b.n	80068f0 <memset+0x4>

080068fc <_init>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr

08006908 <_fini>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr
