
cube_F411CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006328  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006518  08006518  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006520  08006520  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006524  08006524  00016524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08006528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  2000018c  080066b4  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016b0  080066b4  000216b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d874  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8b  00000000  00000000  0002da30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  000304c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  00031000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182ce  00000000  00000000  000319f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edba  00000000  00000000  00049cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c8b  00000000  00000000  00058a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df70b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c2c  00000000  00000000  000df75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000018c 	.word	0x2000018c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080064a8 	.word	0x080064a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000190 	.word	0x20000190
 80001d4:	080064a8 	.word	0x080064a8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MX_GPIO_Init+0x9c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a1f      	ldr	r2, [pc, #124]	; (8000578 <MX_GPIO_Init+0x9c>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a11      	ldr	r2, [pc, #68]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_GPIO_Init+0x9c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <MX_GPIO_Init+0xa0>)
 800054e:	f000 fc55 	bl	8000dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 8000552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4619      	mov	r1, r3
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_GPIO_Init+0xa0>)
 800056c:	f000 fac2 	bl	8000af4 <HAL_GPIO_Init>

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40023800 	.word	0x40023800
 800057c:	40020800 	.word	0x40020800

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 f90e 	bl	80007a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f806 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f7ff ffa6 	bl	80004dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000590:	f005 f9da 	bl	8005948 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	e7fe      	b.n	8000594 <main+0x14>
	...

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 ff76 	bl	8006498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b27      	ldr	r3, [pc, #156]	; (8000660 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a26      	ldr	r2, [pc, #152]	; (8000660 <SystemClock_Config+0xc8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b24      	ldr	r3, [pc, #144]	; (8000660 <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a20      	ldr	r2, [pc, #128]	; (8000664 <SystemClock_Config+0xcc>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000608:	2319      	movs	r3, #25
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800060c:	23c0      	movs	r3, #192	; 0xc0
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fd89 	bl	8002134 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 f81e 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2103      	movs	r1, #3
 8000648:	4618      	mov	r0, r3
 800064a:	f001 ffeb 	bl	8002624 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000654:	f000 f808 	bl	8000668 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	; 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <HAL_MspInit+0x4c>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <HAL_MspInit+0x4c>)
 8000684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <HAL_MspInit+0x4c>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_MspInit+0x4c>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_MspInit+0x4c>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	6413      	str	r3, [r2, #64]	; 0x40
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_MspInit+0x4c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <NMI_Handler+0x4>

080006ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <HardFault_Handler+0x4>

080006d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <MemManage_Handler+0x4>

080006d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <BusFault_Handler+0x4>

080006dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <UsageFault_Handler+0x4>

080006e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000710:	f000 f89a 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <OTG_FS_IRQHandler+0x10>)
 800071e:	f000 fcd6 	bl	80010ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20001088 	.word	0x20001088

0800072c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <SystemInit+0x20>)
 8000732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <SystemInit+0x20>)
 8000738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800073c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000788 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000756:	490e      	ldr	r1, [pc, #56]	; (8000790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800076c:	4c0b      	ldr	r4, [pc, #44]	; (800079c <LoopFillZerobss+0x26>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800077a:	f7ff ffd7 	bl	800072c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077e:	f005 fe67 	bl	8006450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000782:	f7ff fefd 	bl	8000580 <main>
  bx  lr    
 8000786:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000794:	08006528 	.word	0x08006528
  ldr r2, =_sbss
 8000798:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 800079c:	200016b0 	.word	0x200016b0

080007a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC_IRQHandler>
	...

080007a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <HAL_Init+0x40>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <HAL_Init+0x40>)
 80007ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <HAL_Init+0x40>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <HAL_Init+0x40>)
 80007ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_Init+0x40>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <HAL_Init+0x40>)
 80007c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 f94f 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d2:	200f      	movs	r0, #15
 80007d4:	f000 f808 	bl	80007e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d8:	f7ff ff4c 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023c00 	.word	0x40023c00

080007e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_InitTick+0x54>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_InitTick+0x58>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f967 	bl	8000ada <HAL_SYSTICK_Config>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e00e      	b.n	8000834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d80a      	bhi.n	8000832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f000 f92f 	bl	8000a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <HAL_InitTick+0x5c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e000      	b.n	8000834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000000 	.word	0x20000000
 8000840:	20000008 	.word	0x20000008
 8000844:	20000004 	.word	0x20000004

08000848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x20>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_IncTick+0x24>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_IncTick+0x24>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000008 	.word	0x20000008
 800086c:	200001a8 	.word	0x200001a8

08000870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <HAL_GetTick+0x14>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	200001a8 	.word	0x200001a8

08000888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000890:	f7ff ffee 	bl	8000870 <HAL_GetTick>
 8000894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a0:	d005      	beq.n	80008ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_Delay+0x44>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ae:	bf00      	nop
 80008b0:	f7ff ffde 	bl	8000870 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d8f7      	bhi.n	80008b0 <HAL_Delay+0x28>
  {
  }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000008 	.word	0x20000008

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff8e 	bl	8000970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff29 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff3e 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff8e 	bl	80009c4 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5d 	bl	8000970 <__NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff31 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffa2 	bl	8000a2c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e159      	b.n	8000dc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b10:	2201      	movs	r2, #1
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	f040 8148 	bne.w	8000dbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d005      	beq.n	8000b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d130      	bne.n	8000ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	f003 0201 	and.w	r2, r3, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d017      	beq.n	8000be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d123      	bne.n	8000c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	220f      	movs	r2, #15
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	691a      	ldr	r2, [r3, #16]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	08da      	lsrs	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3208      	adds	r2, #8
 8000c32:	69b9      	ldr	r1, [r7, #24]
 8000c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0203 	and.w	r2, r3, #3
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 80a2 	beq.w	8000dbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b57      	ldr	r3, [pc, #348]	; (8000ddc <HAL_GPIO_Init+0x2e8>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a56      	ldr	r2, [pc, #344]	; (8000ddc <HAL_GPIO_Init+0x2e8>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <HAL_GPIO_Init+0x2e8>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c96:	4a52      	ldr	r2, [pc, #328]	; (8000de0 <HAL_GPIO_Init+0x2ec>)
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a49      	ldr	r2, [pc, #292]	; (8000de4 <HAL_GPIO_Init+0x2f0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d019      	beq.n	8000cf6 <HAL_GPIO_Init+0x202>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a48      	ldr	r2, [pc, #288]	; (8000de8 <HAL_GPIO_Init+0x2f4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d013      	beq.n	8000cf2 <HAL_GPIO_Init+0x1fe>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a47      	ldr	r2, [pc, #284]	; (8000dec <HAL_GPIO_Init+0x2f8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d00d      	beq.n	8000cee <HAL_GPIO_Init+0x1fa>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a46      	ldr	r2, [pc, #280]	; (8000df0 <HAL_GPIO_Init+0x2fc>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d007      	beq.n	8000cea <HAL_GPIO_Init+0x1f6>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a45      	ldr	r2, [pc, #276]	; (8000df4 <HAL_GPIO_Init+0x300>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <HAL_GPIO_Init+0x1f2>
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	e008      	b.n	8000cf8 <HAL_GPIO_Init+0x204>
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x204>
 8000cea:	2303      	movs	r3, #3
 8000cec:	e004      	b.n	8000cf8 <HAL_GPIO_Init+0x204>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e002      	b.n	8000cf8 <HAL_GPIO_Init+0x204>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <HAL_GPIO_Init+0x204>
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	69fa      	ldr	r2, [r7, #28]
 8000cfa:	f002 0203 	and.w	r2, r2, #3
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	4093      	lsls	r3, r2
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d08:	4935      	ldr	r1, [pc, #212]	; (8000de0 <HAL_GPIO_Init+0x2ec>)
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <HAL_GPIO_Init+0x304>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d3a:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <HAL_GPIO_Init+0x304>)
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <HAL_GPIO_Init+0x304>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d64:	4a24      	ldr	r2, [pc, #144]	; (8000df8 <HAL_GPIO_Init+0x304>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <HAL_GPIO_Init+0x304>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <HAL_GPIO_Init+0x304>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_GPIO_Init+0x304>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000db8:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <HAL_GPIO_Init+0x304>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	f67f aea2 	bls.w	8000b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40013800 	.word	0x40013800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40013c00 	.word	0x40013c00

08000dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e18:	e003      	b.n	8000e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	041a      	lsls	r2, r3, #16
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	619a      	str	r2, [r3, #24]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e30:	b08f      	sub	sp, #60	; 0x3c
 8000e32:	af0a      	add	r7, sp, #40	; 0x28
 8000e34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e10f      	b.n	8001060 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d106      	bne.n	8000e60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f004 ffee 	bl	8005e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2203      	movs	r2, #3
 8000e64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fe9d 	bl	8002bbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	687e      	ldr	r6, [r7, #4]
 8000e8c:	466d      	mov	r5, sp
 8000e8e:	f106 0410 	add.w	r4, r6, #16
 8000e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ea2:	1d33      	adds	r3, r6, #4
 8000ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ea6:	6838      	ldr	r0, [r7, #0]
 8000ea8:	f001 fd74 	bl	8002994 <USB_CoreInit>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e0d0      	b.n	8001060 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 fe8b 	bl	8002be0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e04a      	b.n	8000f66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	1a9b      	subs	r3, r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	440b      	add	r3, r1
 8000ede:	333d      	adds	r3, #61	; 0x3d
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ee4:	7bfa      	ldrb	r2, [r7, #15]
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	333c      	adds	r3, #60	; 0x3c
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	b298      	uxth	r0, r3
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	3342      	adds	r3, #66	; 0x42
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	1a9b      	subs	r3, r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	333f      	adds	r3, #63	; 0x3f
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	3344      	adds	r3, #68	; 0x44
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	3348      	adds	r3, #72	; 0x48
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	3350      	adds	r3, #80	; 0x50
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	3301      	adds	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3af      	bcc.n	8000ed0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	e044      	b.n	8001000 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	1a9b      	subs	r3, r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	d3b5      	bcc.n	8000f76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	687e      	ldr	r6, [r7, #4]
 8001012:	466d      	mov	r5, sp
 8001014:	f106 0410 	add.w	r4, r6, #16
 8001018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800101c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001020:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001024:	e885 0003 	stmia.w	r5, {r0, r1}
 8001028:	1d33      	adds	r3, r6, #4
 800102a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f001 fe23 	bl	8002c78 <USB_DevInit>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e00d      	b.n	8001060 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fe9f 	bl	8003d9c <USB_DevDisconnect>

  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001068 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <HAL_PCD_Start+0x1c>
 8001080:	2302      	movs	r3, #2
 8001082:	e020      	b.n	80010c6 <HAL_PCD_Start+0x5e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	2b01      	cmp	r3, #1
 8001092:	d109      	bne.n	80010a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001098:	2b01      	cmp	r3, #1
 800109a:	d005      	beq.n	80010a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fd75 	bl	8002b9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fe4f 	bl	8003d5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b08d      	sub	sp, #52	; 0x34
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 ff0d 	bl	8003f04 <USB_GetMode>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f040 839d 	bne.w	800182c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 fe71 	bl	8003dde <USB_ReadInterrupts>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8393 	beq.w	800182a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fe68 	bl	8003dde <USB_ReadInterrupts>
 800110e:	4603      	mov	r3, r0
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b02      	cmp	r3, #2
 8001116:	d107      	bne.n	8001128 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f002 0202 	and.w	r2, r2, #2
 8001126:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fe56 	bl	8003dde <USB_ReadInterrupts>
 8001132:	4603      	mov	r3, r0
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b10      	cmp	r3, #16
 800113a:	d161      	bne.n	8001200 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699a      	ldr	r2, [r3, #24]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0210 	bic.w	r2, r2, #16
 800114a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	f003 020f 	and.w	r2, r3, #15
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	1a9b      	subs	r3, r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	3304      	adds	r3, #4
 800116a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	0c5b      	lsrs	r3, r3, #17
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	2b02      	cmp	r3, #2
 8001176:	d124      	bne.n	80011c2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d035      	beq.n	80011f0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800118e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001192:	b29b      	uxth	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	6a38      	ldr	r0, [r7, #32]
 8001198:	f002 fc8d 	bl	8003ab6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011a8:	441a      	add	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ba:	441a      	add	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	e016      	b.n	80011f0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	0c5b      	lsrs	r3, r3, #17
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d110      	bne.n	80011f0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80011d4:	2208      	movs	r2, #8
 80011d6:	4619      	mov	r1, r3
 80011d8:	6a38      	ldr	r0, [r7, #32]
 80011da:	f002 fc6c 	bl	8003ab6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ea:	441a      	add	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	699a      	ldr	r2, [r3, #24]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0210 	orr.w	r2, r2, #16
 80011fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fdea 	bl	8003dde <USB_ReadInterrupts>
 800120a:	4603      	mov	r3, r0
 800120c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001210:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001214:	d16e      	bne.n	80012f4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fdf0 	bl	8003e04 <USB_ReadDevAllOutEpInterrupt>
 8001224:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001226:	e062      	b.n	80012ee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d057      	beq.n	80012e2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fe15 	bl	8003e6c <USB_ReadDevOutEPInterrupt>
 8001242:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00c      	beq.n	8001268 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	015a      	lsls	r2, r3, #5
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	4413      	add	r3, r2
 8001256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800125a:	461a      	mov	r2, r3
 800125c:	2301      	movs	r3, #1
 800125e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fdb0 	bl	8001dc8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00c      	beq.n	800128c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	015a      	lsls	r2, r3, #5
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	4413      	add	r3, r2
 800127a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800127e:	461a      	mov	r2, r3
 8001280:	2308      	movs	r3, #8
 8001282:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 feaa 	bl	8001fe0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	015a      	lsls	r2, r3, #5
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	4413      	add	r3, r2
 800129e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012a2:	461a      	mov	r2, r3
 80012a4:	2310      	movs	r3, #16
 80012a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	f003 0320 	and.w	r3, r3, #32
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d008      	beq.n	80012c4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	015a      	lsls	r2, r3, #5
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	4413      	add	r3, r2
 80012ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012be:	461a      	mov	r2, r3
 80012c0:	2320      	movs	r3, #32
 80012c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	015a      	lsls	r2, r3, #5
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012da:	461a      	mov	r2, r3
 80012dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	3301      	adds	r3, #1
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d199      	bne.n	8001228 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fd70 	bl	8003dde <USB_ReadInterrupts>
 80012fe:	4603      	mov	r3, r0
 8001300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001304:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001308:	f040 80c0 	bne.w	800148c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fd91 	bl	8003e38 <USB_ReadDevAllInEpInterrupt>
 8001316:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800131c:	e0b2      	b.n	8001484 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80a7 	beq.w	8001478 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f002 fdb7 	bl	8003ea8 <USB_ReadDevInEPInterrupt>
 800133a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d057      	beq.n	80013f6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	2201      	movs	r2, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800135a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	69f9      	ldr	r1, [r7, #28]
 8001362:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001366:	4013      	ands	r3, r2
 8001368:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	015a      	lsls	r2, r3, #5
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001376:	461a      	mov	r2, r3
 8001378:	2301      	movs	r3, #1
 800137a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d132      	bne.n	80013ea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	3348      	adds	r3, #72	; 0x48
 8001394:	6819      	ldr	r1, [r3, #0]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4403      	add	r3, r0
 80013a4:	3344      	adds	r3, #68	; 0x44
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4419      	add	r1, r3
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4403      	add	r3, r0
 80013b8:	3348      	adds	r3, #72	; 0x48
 80013ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d113      	bne.n	80013ea <HAL_PCD_IRQHandler+0x31c>
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	3350      	adds	r3, #80	; 0x50
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d108      	bne.n	80013ea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013e2:	461a      	mov	r2, r3
 80013e4:	2101      	movs	r1, #1
 80013e6:	f002 fdbf 	bl	8003f68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f004 fda4 	bl	8005f3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	015a      	lsls	r2, r3, #5
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	4413      	add	r3, r2
 8001408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800140c:	461a      	mov	r2, r3
 800140e:	2308      	movs	r3, #8
 8001410:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001428:	461a      	mov	r2, r3
 800142a:	2310      	movs	r3, #16
 800142c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001444:	461a      	mov	r2, r3
 8001446:	2340      	movs	r3, #64	; 0x40
 8001448:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001460:	461a      	mov	r2, r3
 8001462:	2302      	movs	r3, #2
 8001464:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 fc1b 	bl	8001cae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	3301      	adds	r3, #1
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001480:	085b      	lsrs	r3, r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	2b00      	cmp	r3, #0
 8001488:	f47f af49 	bne.w	800131e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fca4 	bl	8003dde <USB_ReadInterrupts>
 8001496:	4603      	mov	r3, r0
 8001498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800149c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014a0:	d122      	bne.n	80014e8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d108      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014c8:	2100      	movs	r1, #0
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fe26 	bl	800211c <HAL_PCDEx_LPM_Callback>
 80014d0:	e002      	b.n	80014d8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f004 fda0 	bl	8006018 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80014e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fc76 	bl	8003dde <USB_ReadInterrupts>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014fc:	d112      	bne.n	8001524 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b01      	cmp	r3, #1
 800150c:	d102      	bne.n	8001514 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f004 fd5c 	bl	8005fcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001522:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fc58 	bl	8003dde <USB_ReadInterrupts>
 800152e:	4603      	mov	r3, r0
 8001530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001538:	f040 80c7 	bne.w	80016ca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2110      	movs	r1, #16
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fcf2 	bl	8002f40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001560:	e056      	b.n	8001610 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001564:	015a      	lsls	r2, r3, #5
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800156e:	461a      	mov	r2, r3
 8001570:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001574:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	015a      	lsls	r2, r3, #5
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001586:	0151      	lsls	r1, r2, #5
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	440a      	add	r2, r1
 800158c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001590:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001594:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	015a      	lsls	r2, r3, #5
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4413      	add	r3, r2
 800159e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a6:	0151      	lsls	r1, r2, #5
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	440a      	add	r2, r1
 80015ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c2:	461a      	mov	r2, r3
 80015c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015cc:	015a      	lsls	r2, r3, #5
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015da:	0151      	lsls	r1, r2, #5
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	440a      	add	r2, r1
 80015e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80015ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ec:	015a      	lsls	r2, r3, #5
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015fa:	0151      	lsls	r1, r2, #5
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	440a      	add	r2, r1
 8001600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001604:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001608:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	3301      	adds	r3, #1
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001616:	429a      	cmp	r2, r3
 8001618:	d3a3      	bcc.n	8001562 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001628:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800162c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	2b00      	cmp	r3, #0
 8001634:	d016      	beq.n	8001664 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001646:	f043 030b 	orr.w	r3, r3, #11
 800164a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165c:	f043 030b 	orr.w	r3, r3, #11
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	e015      	b.n	8001690 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001676:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800167a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800168a:	f043 030b 	orr.w	r3, r3, #11
 800168e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800169e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016b4:	461a      	mov	r2, r3
 80016b6:	f002 fc57 	bl	8003f68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fb85 	bl	8003dde <USB_ReadInterrupts>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016de:	d124      	bne.n	800172a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fc1b 	bl	8003f20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 fc83 	bl	8002ffa <USB_GetDevSpeed>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681c      	ldr	r4, [r3, #0]
 8001700:	f001 f93c 	bl	800297c <HAL_RCC_GetHCLKFreq>
 8001704:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800170a:	b2db      	uxtb	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	4620      	mov	r0, r4
 8001710:	f001 f9a2 	bl	8002a58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f004 fc3a 	bl	8005f8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001728:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fb55 	bl	8003dde <USB_ReadInterrupts>
 8001734:	4603      	mov	r3, r0
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b08      	cmp	r3, #8
 800173c:	d10a      	bne.n	8001754 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f004 fc17 	bl	8005f72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f002 0208 	and.w	r2, r2, #8
 8001752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f002 fb40 	bl	8003dde <USB_ReadInterrupts>
 800175e:	4603      	mov	r3, r0
 8001760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001768:	d10f      	bne.n	800178a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	b2db      	uxtb	r3, r3
 8001772:	4619      	mov	r1, r3
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f004 fc6f 	bl	8006058 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fb25 	bl	8003dde <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800179e:	d10f      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f004 fc42 	bl	8006034 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fb0a 	bl	8003dde <USB_ReadInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d4:	d10a      	bne.n	80017ec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f004 fc50 	bl	800607c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80017ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 faf4 	bl	8003dde <USB_ReadInterrupts>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d115      	bne.n	800182c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f004 fc40 	bl	8006098 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6859      	ldr	r1, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	430a      	orrs	r2, r1
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	e000      	b.n	800182c <HAL_PCD_IRQHandler+0x75e>
      return;
 800182a:	bf00      	nop
    }
  }
}
 800182c:	3734      	adds	r7, #52	; 0x34
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}

08001832 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_PCD_SetAddress+0x1a>
 8001848:	2302      	movs	r3, #2
 800184a:	e013      	b.n	8001874 <HAL_PCD_SetAddress+0x42>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f002 fa52 	bl	8003d0e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4603      	mov	r3, r0
 800188c:	70fb      	strb	r3, [r7, #3]
 800188e:	460b      	mov	r3, r1
 8001890:	803b      	strh	r3, [r7, #0]
 8001892:	4613      	mov	r3, r2
 8001894:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800189a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da0f      	bge.n	80018c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	f003 020f 	and.w	r2, r3, #15
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	3338      	adds	r3, #56	; 0x38
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	3304      	adds	r3, #4
 80018b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2201      	movs	r2, #1
 80018be:	705a      	strb	r2, [r3, #1]
 80018c0:	e00f      	b.n	80018e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	f003 020f 	and.w	r2, r3, #15
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	3304      	adds	r3, #4
 80018da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018ee:	883a      	ldrh	r2, [r7, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	78ba      	ldrb	r2, [r7, #2]
 80018f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800190c:	78bb      	ldrb	r3, [r7, #2]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d102      	bne.n	8001918 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_PCD_EP_Open+0xaa>
 8001922:	2302      	movs	r3, #2
 8001924:	e00e      	b.n	8001944 <HAL_PCD_EP_Open+0xc8>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68f9      	ldr	r1, [r7, #12]
 8001934:	4618      	mov	r0, r3
 8001936:	f001 fb85 	bl	8003044 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001942:	7afb      	ldrb	r3, [r7, #11]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800195c:	2b00      	cmp	r3, #0
 800195e:	da0f      	bge.n	8001980 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	f003 020f 	and.w	r2, r3, #15
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	3338      	adds	r3, #56	; 0x38
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	705a      	strb	r2, [r3, #1]
 800197e:	e00f      	b.n	80019a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	f003 020f 	and.w	r2, r3, #15
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	3304      	adds	r3, #4
 8001998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_PCD_EP_Close+0x6e>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e00e      	b.n	80019d8 <HAL_PCD_EP_Close+0x8c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68f9      	ldr	r1, [r7, #12]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 fbc3 	bl	8003154 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	460b      	mov	r3, r1
 80019ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	f003 020f 	and.w	r2, r3, #15
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4413      	add	r3, r2
 8001a06:	3304      	adds	r3, #4
 8001a08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d102      	bne.n	8001a3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	6979      	ldr	r1, [r7, #20]
 8001a54:	f001 fe9e 	bl	8003794 <USB_EP0StartXfer>
 8001a58:	e008      	b.n	8001a6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	6979      	ldr	r1, [r7, #20]
 8001a68:	f001 fc50 	bl	800330c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	f003 020f 	and.w	r2, r3, #15
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a98:	681b      	ldr	r3, [r3, #0]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
 8001ab8:	f003 020f 	and.w	r2, r3, #15
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	3338      	adds	r3, #56	; 0x38
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	3304      	adds	r3, #4
 8001acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b00:	7afb      	ldrb	r3, [r7, #11]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	6979      	ldr	r1, [r7, #20]
 8001b18:	f001 fe3c 	bl	8003794 <USB_EP0StartXfer>
 8001b1c:	e008      	b.n	8001b30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6979      	ldr	r1, [r7, #20]
 8001b2c:	f001 fbee 	bl	800330c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 020f 	and.w	r2, r3, #15
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d901      	bls.n	8001b58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e050      	b.n	8001bfa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	da0f      	bge.n	8001b80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 020f 	and.w	r2, r3, #15
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	3338      	adds	r3, #56	; 0x38
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	3304      	adds	r3, #4
 8001b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	705a      	strb	r2, [r3, #1]
 8001b7e:	e00d      	b.n	8001b9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	4613      	mov	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	3304      	adds	r3, #4
 8001b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_PCD_EP_SetStall+0x82>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e01e      	b.n	8001bfa <HAL_PCD_EP_SetStall+0xc0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 ffcb 	bl	8003b66 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10a      	bne.n	8001bf0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	b2d9      	uxtb	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bea:	461a      	mov	r2, r3
 8001bec:	f002 f9bc 	bl	8003f68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d901      	bls.n	8001c20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e042      	b.n	8001ca6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	da0f      	bge.n	8001c48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	f003 020f 	and.w	r2, r3, #15
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	3338      	adds	r3, #56	; 0x38
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	705a      	strb	r2, [r3, #1]
 8001c46:	e00f      	b.n	8001c68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3304      	adds	r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_PCD_EP_ClrStall+0x86>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e00e      	b.n	8001ca6 <HAL_PCD_EP_ClrStall+0xa4>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 ffd3 	bl	8003c42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b08a      	sub	sp, #40	; 0x28
 8001cb2:	af02      	add	r7, sp, #8
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	3338      	adds	r3, #56	; 0x38
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d901      	bls.n	8001ce6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e06c      	b.n	8001dc0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d902      	bls.n	8001d02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3303      	adds	r3, #3
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d0a:	e02b      	b.n	8001d64 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d902      	bls.n	8001d28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	3303      	adds	r3, #3
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	68d9      	ldr	r1, [r3, #12]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4603      	mov	r3, r0
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f001 fe77 	bl	8003a3a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	441a      	add	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	699a      	ldr	r2, [r3, #24]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	441a      	add	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d809      	bhi.n	8001d8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d203      	bcs.n	8001d8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1be      	bne.n	8001d0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d811      	bhi.n	8001dbe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	2201      	movs	r2, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	6939      	ldr	r1, [r7, #16]
 8001db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dba:	4013      	ands	r3, r2
 8001dbc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	333c      	adds	r3, #60	; 0x3c
 8001de0:	3304      	adds	r3, #4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	f040 80a0 	bne.w	8001f40 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d015      	beq.n	8001e36 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4a72      	ldr	r2, [pc, #456]	; (8001fd8 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	f240 80dd 	bls.w	8001fce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80d7 	beq.w	8001fce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e32:	6093      	str	r3, [r2, #8]
 8001e34:	e0cb      	b.n	8001fce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2320      	movs	r3, #32
 8001e50:	6093      	str	r3, [r2, #8]
 8001e52:	e0bc      	b.n	8001fce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 80b7 	bne.w	8001fce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4a5d      	ldr	r2, [pc, #372]	; (8001fd8 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d90f      	bls.n	8001e88 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e84:	6093      	str	r3, [r2, #8]
 8001e86:	e0a2      	b.n	8001fce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e9a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	0159      	lsls	r1, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001eae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4403      	add	r3, r0
 8001ebe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ec2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ed6:	6819      	ldr	r1, [r3, #0]
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4403      	add	r3, r0
 8001ee6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4419      	add	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4403      	add	r3, r0
 8001efc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f00:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d114      	bne.n	8001f32 <PCD_EP_OutXfrComplete_int+0x16a>
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d108      	bne.n	8001f32 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	f002 f81b 	bl	8003f68 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	4619      	mov	r1, r3
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f003 ffe5 	bl	8005f08 <HAL_PCD_DataOutStageCallback>
 8001f3e:	e046      	b.n	8001fce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <PCD_EP_OutXfrComplete_int+0x214>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d124      	bne.n	8001f92 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f64:	6093      	str	r3, [r2, #8]
 8001f66:	e032      	b.n	8001fce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2320      	movs	r3, #32
 8001f82:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f003 ffbc 	bl	8005f08 <HAL_PCD_DataOutStageCallback>
 8001f90:	e01d      	b.n	8001fce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d114      	bne.n	8001fc2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d108      	bne.n	8001fc2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	f001 ffd3 	bl	8003f68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f003 ff9d 	bl	8005f08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	4f54300a 	.word	0x4f54300a
 8001fdc:	4f54310a 	.word	0x4f54310a

08001fe0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	333c      	adds	r3, #60	; 0x3c
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a15      	ldr	r2, [pc, #84]	; (8002068 <PCD_EP_OutSetupPacket_int+0x88>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d90e      	bls.n	8002034 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202c:	461a      	mov	r2, r3
 800202e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002032:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f003 ff55 	bl	8005ee4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <PCD_EP_OutSetupPacket_int+0x88>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d90c      	bls.n	800205c <PCD_EP_OutSetupPacket_int+0x7c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d108      	bne.n	800205c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002054:	461a      	mov	r2, r3
 8002056:	2101      	movs	r1, #1
 8002058:	f001 ff86 	bl	8003f68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	4f54300a 	.word	0x4f54300a

0800206c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
 8002078:	4613      	mov	r3, r2
 800207a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800208a:	883b      	ldrh	r3, [r7, #0]
 800208c:	0419      	lsls	r1, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	430a      	orrs	r2, r1
 8002096:	629a      	str	r2, [r3, #40]	; 0x28
 8002098:	e028      	b.n	80020ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	4413      	add	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e00d      	b.n	80020ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	3340      	adds	r3, #64	; 0x40
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	4413      	add	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	3301      	adds	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3ec      	bcc.n	80020ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020d4:	883b      	ldrh	r3, [r7, #0]
 80020d6:	0418      	lsls	r0, r3, #16
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	3b01      	subs	r3, #1
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	4302      	orrs	r2, r0
 80020e4:	3340      	adds	r3, #64	; 0x40
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e267      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d075      	beq.n	800223e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002152:	4b88      	ldr	r3, [pc, #544]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b04      	cmp	r3, #4
 800215c:	d00c      	beq.n	8002178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800215e:	4b85      	ldr	r3, [pc, #532]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002166:	2b08      	cmp	r3, #8
 8002168:	d112      	bne.n	8002190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216a:	4b82      	ldr	r3, [pc, #520]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002176:	d10b      	bne.n	8002190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	4b7e      	ldr	r3, [pc, #504]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d05b      	beq.n	800223c <HAL_RCC_OscConfig+0x108>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d157      	bne.n	800223c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e242      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002198:	d106      	bne.n	80021a8 <HAL_RCC_OscConfig+0x74>
 800219a:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a75      	ldr	r2, [pc, #468]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e01d      	b.n	80021e4 <HAL_RCC_OscConfig+0xb0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x98>
 80021b2:	4b70      	ldr	r3, [pc, #448]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6f      	ldr	r2, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6c      	ldr	r2, [pc, #432]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0xb0>
 80021cc:	4b69      	ldr	r3, [pc, #420]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a68      	ldr	r2, [pc, #416]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b66      	ldr	r3, [pc, #408]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a65      	ldr	r2, [pc, #404]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fb40 	bl	8000870 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f4:	f7fe fb3c 	bl	8000870 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e207      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	4b5b      	ldr	r3, [pc, #364]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0xc0>
 8002212:	e014      	b.n	800223e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7fe fb2c 	bl	8000870 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221c:	f7fe fb28 	bl	8000870 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1f3      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222e:	4b51      	ldr	r3, [pc, #324]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0xe8>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d063      	beq.n	8002312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800225e:	2b08      	cmp	r3, #8
 8002260:	d11c      	bne.n	800229c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002262:	4b44      	ldr	r3, [pc, #272]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d116      	bne.n	800229c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_RCC_OscConfig+0x152>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e1c7      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4937      	ldr	r1, [pc, #220]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	e03a      	b.n	8002312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a4:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_RCC_OscConfig+0x244>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7fe fae1 	bl	8000870 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b2:	f7fe fadd 	bl	8000870 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e1a8      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4925      	ldr	r1, [pc, #148]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]
 80022e4:	e015      	b.n	8002312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCC_OscConfig+0x244>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe fac0 	bl	8000870 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f4:	f7fe fabc 	bl	8000870 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e187      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d036      	beq.n	800238c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_RCC_OscConfig+0x248>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe faa0 	bl	8000870 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002334:	f7fe fa9c 	bl	8000870 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e167      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x200>
 8002352:	e01b      	b.n	800238c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_OscConfig+0x248>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235a:	f7fe fa89 	bl	8000870 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002360:	e00e      	b.n	8002380 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002362:	f7fe fa85 	bl	8000870 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d907      	bls.n	8002380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e150      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
 8002374:	40023800 	.word	0x40023800
 8002378:	42470000 	.word	0x42470000
 800237c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ea      	bne.n	8002362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8097 	beq.w	80024c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b7d      	ldr	r3, [pc, #500]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a7c      	ldr	r2, [pc, #496]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b7a      	ldr	r3, [pc, #488]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c6:	2301      	movs	r3, #1
 80023c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b77      	ldr	r3, [pc, #476]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d118      	bne.n	8002408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d6:	4b74      	ldr	r3, [pc, #464]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a73      	ldr	r2, [pc, #460]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e2:	f7fe fa45 	bl	8000870 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ea:	f7fe fa41 	bl	8000870 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e10c      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x2ea>
 8002410:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x324>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b05      	cmp	r3, #5
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x30c>
 8002426:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a5e      	ldr	r2, [pc, #376]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6713      	str	r3, [r2, #112]	; 0x70
 8002432:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	4a5b      	ldr	r2, [pc, #364]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6713      	str	r3, [r2, #112]	; 0x70
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0x324>
 8002440:	4b58      	ldr	r3, [pc, #352]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	4a57      	ldr	r2, [pc, #348]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
 800244c:	4b55      	ldr	r3, [pc, #340]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	4a54      	ldr	r2, [pc, #336]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002452:	f023 0304 	bic.w	r3, r3, #4
 8002456:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d015      	beq.n	800248c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7fe fa06 	bl	8000870 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fa02 	bl	8000870 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0cb      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247e:	4b49      	ldr	r3, [pc, #292]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0ee      	beq.n	8002468 <HAL_RCC_OscConfig+0x334>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7fe f9f0 	bl	8000870 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe f9ec 	bl	8000870 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0b5      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1ee      	bne.n	8002494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024bc:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80a1 	beq.w	8002614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d2:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d05c      	beq.n	8002598 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d141      	bne.n	800256a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_RCC_OscConfig+0x478>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe f9c0 	bl	8000870 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe f9bc 	bl	8000870 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e087      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	019b      	lsls	r3, r3, #6
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	085b      	lsrs	r3, r3, #1
 800252a:	3b01      	subs	r3, #1
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	491b      	ldr	r1, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_RCC_OscConfig+0x478>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe f995 	bl	8000870 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe f991 	bl	8000870 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e05c      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x416>
 8002568:	e054      	b.n	8002614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_RCC_OscConfig+0x478>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe f97e 	bl	8000870 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe f97a 	bl	8000870 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e045      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x444>
 8002596:	e03d      	b.n	8002614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e038      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40007000 	.word	0x40007000
 80025ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_RCC_OscConfig+0x4ec>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d028      	beq.n	8002610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d121      	bne.n	8002610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d11a      	bne.n	8002610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d111      	bne.n	8002610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	3b01      	subs	r3, #1
 80025fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0cc      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002638:	4b68      	ldr	r3, [pc, #416]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d90c      	bls.n	8002660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b65      	ldr	r3, [pc, #404]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b8      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002682:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800269a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	494d      	ldr	r1, [pc, #308]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d044      	beq.n	8002744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d119      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e2:	4b3f      	ldr	r3, [pc, #252]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e06f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f2:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e067      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002702:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 0203 	bic.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4934      	ldr	r1, [pc, #208]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002714:	f7fe f8ac 	bl	8000870 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7fe f8a8 	bl	8000870 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e04f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 020c 	and.w	r2, r3, #12
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	d1eb      	bne.n	800271c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d20c      	bcs.n	800276c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b22      	ldr	r3, [pc, #136]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490e      	ldr	r1, [pc, #56]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027aa:	f000 f821 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	490a      	ldr	r1, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	5ccb      	ldrb	r3, [r1, r3]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe f80c 	bl	80007e8 <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00
 80027e0:	40023800 	.word	0x40023800
 80027e4:	08006508 	.word	0x08006508
 80027e8:	20000000 	.word	0x20000000
 80027ec:	20000004 	.word	0x20000004

080027f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f4:	b090      	sub	sp, #64	; 0x40
 80027f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
 80027fc:	2300      	movs	r3, #0
 80027fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002800:	2300      	movs	r3, #0
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <HAL_RCC_GetSysClockFreq+0x180>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 030c 	and.w	r3, r3, #12
 8002810:	2b08      	cmp	r3, #8
 8002812:	d00d      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x40>
 8002814:	2b08      	cmp	r3, #8
 8002816:	f200 80a1 	bhi.w	800295c <HAL_RCC_GetSysClockFreq+0x16c>
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x34>
 800281e:	2b04      	cmp	r3, #4
 8002820:	d003      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0x3a>
 8002822:	e09b      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_GetSysClockFreq+0x184>)
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002828:	e09b      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800282a:	4b53      	ldr	r3, [pc, #332]	; (8002978 <HAL_RCC_GetSysClockFreq+0x188>)
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800282e:	e098      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002830:	4b4f      	ldr	r3, [pc, #316]	; (8002970 <HAL_RCC_GetSysClockFreq+0x180>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800283a:	4b4d      	ldr	r3, [pc, #308]	; (8002970 <HAL_RCC_GetSysClockFreq+0x180>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d028      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002846:	4b4a      	ldr	r3, [pc, #296]	; (8002970 <HAL_RCC_GetSysClockFreq+0x180>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	099b      	lsrs	r3, r3, #6
 800284c:	2200      	movs	r2, #0
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	627a      	str	r2, [r7, #36]	; 0x24
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002858:	2100      	movs	r1, #0
 800285a:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_RCC_GetSysClockFreq+0x188>)
 800285c:	fb03 f201 	mul.w	r2, r3, r1
 8002860:	2300      	movs	r3, #0
 8002862:	fb00 f303 	mul.w	r3, r0, r3
 8002866:	4413      	add	r3, r2
 8002868:	4a43      	ldr	r2, [pc, #268]	; (8002978 <HAL_RCC_GetSysClockFreq+0x188>)
 800286a:	fba0 1202 	umull	r1, r2, r0, r2
 800286e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002870:	460a      	mov	r2, r1
 8002872:	62ba      	str	r2, [r7, #40]	; 0x28
 8002874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002876:	4413      	add	r3, r2
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287c:	2200      	movs	r2, #0
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	61fa      	str	r2, [r7, #28]
 8002882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002886:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800288a:	f7fd fca5 	bl	80001d8 <__aeabi_uldivmod>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4613      	mov	r3, r2
 8002894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002896:	e053      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002898:	4b35      	ldr	r3, [pc, #212]	; (8002970 <HAL_RCC_GetSysClockFreq+0x180>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	2200      	movs	r2, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	617a      	str	r2, [r7, #20]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028aa:	f04f 0b00 	mov.w	fp, #0
 80028ae:	4652      	mov	r2, sl
 80028b0:	465b      	mov	r3, fp
 80028b2:	f04f 0000 	mov.w	r0, #0
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	0159      	lsls	r1, r3, #5
 80028bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c0:	0150      	lsls	r0, r2, #5
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	ebb2 080a 	subs.w	r8, r2, sl
 80028ca:	eb63 090b 	sbc.w	r9, r3, fp
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028e2:	ebb2 0408 	subs.w	r4, r2, r8
 80028e6:	eb63 0509 	sbc.w	r5, r3, r9
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	00eb      	lsls	r3, r5, #3
 80028f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f8:	00e2      	lsls	r2, r4, #3
 80028fa:	4614      	mov	r4, r2
 80028fc:	461d      	mov	r5, r3
 80028fe:	eb14 030a 	adds.w	r3, r4, sl
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	eb45 030b 	adc.w	r3, r5, fp
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002916:	4629      	mov	r1, r5
 8002918:	028b      	lsls	r3, r1, #10
 800291a:	4621      	mov	r1, r4
 800291c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002920:	4621      	mov	r1, r4
 8002922:	028a      	lsls	r2, r1, #10
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	2200      	movs	r2, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	60fa      	str	r2, [r7, #12]
 8002930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002934:	f7fd fc50 	bl	80001d8 <__aeabi_uldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4613      	mov	r3, r2
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_GetSysClockFreq+0x180>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	3301      	adds	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002950:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800295a:	e002      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetSysClockFreq+0x184>)
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002964:	4618      	mov	r0, r3
 8002966:	3740      	adds	r7, #64	; 0x40
 8002968:	46bd      	mov	sp, r7
 800296a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	00f42400 	.word	0x00f42400
 8002978:	017d7840 	.word	0x017d7840

0800297c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_RCC_GetHCLKFreq+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000000 	.word	0x20000000

08002994 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002994:	b084      	sub	sp, #16
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	f107 001c 	add.w	r0, r7, #28
 80029a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d122      	bne.n	80029f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80029d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d105      	bne.n	80029e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f001 fb1c 	bl	8004024 <USB_CoreReset>
 80029ec:	4603      	mov	r3, r0
 80029ee:	73fb      	strb	r3, [r7, #15]
 80029f0:	e01a      	b.n	8002a28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f001 fb10 	bl	8004024 <USB_CoreReset>
 8002a04:	4603      	mov	r3, r0
 8002a06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
 8002a1a:	e005      	b.n	8002a28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d10b      	bne.n	8002a46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f043 0206 	orr.w	r2, r3, #6
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f043 0220 	orr.w	r2, r3, #32
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a52:	b004      	add	sp, #16
 8002a54:	4770      	bx	lr
	...

08002a58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d165      	bne.n	8002b38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4a41      	ldr	r2, [pc, #260]	; (8002b74 <USB_SetTurnaroundTime+0x11c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d906      	bls.n	8002a82 <USB_SetTurnaroundTime+0x2a>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4a40      	ldr	r2, [pc, #256]	; (8002b78 <USB_SetTurnaroundTime+0x120>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d202      	bcs.n	8002a82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a7c:	230f      	movs	r3, #15
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e062      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4a3c      	ldr	r2, [pc, #240]	; (8002b78 <USB_SetTurnaroundTime+0x120>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d306      	bcc.n	8002a98 <USB_SetTurnaroundTime+0x40>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4a3b      	ldr	r2, [pc, #236]	; (8002b7c <USB_SetTurnaroundTime+0x124>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d202      	bcs.n	8002a98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002a92:	230e      	movs	r3, #14
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e057      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4a38      	ldr	r2, [pc, #224]	; (8002b7c <USB_SetTurnaroundTime+0x124>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d306      	bcc.n	8002aae <USB_SetTurnaroundTime+0x56>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4a37      	ldr	r2, [pc, #220]	; (8002b80 <USB_SetTurnaroundTime+0x128>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d202      	bcs.n	8002aae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002aa8:	230d      	movs	r3, #13
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e04c      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4a33      	ldr	r2, [pc, #204]	; (8002b80 <USB_SetTurnaroundTime+0x128>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d306      	bcc.n	8002ac4 <USB_SetTurnaroundTime+0x6c>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4a32      	ldr	r2, [pc, #200]	; (8002b84 <USB_SetTurnaroundTime+0x12c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d802      	bhi.n	8002ac4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002abe:	230c      	movs	r3, #12
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e041      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4a2f      	ldr	r2, [pc, #188]	; (8002b84 <USB_SetTurnaroundTime+0x12c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d906      	bls.n	8002ada <USB_SetTurnaroundTime+0x82>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4a2e      	ldr	r2, [pc, #184]	; (8002b88 <USB_SetTurnaroundTime+0x130>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d802      	bhi.n	8002ada <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ad4:	230b      	movs	r3, #11
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	e036      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <USB_SetTurnaroundTime+0x130>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d906      	bls.n	8002af0 <USB_SetTurnaroundTime+0x98>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <USB_SetTurnaroundTime+0x134>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d802      	bhi.n	8002af0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002aea:	230a      	movs	r3, #10
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e02b      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4a26      	ldr	r2, [pc, #152]	; (8002b8c <USB_SetTurnaroundTime+0x134>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d906      	bls.n	8002b06 <USB_SetTurnaroundTime+0xae>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <USB_SetTurnaroundTime+0x138>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d202      	bcs.n	8002b06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b00:	2309      	movs	r3, #9
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	e020      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <USB_SetTurnaroundTime+0x138>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d306      	bcc.n	8002b1c <USB_SetTurnaroundTime+0xc4>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <USB_SetTurnaroundTime+0x13c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d802      	bhi.n	8002b1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b16:	2308      	movs	r3, #8
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	e015      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <USB_SetTurnaroundTime+0x13c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d906      	bls.n	8002b32 <USB_SetTurnaroundTime+0xda>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <USB_SetTurnaroundTime+0x140>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d202      	bcs.n	8002b32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b2c:	2307      	movs	r3, #7
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e00a      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b32:	2306      	movs	r3, #6
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e007      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b3e:	2309      	movs	r3, #9
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e001      	b.n	8002b48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b44:	2309      	movs	r3, #9
 8002b46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	029b      	lsls	r3, r3, #10
 8002b5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	00d8acbf 	.word	0x00d8acbf
 8002b78:	00e4e1c0 	.word	0x00e4e1c0
 8002b7c:	00f42400 	.word	0x00f42400
 8002b80:	01067380 	.word	0x01067380
 8002b84:	011a499f 	.word	0x011a499f
 8002b88:	01312cff 	.word	0x01312cff
 8002b8c:	014ca43f 	.word	0x014ca43f
 8002b90:	016e3600 	.word	0x016e3600
 8002b94:	01a6ab1f 	.word	0x01a6ab1f
 8002b98:	01e84800 	.word	0x01e84800

08002b9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0201 	bic.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d115      	bne.n	8002c2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f7fd fe3a 	bl	8000888 <HAL_Delay>
      ms++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f001 f972 	bl	8003f04 <USB_GetMode>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d01e      	beq.n	8002c64 <USB_SetCurrentMode+0x84>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b31      	cmp	r3, #49	; 0x31
 8002c2a:	d9f0      	bls.n	8002c0e <USB_SetCurrentMode+0x2e>
 8002c2c:	e01a      	b.n	8002c64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d115      	bne.n	8002c60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c40:	2001      	movs	r0, #1
 8002c42:	f7fd fe21 	bl	8000888 <HAL_Delay>
      ms++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f001 f959 	bl	8003f04 <USB_GetMode>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <USB_SetCurrentMode+0x84>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b31      	cmp	r3, #49	; 0x31
 8002c5c:	d9f0      	bls.n	8002c40 <USB_SetCurrentMode+0x60>
 8002c5e:	e001      	b.n	8002c64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e005      	b.n	8002c70 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b32      	cmp	r3, #50	; 0x32
 8002c68:	d101      	bne.n	8002c6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c78:	b084      	sub	sp, #16
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	e009      	b.n	8002cac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	3340      	adds	r3, #64	; 0x40
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b0e      	cmp	r3, #14
 8002cb0:	d9f2      	bls.n	8002c98 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d11c      	bne.n	8002cf2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
 8002cf0:	e00b      	b.n	8002d0a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d10:	461a      	mov	r2, r3
 8002d12:	2300      	movs	r3, #0
 8002d14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d24:	461a      	mov	r2, r3
 8002d26:	680b      	ldr	r3, [r1, #0]
 8002d28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10c      	bne.n	8002d4a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d104      	bne.n	8002d40 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d36:	2100      	movs	r1, #0
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f945 	bl	8002fc8 <USB_SetDevSpeed>
 8002d3e:	e008      	b.n	8002d52 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d40:	2101      	movs	r1, #1
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f940 	bl	8002fc8 <USB_SetDevSpeed>
 8002d48:	e003      	b.n	8002d52 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f93b 	bl	8002fc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d52:	2110      	movs	r1, #16
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f8f3 	bl	8002f40 <USB_FlushTxFifo>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f90f 	bl	8002f88 <USB_FlushRxFifo>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d86:	461a      	mov	r2, r3
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	461a      	mov	r2, r3
 8002d94:	2300      	movs	r3, #0
 8002d96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	e043      	b.n	8002e26 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002db4:	d118      	bne.n	8002de8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	e013      	b.n	8002dfa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dde:	461a      	mov	r2, r3
 8002de0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e008      	b.n	8002dfa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df4:	461a      	mov	r2, r3
 8002df6:	2300      	movs	r3, #0
 8002df8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e06:	461a      	mov	r2, r3
 8002e08:	2300      	movs	r3, #0
 8002e0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	3301      	adds	r3, #1
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d3b7      	bcc.n	8002d9e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	e043      	b.n	8002ebc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e4a:	d118      	bne.n	8002e7e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e013      	b.n	8002e90 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e74:	461a      	mov	r2, r3
 8002e76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	e008      	b.n	8002e90 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d3b7      	bcc.n	8002e34 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ee4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f043 0210 	orr.w	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <USB_DevInit+0x2c4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f043 0208 	orr.w	r2, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f38:	b004      	add	sp, #16
 8002f3a:	4770      	bx	lr
 8002f3c:	803c3800 	.word	0x803c3800

08002f40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	f043 0220 	orr.w	r2, r3, #32
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <USB_FlushTxFifo+0x44>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e006      	b.n	8002f78 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d0f1      	beq.n	8002f5a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	00030d40 	.word	0x00030d40

08002f88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2210      	movs	r2, #16
 8002f98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <USB_FlushRxFifo+0x3c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e006      	b.n	8002fb8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d0f1      	beq.n	8002f9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	00030d40 	.word	0x00030d40

08002fc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b087      	sub	sp, #28
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0306 	and.w	r3, r3, #6
 8003012:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800301a:	2300      	movs	r3, #0
 800301c:	75fb      	strb	r3, [r7, #23]
 800301e:	e00a      	b.n	8003036 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d002      	beq.n	800302c <USB_GetDevSpeed+0x32>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b06      	cmp	r3, #6
 800302a:	d102      	bne.n	8003032 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800302c:	2302      	movs	r3, #2
 800302e:	75fb      	strb	r3, [r7, #23]
 8003030:	e001      	b.n	8003036 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003032:	230f      	movs	r3, #15
 8003034:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003036:	7dfb      	ldrb	r3, [r7, #23]
}
 8003038:	4618      	mov	r0, r3
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	785b      	ldrb	r3, [r3, #1]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d13a      	bne.n	80030d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	b29b      	uxth	r3, r3
 8003078:	68f9      	ldr	r1, [r7, #12]
 800307a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800307e:	4313      	orrs	r3, r2
 8003080:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d155      	bne.n	8003144 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	78db      	ldrb	r3, [r3, #3]
 80030b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	059b      	lsls	r3, r3, #22
 80030ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030bc:	4313      	orrs	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	0151      	lsls	r1, r2, #5
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	440a      	add	r2, r1
 80030c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	e036      	b.n	8003144 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	2101      	movs	r1, #1
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11a      	bne.n	8003144 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	78db      	ldrb	r3, [r3, #3]
 8003128:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800312a:	430b      	orrs	r3, r1
 800312c:	4313      	orrs	r3, r2
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	0151      	lsls	r1, r2, #5
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	440a      	add	r2, r1
 8003136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003142:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d161      	bne.n	8003234 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003186:	d11f      	bne.n	80031c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	0151      	lsls	r1, r2, #5
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	440a      	add	r2, r1
 800319e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	0151      	lsls	r1, r2, #5
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	440a      	add	r2, r1
 80031be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	b29b      	uxth	r3, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031e8:	4013      	ands	r3, r2
 80031ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	2101      	movs	r1, #1
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	b29b      	uxth	r3, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800320c:	4013      	ands	r3, r2
 800320e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	0159      	lsls	r1, r3, #5
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	440b      	add	r3, r1
 8003226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322a:	4619      	mov	r1, r3
 800322c:	4b35      	ldr	r3, [pc, #212]	; (8003304 <USB_DeactivateEndpoint+0x1b0>)
 800322e:	4013      	ands	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
 8003232:	e060      	b.n	80032f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800324a:	d11f      	bne.n	800328c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	0151      	lsls	r1, r2, #5
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	440a      	add	r2, r1
 8003262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003266:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800326a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	0151      	lsls	r1, r2, #5
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	440a      	add	r2, r1
 8003282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003286:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800328a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	43db      	mvns	r3, r3
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ac:	4013      	ands	r3, r2
 80032ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	43db      	mvns	r3, r3
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032d0:	4013      	ands	r3, r2
 80032d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	0159      	lsls	r1, r3, #5
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	440b      	add	r3, r1
 80032ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ee:	4619      	mov	r1, r3
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <USB_DeactivateEndpoint+0x1b4>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	ec337800 	.word	0xec337800
 8003308:	eff37800 	.word	0xeff37800

0800330c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	4613      	mov	r3, r2
 8003318:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	2b01      	cmp	r3, #1
 800332a:	f040 815c 	bne.w	80035e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d132      	bne.n	800339c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	0151      	lsls	r1, r2, #5
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	440a      	add	r2, r1
 800334c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003350:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003354:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003358:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	0151      	lsls	r1, r2, #5
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	440a      	add	r2, r1
 8003370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003374:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003378:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	0151      	lsls	r1, r2, #5
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	440a      	add	r2, r1
 8003390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003394:	0cdb      	lsrs	r3, r3, #19
 8003396:	04db      	lsls	r3, r3, #19
 8003398:	6113      	str	r3, [r2, #16]
 800339a:	e074      	b.n	8003486 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	0151      	lsls	r1, r2, #5
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	440a      	add	r2, r1
 80033b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033b6:	0cdb      	lsrs	r3, r3, #19
 80033b8:	04db      	lsls	r3, r3, #19
 80033ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	0151      	lsls	r1, r2, #5
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	440a      	add	r2, r1
 80033d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6959      	ldr	r1, [r3, #20]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	440b      	add	r3, r1
 80033f8:	1e59      	subs	r1, r3, #1
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003402:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003404:	4b9d      	ldr	r3, [pc, #628]	; (800367c <USB_EPStartXfer+0x370>)
 8003406:	400b      	ands	r3, r1
 8003408:	69b9      	ldr	r1, [r7, #24]
 800340a:	0148      	lsls	r0, r1, #5
 800340c:	69f9      	ldr	r1, [r7, #28]
 800340e:	4401      	add	r1, r0
 8003410:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003414:	4313      	orrs	r3, r2
 8003416:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342e:	69b9      	ldr	r1, [r7, #24]
 8003430:	0148      	lsls	r0, r1, #5
 8003432:	69f9      	ldr	r1, [r7, #28]
 8003434:	4401      	add	r1, r0
 8003436:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800343a:	4313      	orrs	r3, r2
 800343c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	78db      	ldrb	r3, [r3, #3]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d11f      	bne.n	8003486 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	440a      	add	r2, r1
 800345c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003460:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003464:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	0151      	lsls	r1, r2, #5
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	440a      	add	r2, r1
 800347c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003484:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d14b      	bne.n	8003524 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a0:	461a      	mov	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	78db      	ldrb	r3, [r3, #3]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d128      	bne.n	8003502 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d110      	bne.n	80034e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	0151      	lsls	r1, r2, #5
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	440a      	add	r2, r1
 80034d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	e00f      	b.n	8003502 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	0151      	lsls	r1, r2, #5
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	440a      	add	r2, r1
 80034f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003500:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	0151      	lsls	r1, r2, #5
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	440a      	add	r2, r1
 8003518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800351c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e12f      	b.n	8003784 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	0151      	lsls	r1, r2, #5
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	440a      	add	r2, r1
 800353a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800353e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003542:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	78db      	ldrb	r3, [r3, #3]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d015      	beq.n	8003578 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8117 	beq.w	8003784 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	2101      	movs	r1, #1
 8003568:	fa01 f303 	lsl.w	r3, r1, r3
 800356c:	69f9      	ldr	r1, [r7, #28]
 800356e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003572:	4313      	orrs	r3, r2
 8003574:	634b      	str	r3, [r1, #52]	; 0x34
 8003576:	e105      	b.n	8003784 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d110      	bne.n	80035aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	0151      	lsls	r1, r2, #5
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	440a      	add	r2, r1
 800359e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	e00f      	b.n	80035ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	0151      	lsls	r1, r2, #5
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	440a      	add	r2, r1
 80035c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	68d9      	ldr	r1, [r3, #12]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	b298      	uxth	r0, r3
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	4603      	mov	r3, r0
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fa2b 	bl	8003a3a <USB_WritePacket>
 80035e4:	e0ce      	b.n	8003784 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	0151      	lsls	r1, r2, #5
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	440a      	add	r2, r1
 80035fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003600:	0cdb      	lsrs	r3, r3, #19
 8003602:	04db      	lsls	r3, r3, #19
 8003604:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	0151      	lsls	r1, r2, #5
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	440a      	add	r2, r1
 800361c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003628:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d126      	bne.n	8003680 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	0148      	lsls	r0, r1, #5
 800364c:	69f9      	ldr	r1, [r7, #28]
 800364e:	4401      	add	r1, r0
 8003650:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003654:	4313      	orrs	r3, r2
 8003656:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	440a      	add	r2, r1
 800366e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003676:	6113      	str	r3, [r2, #16]
 8003678:	e036      	b.n	80036e8 <USB_EPStartXfer+0x3dc>
 800367a:	bf00      	nop
 800367c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4413      	add	r3, r2
 800368a:	1e5a      	subs	r2, r3, #1
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	8afb      	ldrh	r3, [r7, #22]
 80036a6:	04d9      	lsls	r1, r3, #19
 80036a8:	4b39      	ldr	r3, [pc, #228]	; (8003790 <USB_EPStartXfer+0x484>)
 80036aa:	400b      	ands	r3, r1
 80036ac:	69b9      	ldr	r1, [r7, #24]
 80036ae:	0148      	lsls	r0, r1, #5
 80036b0:	69f9      	ldr	r1, [r7, #28]
 80036b2:	4401      	add	r1, r0
 80036b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036b8:	4313      	orrs	r3, r2
 80036ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	8af9      	ldrh	r1, [r7, #22]
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d8:	69b9      	ldr	r1, [r7, #24]
 80036da:	0148      	lsls	r0, r1, #5
 80036dc:	69f9      	ldr	r1, [r7, #28]
 80036de:	4401      	add	r1, r0
 80036e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036e4:	4313      	orrs	r3, r2
 80036e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d10d      	bne.n	800370a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003706:	460a      	mov	r2, r1
 8003708:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	78db      	ldrb	r3, [r3, #3]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d128      	bne.n	8003764 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d110      	bne.n	8003744 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	0151      	lsls	r1, r2, #5
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	440a      	add	r2, r1
 8003738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800373c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e00f      	b.n	8003764 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	0151      	lsls	r1, r2, #5
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	440a      	add	r2, r1
 800375a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003762:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	0151      	lsls	r1, r2, #5
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	440a      	add	r2, r1
 800377a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800377e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003782:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	1ff80000 	.word	0x1ff80000

08003794 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	f040 80cd 	bne.w	8003950 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d132      	bne.n	8003824 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	0151      	lsls	r1, r2, #5
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	440a      	add	r2, r1
 80037d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	0151      	lsls	r1, r2, #5
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	440a      	add	r2, r1
 80037f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003800:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	0151      	lsls	r1, r2, #5
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	440a      	add	r2, r1
 8003818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800381c:	0cdb      	lsrs	r3, r3, #19
 800381e:	04db      	lsls	r3, r3, #19
 8003820:	6113      	str	r3, [r2, #16]
 8003822:	e04e      	b.n	80038c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	0151      	lsls	r1, r2, #5
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	440a      	add	r2, r1
 800383a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383e:	0cdb      	lsrs	r3, r3, #19
 8003840:	04db      	lsls	r3, r3, #19
 8003842:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	0151      	lsls	r1, r2, #5
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	440a      	add	r2, r1
 800385a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800385e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003862:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003866:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	429a      	cmp	r2, r3
 8003872:	d903      	bls.n	800387c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	0151      	lsls	r1, r2, #5
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	440a      	add	r2, r1
 8003892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800389a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b2:	6939      	ldr	r1, [r7, #16]
 80038b4:	0148      	lsls	r0, r1, #5
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	4401      	add	r1, r0
 80038ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038be:	4313      	orrs	r3, r2
 80038c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d11e      	bne.n	8003906 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	0151      	lsls	r1, r2, #5
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	440a      	add	r2, r1
 80038fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	e092      	b.n	8003a2c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	0151      	lsls	r1, r2, #5
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	440a      	add	r2, r1
 800391c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003920:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003924:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d07e      	beq.n	8003a2c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	2101      	movs	r1, #1
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	6979      	ldr	r1, [r7, #20]
 8003946:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800394a:	4313      	orrs	r3, r2
 800394c:	634b      	str	r3, [r1, #52]	; 0x34
 800394e:	e06d      	b.n	8003a2c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	440a      	add	r2, r1
 8003966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396a:	0cdb      	lsrs	r3, r3, #19
 800396c:	04db      	lsls	r3, r3, #19
 800396e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	440a      	add	r2, r1
 8003986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800398a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800398e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003992:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039da:	6939      	ldr	r1, [r7, #16]
 80039dc:	0148      	lsls	r0, r1, #5
 80039de:	6979      	ldr	r1, [r7, #20]
 80039e0:	4401      	add	r1, r0
 80039e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039e6:	4313      	orrs	r3, r2
 80039e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10d      	bne.n	8003a0c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	68d9      	ldr	r1, [r3, #12]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a08:	460a      	mov	r2, r1
 8003a0a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	0151      	lsls	r1, r2, #5
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	440a      	add	r2, r1
 8003a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b089      	sub	sp, #36	; 0x24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	4611      	mov	r1, r2
 8003a46:	461a      	mov	r2, r3
 8003a48:	460b      	mov	r3, r1
 8003a4a:	71fb      	strb	r3, [r7, #7]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003a58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d123      	bne.n	8003aa8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a60:	88bb      	ldrh	r3, [r7, #4]
 8003a62:	3303      	adds	r3, #3
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	e018      	b.n	8003aa0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	031a      	lsls	r2, r3, #12
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3301      	adds	r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3301      	adds	r3, #1
 8003a92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	3301      	adds	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d3e2      	bcc.n	8003a6e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3724      	adds	r7, #36	; 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b08b      	sub	sp, #44	; 0x2c
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	e014      	b.n	8003b0c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	601a      	str	r2, [r3, #0]
    pDest++;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	3301      	adds	r3, #1
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	3301      	adds	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	3301      	adds	r3, #1
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	3301      	adds	r3, #1
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3e6      	bcc.n	8003ae2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003b14:	8bfb      	ldrh	r3, [r7, #30]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01e      	beq.n	8003b58 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b24:	461a      	mov	r2, r3
 8003b26:	f107 0310 	add.w	r3, r7, #16
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	701a      	strb	r2, [r3, #0]
      i++;
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	3301      	adds	r3, #1
 8003b44:	623b      	str	r3, [r7, #32]
      pDest++;
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	3301      	adds	r3, #1
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003b4c:	8bfb      	ldrh	r3, [r7, #30]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003b52:	8bfb      	ldrh	r3, [r7, #30]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ea      	bne.n	8003b2e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	372c      	adds	r7, #44	; 0x2c
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	785b      	ldrb	r3, [r3, #1]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d12c      	bne.n	8003bdc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	db12      	blt.n	8003bba <USB_EPSetStall+0x54>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00f      	beq.n	8003bba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	0151      	lsls	r1, r2, #5
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	440a      	add	r2, r1
 8003bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bb8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	0151      	lsls	r1, r2, #5
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	440a      	add	r2, r1
 8003bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e02b      	b.n	8003c34 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	db12      	blt.n	8003c14 <USB_EPSetStall+0xae>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00f      	beq.n	8003c14 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	0151      	lsls	r1, r2, #5
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	440a      	add	r2, r1
 8003c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c12:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	0151      	lsls	r1, r2, #5
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	440a      	add	r2, r1
 8003c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	785b      	ldrb	r3, [r3, #1]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d128      	bne.n	8003cb0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	78db      	ldrb	r3, [r3, #3]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d003      	beq.n	8003c8e <USB_EPClearStall+0x4c>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	78db      	ldrb	r3, [r3, #3]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d138      	bne.n	8003d00 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e027      	b.n	8003d00 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d003      	beq.n	8003ce0 <USB_EPClearStall+0x9e>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	78db      	ldrb	r3, [r3, #3]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d10f      	bne.n	8003d00 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	0151      	lsls	r1, r2, #5
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	440a      	add	r2, r1
 8003cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	460b      	mov	r3, r1
 8003d18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d30:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d74:	f023 0303 	bic.w	r3, r3, #3
 8003d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d88:	f023 0302 	bic.w	r3, r3, #2
 8003d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dca:	f043 0302 	orr.w	r3, r3, #2
 8003dce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	4013      	ands	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	0c1b      	lsrs	r3, r3, #16
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	b29b      	uxth	r3, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed8:	01db      	lsls	r3, r3, #7
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f003 0301 	and.w	r3, r3, #1
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f3e:	f023 0307 	bic.w	r3, r3, #7
 8003f42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	460b      	mov	r3, r1
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	333c      	adds	r3, #60	; 0x3c
 8003f7e:	3304      	adds	r3, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4a26      	ldr	r2, [pc, #152]	; (8004020 <USB_EP0_OutStart+0xb8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d90a      	bls.n	8003fa2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f9c:	d101      	bne.n	8003fa2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e037      	b.n	8004012 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2300      	movs	r3, #0
 8003fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd0:	f043 0318 	orr.w	r3, r3, #24
 8003fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003fe8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003fea:	7afb      	ldrb	r3, [r7, #11]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d10f      	bne.n	8004010 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800400e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	4f54300a 	.word	0x4f54300a

08004024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	4a13      	ldr	r2, [pc, #76]	; (8004084 <USB_CoreReset+0x60>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e01a      	b.n	8004076 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	daf3      	bge.n	8004030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f043 0201 	orr.w	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <USB_CoreReset+0x60>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e006      	b.n	8004076 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d0f1      	beq.n	8004058 <USB_CoreReset+0x34>

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	00030d40 	.word	0x00030d40

08004088 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004094:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004098:	f002 f996 	bl	80063c8 <USBD_static_malloc>
 800409c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80040ac:	2302      	movs	r3, #2
 80040ae:	e066      	b.n	800417e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	7c1b      	ldrb	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d119      	bne.n	80040f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040c4:	2202      	movs	r2, #2
 80040c6:	2181      	movs	r1, #129	; 0x81
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f002 f85a 	bl	8006182 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040d8:	2202      	movs	r2, #2
 80040da:	2101      	movs	r1, #1
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f002 f850 	bl	8006182 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2210      	movs	r2, #16
 80040ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80040f2:	e016      	b.n	8004122 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040f4:	2340      	movs	r3, #64	; 0x40
 80040f6:	2202      	movs	r2, #2
 80040f8:	2181      	movs	r1, #129	; 0x81
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f002 f841 	bl	8006182 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004106:	2340      	movs	r3, #64	; 0x40
 8004108:	2202      	movs	r2, #2
 800410a:	2101      	movs	r1, #1
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f002 f838 	bl	8006182 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2210      	movs	r2, #16
 800411e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004122:	2308      	movs	r3, #8
 8004124:	2203      	movs	r2, #3
 8004126:	2182      	movs	r1, #130	; 0x82
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f002 f82a 	bl	8006182 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	7c1b      	ldrb	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800415e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004162:	2101      	movs	r1, #1
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f002 f8fb 	bl	8006360 <USBD_LL_PrepareReceive>
 800416a:	e007      	b.n	800417c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	2101      	movs	r1, #1
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f002 f8f2 	bl	8006360 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004192:	2181      	movs	r1, #129	; 0x81
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f002 f81a 	bl	80061ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80041a0:	2101      	movs	r1, #1
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f002 f813 	bl	80061ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80041b0:	2182      	movs	r1, #130	; 0x82
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f002 f80b 	bl	80061ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00e      	beq.n	80041f0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041e2:	4618      	mov	r0, r3
 80041e4:	f002 f8fe 	bl	80063e4 <USBD_static_free>
    pdev->pClassData = NULL;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800420c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004220:	2303      	movs	r3, #3
 8004222:	e0af      	b.n	8004384 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800422c:	2b00      	cmp	r3, #0
 800422e:	d03f      	beq.n	80042b0 <USBD_CDC_Setup+0xb4>
 8004230:	2b20      	cmp	r3, #32
 8004232:	f040 809f 	bne.w	8004374 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	88db      	ldrh	r3, [r3, #6]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02e      	beq.n	800429c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	b25b      	sxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	da16      	bge.n	8004276 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004254:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	88d2      	ldrh	r2, [r2, #6]
 800425a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	88db      	ldrh	r3, [r3, #6]
 8004260:	2b07      	cmp	r3, #7
 8004262:	bf28      	it	cs
 8004264:	2307      	movcs	r3, #7
 8004266:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	89fa      	ldrh	r2, [r7, #14]
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f001 fae9 	bl	8005846 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004274:	e085      	b.n	8004382 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	785a      	ldrb	r2, [r3, #1]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	88db      	ldrh	r3, [r3, #6]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800428c:	6939      	ldr	r1, [r7, #16]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	88db      	ldrh	r3, [r3, #6]
 8004292:	461a      	mov	r2, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f001 fb02 	bl	800589e <USBD_CtlPrepareRx>
      break;
 800429a:	e072      	b.n	8004382 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	7850      	ldrb	r0, [r2, #1]
 80042a8:	2200      	movs	r2, #0
 80042aa:	6839      	ldr	r1, [r7, #0]
 80042ac:	4798      	blx	r3
      break;
 80042ae:	e068      	b.n	8004382 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b0b      	cmp	r3, #11
 80042b6:	d852      	bhi.n	800435e <USBD_CDC_Setup+0x162>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <USBD_CDC_Setup+0xc4>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042f1 	.word	0x080042f1
 80042c4:	0800436d 	.word	0x0800436d
 80042c8:	0800435f 	.word	0x0800435f
 80042cc:	0800435f 	.word	0x0800435f
 80042d0:	0800435f 	.word	0x0800435f
 80042d4:	0800435f 	.word	0x0800435f
 80042d8:	0800435f 	.word	0x0800435f
 80042dc:	0800435f 	.word	0x0800435f
 80042e0:	0800435f 	.word	0x0800435f
 80042e4:	0800435f 	.word	0x0800435f
 80042e8:	0800431b 	.word	0x0800431b
 80042ec:	08004345 	.word	0x08004345
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d107      	bne.n	800430c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80042fc:	f107 030a 	add.w	r3, r7, #10
 8004300:	2202      	movs	r2, #2
 8004302:	4619      	mov	r1, r3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 fa9e 	bl	8005846 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800430a:	e032      	b.n	8004372 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f001 fa28 	bl	8005764 <USBD_CtlError>
            ret = USBD_FAIL;
 8004314:	2303      	movs	r3, #3
 8004316:	75fb      	strb	r3, [r7, #23]
          break;
 8004318:	e02b      	b.n	8004372 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b03      	cmp	r3, #3
 8004324:	d107      	bne.n	8004336 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004326:	f107 030d 	add.w	r3, r7, #13
 800432a:	2201      	movs	r2, #1
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f001 fa89 	bl	8005846 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004334:	e01d      	b.n	8004372 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f001 fa13 	bl	8005764 <USBD_CtlError>
            ret = USBD_FAIL;
 800433e:	2303      	movs	r3, #3
 8004340:	75fb      	strb	r3, [r7, #23]
          break;
 8004342:	e016      	b.n	8004372 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b03      	cmp	r3, #3
 800434e:	d00f      	beq.n	8004370 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f001 fa06 	bl	8005764 <USBD_CtlError>
            ret = USBD_FAIL;
 8004358:	2303      	movs	r3, #3
 800435a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800435c:	e008      	b.n	8004370 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f001 f9ff 	bl	8005764 <USBD_CtlError>
          ret = USBD_FAIL;
 8004366:	2303      	movs	r3, #3
 8004368:	75fb      	strb	r3, [r7, #23]
          break;
 800436a:	e002      	b.n	8004372 <USBD_CDC_Setup+0x176>
          break;
 800436c:	bf00      	nop
 800436e:	e008      	b.n	8004382 <USBD_CDC_Setup+0x186>
          break;
 8004370:	bf00      	nop
      }
      break;
 8004372:	e006      	b.n	8004382 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f001 f9f4 	bl	8005764 <USBD_CtlError>
      ret = USBD_FAIL;
 800437c:	2303      	movs	r3, #3
 800437e:	75fb      	strb	r3, [r7, #23]
      break;
 8004380:	bf00      	nop
  }

  return (uint8_t)ret;
 8004382:	7dfb      	ldrb	r3, [r7, #23]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800439e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e04f      	b.n	800444e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	3318      	adds	r3, #24
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d029      	beq.n	8004420 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	3318      	adds	r3, #24
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	78f9      	ldrb	r1, [r7, #3]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	460b      	mov	r3, r1
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	1a5b      	subs	r3, r3, r1
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4403      	add	r3, r0
 80043ec:	3344      	adds	r3, #68	; 0x44
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d110      	bne.n	8004420 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3318      	adds	r3, #24
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004412:	78f9      	ldrb	r1, [r7, #3]
 8004414:	2300      	movs	r3, #0
 8004416:	2200      	movs	r2, #0
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 ff80 	bl	800631e <USBD_LL_Transmit>
 800441e:	e015      	b.n	800444c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00b      	beq.n	800444c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004468:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004474:	2303      	movs	r3, #3
 8004476:	e015      	b.n	80044a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f001 ff90 	bl	80063a2 <USBD_LL_GetRxDataSize>
 8004482:	4602      	mov	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800449e:	4611      	mov	r1, r2
 80044a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e01b      	b.n	80044fe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d015      	beq.n	80044fc <USBD_CDC_EP0_RxReady+0x50>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80044d6:	2bff      	cmp	r3, #255	; 0xff
 80044d8:	d010      	beq.n	80044fc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80044e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80044f0:	b292      	uxth	r2, r2
 80044f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	22ff      	movs	r2, #255	; 0xff
 80044f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2243      	movs	r2, #67	; 0x43
 8004514:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004516:	4b03      	ldr	r3, [pc, #12]	; (8004524 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	20000094 	.word	0x20000094

08004528 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2243      	movs	r2, #67	; 0x43
 8004534:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004536:	4b03      	ldr	r3, [pc, #12]	; (8004544 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	20000050 	.word	0x20000050

08004548 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2243      	movs	r2, #67	; 0x43
 8004554:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004556:	4b03      	ldr	r3, [pc, #12]	; (8004564 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	200000d8 	.word	0x200000d8

08004568 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	220a      	movs	r2, #10
 8004574:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004576:	4b03      	ldr	r3, [pc, #12]	; (8004584 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	2000000c 	.word	0x2000000c

08004588 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004598:	2303      	movs	r3, #3
 800459a:	e004      	b.n	80045a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b087      	sub	sp, #28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045c4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e008      	b.n	80045e2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b085      	sub	sp, #20
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004606:	2303      	movs	r3, #3
 8004608:	e004      	b.n	8004614 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800462e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800463a:	2303      	movs	r3, #3
 800463c:	e016      	b.n	800466c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	7c1b      	ldrb	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800464c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004650:	2101      	movs	r1, #1
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f001 fe84 	bl	8006360 <USBD_LL_PrepareReceive>
 8004658:	e007      	b.n	800466a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004660:	2340      	movs	r3, #64	; 0x40
 8004662:	2101      	movs	r1, #1
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 fe7b 	bl	8006360 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004688:	2303      	movs	r3, #3
 800468a:	e01f      	b.n	80046cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	79fa      	ldrb	r2, [r7, #7]
 80046be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f001 fcf7 	bl	80060b4 <USBD_LL_Init>
 80046c6:	4603      	mov	r3, r0
 80046c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e016      	b.n	800471a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00b      	beq.n	8004718 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	f107 020e 	add.w	r2, r7, #14
 800470c:	4610      	mov	r0, r2
 800470e:	4798      	blx	r3
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f001 fd0e 	bl	800614c <USBD_LL_Start>
 8004730:	4603      	mov	r3, r0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800475c:	2303      	movs	r3, #3
 800475e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	4611      	mov	r1, r2
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
 800477a:	4603      	mov	r3, r0
 800477c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800477e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	78fa      	ldrb	r2, [r7, #3]
 80047a8:	4611      	mov	r1, r2
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	4798      	blx	r3
  }

  return USBD_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 ff90 	bl	80056f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d01a      	beq.n	800482a <USBD_LL_SetupStage+0x72>
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d822      	bhi.n	800483e <USBD_LL_SetupStage+0x86>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <USBD_LL_SetupStage+0x4a>
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d00a      	beq.n	8004816 <USBD_LL_SetupStage+0x5e>
 8004800:	e01d      	b.n	800483e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004808:	4619      	mov	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa62 	bl	8004cd4 <USBD_StdDevReq>
 8004810:	4603      	mov	r3, r0
 8004812:	73fb      	strb	r3, [r7, #15]
      break;
 8004814:	e020      	b.n	8004858 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fac6 	bl	8004db0 <USBD_StdItfReq>
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]
      break;
 8004828:	e016      	b.n	8004858 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fb05 	bl	8004e42 <USBD_StdEPReq>
 8004838:	4603      	mov	r3, r0
 800483a:	73fb      	strb	r3, [r7, #15]
      break;
 800483c:	e00c      	b.n	8004858 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004844:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004848:	b2db      	uxtb	r3, r3
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f001 fcdd 	bl	800620c <USBD_LL_StallEP>
 8004852:	4603      	mov	r3, r0
 8004854:	73fb      	strb	r3, [r7, #15]
      break;
 8004856:	bf00      	nop
  }

  return ret;
 8004858:	7bfb      	ldrb	r3, [r7, #15]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	460b      	mov	r3, r1
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004870:	7afb      	ldrb	r3, [r7, #11]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d138      	bne.n	80048e8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800487c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004884:	2b03      	cmp	r3, #3
 8004886:	d14a      	bne.n	800491e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	429a      	cmp	r2, r3
 8004892:	d913      	bls.n	80048bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	1ad2      	subs	r2, r2, r3
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4293      	cmp	r3, r2
 80048ac:	bf28      	it	cs
 80048ae:	4613      	movcs	r3, r2
 80048b0:	461a      	mov	r2, r3
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f001 f80f 	bl	80058d8 <USBD_CtlContinueRx>
 80048ba:	e030      	b.n	800491e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d10b      	bne.n	80048e0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f001 f80a 	bl	80058fa <USBD_CtlSendStatus>
 80048e6:	e01a      	b.n	800491e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d114      	bne.n	800491e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00e      	beq.n	800491e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	7afa      	ldrb	r2, [r7, #11]
 800490a:	4611      	mov	r1, r2
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	4798      	blx	r3
 8004910:	4603      	mov	r3, r0
 8004912:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004914:	7dfb      	ldrb	r3, [r7, #23]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	e000      	b.n	8004920 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	460b      	mov	r3, r1
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004936:	7afb      	ldrb	r3, [r7, #11]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d16b      	bne.n	8004a14 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3314      	adds	r3, #20
 8004940:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004948:	2b02      	cmp	r3, #2
 800494a:	d156      	bne.n	80049fa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	429a      	cmp	r2, r3
 8004956:	d914      	bls.n	8004982 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	1ad2      	subs	r2, r2, r3
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	461a      	mov	r2, r3
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 ff84 	bl	800587c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004974:	2300      	movs	r3, #0
 8004976:	2200      	movs	r2, #0
 8004978:	2100      	movs	r1, #0
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f001 fcf0 	bl	8006360 <USBD_LL_PrepareReceive>
 8004980:	e03b      	b.n	80049fa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	429a      	cmp	r2, r3
 800498c:	d11c      	bne.n	80049c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004996:	429a      	cmp	r2, r3
 8004998:	d316      	bcc.n	80049c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d20f      	bcs.n	80049c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80049a8:	2200      	movs	r2, #0
 80049aa:	2100      	movs	r1, #0
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 ff65 	bl	800587c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049ba:	2300      	movs	r3, #0
 80049bc:	2200      	movs	r2, #0
 80049be:	2100      	movs	r1, #0
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f001 fccd 	bl	8006360 <USBD_LL_PrepareReceive>
 80049c6:	e018      	b.n	80049fa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d10b      	bne.n	80049ec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80049ec:	2180      	movs	r1, #128	; 0x80
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f001 fc0c 	bl	800620c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 ff93 	bl	8005920 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d122      	bne.n	8004a4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff fe98 	bl	800473a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a12:	e01a      	b.n	8004a4a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d114      	bne.n	8004a4a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00e      	beq.n	8004a4a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	7afa      	ldrb	r2, [r7, #11]
 8004a36:	4611      	mov	r1, r2
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	4798      	blx	r3
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	e000      	b.n	8004a4c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e02f      	b.n	8004ae8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00f      	beq.n	8004ab2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6852      	ldr	r2, [r2, #4]
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	4611      	mov	r1, r2
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f001 fb62 	bl	8006182 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2240      	movs	r2, #64	; 0x40
 8004aca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ace:	2340      	movs	r3, #64	; 0x40
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2180      	movs	r1, #128	; 0x80
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f001 fb54 	bl	8006182 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2240      	movs	r2, #64	; 0x40
 8004ae4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d106      	bne.n	8004b5e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e012      	b.n	8004ba8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d10b      	bne.n	8004ba6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e014      	b.n	8004bf4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d10d      	bne.n	8004bf2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	4611      	mov	r1, r2
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e014      	b.n	8004c40 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d10d      	bne.n	8004c3e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d009      	beq.n	8004c8c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6852      	ldr	r2, [r2, #4]
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	4611      	mov	r1, r2
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
  }

  return USBD_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b087      	sub	sp, #28
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	3301      	adds	r3, #1
 8004cac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004cb4:	8a3b      	ldrh	r3, [r7, #16]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	b21a      	sxth	r2, r3
 8004cba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	b21b      	sxth	r3, r3
 8004cc2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004cc4:	89fb      	ldrh	r3, [r7, #14]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d005      	beq.n	8004cfa <USBD_StdDevReq+0x26>
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d853      	bhi.n	8004d9a <USBD_StdDevReq+0xc6>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00b      	beq.n	8004d0e <USBD_StdDevReq+0x3a>
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d14f      	bne.n	8004d9a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0c:	e04a      	b.n	8004da4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	785b      	ldrb	r3, [r3, #1]
 8004d12:	2b09      	cmp	r3, #9
 8004d14:	d83b      	bhi.n	8004d8e <USBD_StdDevReq+0xba>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <USBD_StdDevReq+0x48>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d71 	.word	0x08004d71
 8004d20:	08004d85 	.word	0x08004d85
 8004d24:	08004d8f 	.word	0x08004d8f
 8004d28:	08004d7b 	.word	0x08004d7b
 8004d2c:	08004d8f 	.word	0x08004d8f
 8004d30:	08004d4f 	.word	0x08004d4f
 8004d34:	08004d45 	.word	0x08004d45
 8004d38:	08004d8f 	.word	0x08004d8f
 8004d3c:	08004d67 	.word	0x08004d67
 8004d40:	08004d59 	.word	0x08004d59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f9de 	bl	8005108 <USBD_GetDescriptor>
          break;
 8004d4c:	e024      	b.n	8004d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fb43 	bl	80053dc <USBD_SetAddress>
          break;
 8004d56:	e01f      	b.n	8004d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fb82 	bl	8005464 <USBD_SetConfig>
 8004d60:	4603      	mov	r3, r0
 8004d62:	73fb      	strb	r3, [r7, #15]
          break;
 8004d64:	e018      	b.n	8004d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fc21 	bl	80055b0 <USBD_GetConfig>
          break;
 8004d6e:	e013      	b.n	8004d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004d70:	6839      	ldr	r1, [r7, #0]
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fc52 	bl	800561c <USBD_GetStatus>
          break;
 8004d78:	e00e      	b.n	8004d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004d7a:	6839      	ldr	r1, [r7, #0]
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fc81 	bl	8005684 <USBD_SetFeature>
          break;
 8004d82:	e009      	b.n	8004d98 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fc90 	bl	80056ac <USBD_ClrFeature>
          break;
 8004d8c:	e004      	b.n	8004d98 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004d8e:	6839      	ldr	r1, [r7, #0]
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fce7 	bl	8005764 <USBD_CtlError>
          break;
 8004d96:	bf00      	nop
      }
      break;
 8004d98:	e004      	b.n	8004da4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004d9a:	6839      	ldr	r1, [r7, #0]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fce1 	bl	8005764 <USBD_CtlError>
      break;
 8004da2:	bf00      	nop
  }

  return ret;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop

08004db0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d005      	beq.n	8004dd6 <USBD_StdItfReq+0x26>
 8004dca:	2b40      	cmp	r3, #64	; 0x40
 8004dcc:	d82f      	bhi.n	8004e2e <USBD_StdItfReq+0x7e>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <USBD_StdItfReq+0x26>
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d12b      	bne.n	8004e2e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d81d      	bhi.n	8004e20 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	889b      	ldrh	r3, [r3, #4]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d813      	bhi.n	8004e16 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	6839      	ldr	r1, [r7, #0]
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	88db      	ldrh	r3, [r3, #6]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d110      	bne.n	8004e2a <USBD_StdItfReq+0x7a>
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10d      	bne.n	8004e2a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fd73 	bl	80058fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004e14:	e009      	b.n	8004e2a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fca3 	bl	8005764 <USBD_CtlError>
          break;
 8004e1e:	e004      	b.n	8004e2a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fc9e 	bl	8005764 <USBD_CtlError>
          break;
 8004e28:	e000      	b.n	8004e2c <USBD_StdItfReq+0x7c>
          break;
 8004e2a:	bf00      	nop
      }
      break;
 8004e2c:	e004      	b.n	8004e38 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fc97 	bl	8005764 <USBD_CtlError>
      break;
 8004e36:	bf00      	nop
  }

  return ret;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	889b      	ldrh	r3, [r3, #4]
 8004e54:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d007      	beq.n	8004e72 <USBD_StdEPReq+0x30>
 8004e62:	2b40      	cmp	r3, #64	; 0x40
 8004e64:	f200 8145 	bhi.w	80050f2 <USBD_StdEPReq+0x2b0>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00c      	beq.n	8004e86 <USBD_StdEPReq+0x44>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	f040 8140 	bne.w	80050f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	e13a      	b.n	80050fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d007      	beq.n	8004e9e <USBD_StdEPReq+0x5c>
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	f300 8129 	bgt.w	80050e6 <USBD_StdEPReq+0x2a4>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d07f      	beq.n	8004f98 <USBD_StdEPReq+0x156>
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d03c      	beq.n	8004f16 <USBD_StdEPReq+0xd4>
 8004e9c:	e123      	b.n	80050e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d002      	beq.n	8004eb0 <USBD_StdEPReq+0x6e>
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d016      	beq.n	8004edc <USBD_StdEPReq+0x9a>
 8004eae:	e02c      	b.n	8004f0a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00d      	beq.n	8004ed2 <USBD_StdEPReq+0x90>
 8004eb6:	7bbb      	ldrb	r3, [r7, #14]
 8004eb8:	2b80      	cmp	r3, #128	; 0x80
 8004eba:	d00a      	beq.n	8004ed2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ebc:	7bbb      	ldrb	r3, [r7, #14]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f001 f9a3 	bl	800620c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 f99f 	bl	800620c <USBD_LL_StallEP>
 8004ece:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004ed0:	e020      	b.n	8004f14 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004ed2:	6839      	ldr	r1, [r7, #0]
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fc45 	bl	8005764 <USBD_CtlError>
              break;
 8004eda:	e01b      	b.n	8004f14 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	885b      	ldrh	r3, [r3, #2]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10e      	bne.n	8004f02 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <USBD_StdEPReq+0xc0>
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	2b80      	cmp	r3, #128	; 0x80
 8004eee:	d008      	beq.n	8004f02 <USBD_StdEPReq+0xc0>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	88db      	ldrh	r3, [r3, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ef8:	7bbb      	ldrb	r3, [r7, #14]
 8004efa:	4619      	mov	r1, r3
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f001 f985 	bl	800620c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fcf9 	bl	80058fa <USBD_CtlSendStatus>

              break;
 8004f08:	e004      	b.n	8004f14 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fc29 	bl	8005764 <USBD_CtlError>
              break;
 8004f12:	bf00      	nop
          }
          break;
 8004f14:	e0ec      	b.n	80050f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d002      	beq.n	8004f28 <USBD_StdEPReq+0xe6>
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d016      	beq.n	8004f54 <USBD_StdEPReq+0x112>
 8004f26:	e030      	b.n	8004f8a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f28:	7bbb      	ldrb	r3, [r7, #14]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00d      	beq.n	8004f4a <USBD_StdEPReq+0x108>
 8004f2e:	7bbb      	ldrb	r3, [r7, #14]
 8004f30:	2b80      	cmp	r3, #128	; 0x80
 8004f32:	d00a      	beq.n	8004f4a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f34:	7bbb      	ldrb	r3, [r7, #14]
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f001 f967 	bl	800620c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f3e:	2180      	movs	r1, #128	; 0x80
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 f963 	bl	800620c <USBD_LL_StallEP>
 8004f46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004f48:	e025      	b.n	8004f96 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fc09 	bl	8005764 <USBD_CtlError>
              break;
 8004f52:	e020      	b.n	8004f96 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	885b      	ldrh	r3, [r3, #2]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d11b      	bne.n	8004f94 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004f5c:	7bbb      	ldrb	r3, [r7, #14]
 8004f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004f66:	7bbb      	ldrb	r3, [r7, #14]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 f96d 	bl	800624a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fcc2 	bl	80058fa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4798      	blx	r3
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004f88:	e004      	b.n	8004f94 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fbe9 	bl	8005764 <USBD_CtlError>
              break;
 8004f92:	e000      	b.n	8004f96 <USBD_StdEPReq+0x154>
              break;
 8004f94:	bf00      	nop
          }
          break;
 8004f96:	e0ab      	b.n	80050f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d002      	beq.n	8004faa <USBD_StdEPReq+0x168>
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d032      	beq.n	800500e <USBD_StdEPReq+0x1cc>
 8004fa8:	e097      	b.n	80050da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004faa:	7bbb      	ldrb	r3, [r7, #14]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <USBD_StdEPReq+0x17e>
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d004      	beq.n	8004fc0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fbd3 	bl	8005764 <USBD_CtlError>
                break;
 8004fbe:	e091      	b.n	80050e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da0b      	bge.n	8004fe0 <USBD_StdEPReq+0x19e>
 8004fc8:	7bbb      	ldrb	r3, [r7, #14]
 8004fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	3310      	adds	r3, #16
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4413      	add	r3, r2
 8004fdc:	3304      	adds	r3, #4
 8004fde:	e00b      	b.n	8004ff8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004fe0:	7bbb      	ldrb	r3, [r7, #14]
 8004fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2202      	movs	r2, #2
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fc1d 	bl	8005846 <USBD_CtlSendData>
              break;
 800500c:	e06a      	b.n	80050e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800500e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005012:	2b00      	cmp	r3, #0
 8005014:	da11      	bge.n	800503a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005016:	7bbb      	ldrb	r3, [r7, #14]
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	3324      	adds	r3, #36	; 0x24
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d117      	bne.n	8005060 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005030:	6839      	ldr	r1, [r7, #0]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fb96 	bl	8005764 <USBD_CtlError>
                  break;
 8005038:	e054      	b.n	80050e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800503a:	7bbb      	ldrb	r3, [r7, #14]
 800503c:	f003 020f 	and.w	r2, r3, #15
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005056:	6839      	ldr	r1, [r7, #0]
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fb83 	bl	8005764 <USBD_CtlError>
                  break;
 800505e:	e041      	b.n	80050e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005064:	2b00      	cmp	r3, #0
 8005066:	da0b      	bge.n	8005080 <USBD_StdEPReq+0x23e>
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	3310      	adds	r3, #16
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4413      	add	r3, r2
 800507c:	3304      	adds	r3, #4
 800507e:	e00b      	b.n	8005098 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	3304      	adds	r3, #4
 8005098:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800509a:	7bbb      	ldrb	r3, [r7, #14]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <USBD_StdEPReq+0x264>
 80050a0:	7bbb      	ldrb	r3, [r7, #14]
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	d103      	bne.n	80050ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e00e      	b.n	80050cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80050ae:	7bbb      	ldrb	r3, [r7, #14]
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f001 f8e8 	bl	8006288 <USBD_LL_IsStallEP>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2201      	movs	r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e002      	b.n	80050cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2202      	movs	r2, #2
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fbb7 	bl	8005846 <USBD_CtlSendData>
              break;
 80050d8:	e004      	b.n	80050e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fb41 	bl	8005764 <USBD_CtlError>
              break;
 80050e2:	bf00      	nop
          }
          break;
 80050e4:	e004      	b.n	80050f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fb3b 	bl	8005764 <USBD_CtlError>
          break;
 80050ee:	bf00      	nop
      }
      break;
 80050f0:	e004      	b.n	80050fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80050f2:	6839      	ldr	r1, [r7, #0]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fb35 	bl	8005764 <USBD_CtlError>
      break;
 80050fa:	bf00      	nop
  }

  return ret;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	885b      	ldrh	r3, [r3, #2]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	2b06      	cmp	r3, #6
 800512a:	f200 8128 	bhi.w	800537e <USBD_GetDescriptor+0x276>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <USBD_GetDescriptor+0x2c>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005151 	.word	0x08005151
 8005138:	08005169 	.word	0x08005169
 800513c:	080051a9 	.word	0x080051a9
 8005140:	0800537f 	.word	0x0800537f
 8005144:	0800537f 	.word	0x0800537f
 8005148:	0800531f 	.word	0x0800531f
 800514c:	0800534b 	.word	0x0800534b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	7c12      	ldrb	r2, [r2, #16]
 800515c:	f107 0108 	add.w	r1, r7, #8
 8005160:	4610      	mov	r0, r2
 8005162:	4798      	blx	r3
 8005164:	60f8      	str	r0, [r7, #12]
      break;
 8005166:	e112      	b.n	800538e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7c1b      	ldrb	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10d      	bne.n	800518c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	f107 0208 	add.w	r2, r7, #8
 800517c:	4610      	mov	r0, r2
 800517e:	4798      	blx	r3
 8005180:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3301      	adds	r3, #1
 8005186:	2202      	movs	r2, #2
 8005188:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800518a:	e100      	b.n	800538e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	f107 0208 	add.w	r2, r7, #8
 8005198:	4610      	mov	r0, r2
 800519a:	4798      	blx	r3
 800519c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	2202      	movs	r2, #2
 80051a4:	701a      	strb	r2, [r3, #0]
      break;
 80051a6:	e0f2      	b.n	800538e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	885b      	ldrh	r3, [r3, #2]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	f200 80ac 	bhi.w	800530c <USBD_GetDescriptor+0x204>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <USBD_GetDescriptor+0xb4>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	080051d5 	.word	0x080051d5
 80051c0:	08005209 	.word	0x08005209
 80051c4:	0800523d 	.word	0x0800523d
 80051c8:	08005271 	.word	0x08005271
 80051cc:	080052a5 	.word	0x080052a5
 80051d0:	080052d9 	.word	0x080052d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	7c12      	ldrb	r2, [r2, #16]
 80051ec:	f107 0108 	add.w	r1, r7, #8
 80051f0:	4610      	mov	r0, r2
 80051f2:	4798      	blx	r3
 80051f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051f6:	e091      	b.n	800531c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fab2 	bl	8005764 <USBD_CtlError>
            err++;
 8005200:	7afb      	ldrb	r3, [r7, #11]
 8005202:	3301      	adds	r3, #1
 8005204:	72fb      	strb	r3, [r7, #11]
          break;
 8005206:	e089      	b.n	800531c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	7c12      	ldrb	r2, [r2, #16]
 8005220:	f107 0108 	add.w	r1, r7, #8
 8005224:	4610      	mov	r0, r2
 8005226:	4798      	blx	r3
 8005228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800522a:	e077      	b.n	800531c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fa98 	bl	8005764 <USBD_CtlError>
            err++;
 8005234:	7afb      	ldrb	r3, [r7, #11]
 8005236:	3301      	adds	r3, #1
 8005238:	72fb      	strb	r3, [r7, #11]
          break;
 800523a:	e06f      	b.n	800531c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	7c12      	ldrb	r2, [r2, #16]
 8005254:	f107 0108 	add.w	r1, r7, #8
 8005258:	4610      	mov	r0, r2
 800525a:	4798      	blx	r3
 800525c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800525e:	e05d      	b.n	800531c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa7e 	bl	8005764 <USBD_CtlError>
            err++;
 8005268:	7afb      	ldrb	r3, [r7, #11]
 800526a:	3301      	adds	r3, #1
 800526c:	72fb      	strb	r3, [r7, #11]
          break;
 800526e:	e055      	b.n	800531c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	7c12      	ldrb	r2, [r2, #16]
 8005288:	f107 0108 	add.w	r1, r7, #8
 800528c:	4610      	mov	r0, r2
 800528e:	4798      	blx	r3
 8005290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005292:	e043      	b.n	800531c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005294:	6839      	ldr	r1, [r7, #0]
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa64 	bl	8005764 <USBD_CtlError>
            err++;
 800529c:	7afb      	ldrb	r3, [r7, #11]
 800529e:	3301      	adds	r3, #1
 80052a0:	72fb      	strb	r3, [r7, #11]
          break;
 80052a2:	e03b      	b.n	800531c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	7c12      	ldrb	r2, [r2, #16]
 80052bc:	f107 0108 	add.w	r1, r7, #8
 80052c0:	4610      	mov	r0, r2
 80052c2:	4798      	blx	r3
 80052c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052c6:	e029      	b.n	800531c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fa4a 	bl	8005764 <USBD_CtlError>
            err++;
 80052d0:	7afb      	ldrb	r3, [r7, #11]
 80052d2:	3301      	adds	r3, #1
 80052d4:	72fb      	strb	r3, [r7, #11]
          break;
 80052d6:	e021      	b.n	800531c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	7c12      	ldrb	r2, [r2, #16]
 80052f0:	f107 0108 	add.w	r1, r7, #8
 80052f4:	4610      	mov	r0, r2
 80052f6:	4798      	blx	r3
 80052f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052fa:	e00f      	b.n	800531c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052fc:	6839      	ldr	r1, [r7, #0]
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fa30 	bl	8005764 <USBD_CtlError>
            err++;
 8005304:	7afb      	ldrb	r3, [r7, #11]
 8005306:	3301      	adds	r3, #1
 8005308:	72fb      	strb	r3, [r7, #11]
          break;
 800530a:	e007      	b.n	800531c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa28 	bl	8005764 <USBD_CtlError>
          err++;
 8005314:	7afb      	ldrb	r3, [r7, #11]
 8005316:	3301      	adds	r3, #1
 8005318:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800531a:	bf00      	nop
      }
      break;
 800531c:	e037      	b.n	800538e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	7c1b      	ldrb	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	f107 0208 	add.w	r2, r7, #8
 8005332:	4610      	mov	r0, r2
 8005334:	4798      	blx	r3
 8005336:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005338:	e029      	b.n	800538e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fa11 	bl	8005764 <USBD_CtlError>
        err++;
 8005342:	7afb      	ldrb	r3, [r7, #11]
 8005344:	3301      	adds	r3, #1
 8005346:	72fb      	strb	r3, [r7, #11]
      break;
 8005348:	e021      	b.n	800538e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7c1b      	ldrb	r3, [r3, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10d      	bne.n	800536e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f107 0208 	add.w	r2, r7, #8
 800535e:	4610      	mov	r0, r2
 8005360:	4798      	blx	r3
 8005362:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	2207      	movs	r2, #7
 800536a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800536c:	e00f      	b.n	800538e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800536e:	6839      	ldr	r1, [r7, #0]
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f9f7 	bl	8005764 <USBD_CtlError>
        err++;
 8005376:	7afb      	ldrb	r3, [r7, #11]
 8005378:	3301      	adds	r3, #1
 800537a:	72fb      	strb	r3, [r7, #11]
      break;
 800537c:	e007      	b.n	800538e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f9ef 	bl	8005764 <USBD_CtlError>
      err++;
 8005386:	7afb      	ldrb	r3, [r7, #11]
 8005388:	3301      	adds	r3, #1
 800538a:	72fb      	strb	r3, [r7, #11]
      break;
 800538c:	bf00      	nop
  }

  if (err != 0U)
 800538e:	7afb      	ldrb	r3, [r7, #11]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d11e      	bne.n	80053d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	88db      	ldrh	r3, [r3, #6]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d016      	beq.n	80053ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800539c:	893b      	ldrh	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00e      	beq.n	80053c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	88da      	ldrh	r2, [r3, #6]
 80053a6:	893b      	ldrh	r3, [r7, #8]
 80053a8:	4293      	cmp	r3, r2
 80053aa:	bf28      	it	cs
 80053ac:	4613      	movcs	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80053b2:	893b      	ldrh	r3, [r7, #8]
 80053b4:	461a      	mov	r2, r3
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa44 	bl	8005846 <USBD_CtlSendData>
 80053be:	e009      	b.n	80053d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f9ce 	bl	8005764 <USBD_CtlError>
 80053c8:	e004      	b.n	80053d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fa95 	bl	80058fa <USBD_CtlSendStatus>
 80053d0:	e000      	b.n	80053d4 <USBD_GetDescriptor+0x2cc>
    return;
 80053d2:	bf00      	nop
  }
}
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop

080053dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	889b      	ldrh	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d131      	bne.n	8005452 <USBD_SetAddress+0x76>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	88db      	ldrh	r3, [r3, #6]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d12d      	bne.n	8005452 <USBD_SetAddress+0x76>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	885b      	ldrh	r3, [r3, #2]
 80053fa:	2b7f      	cmp	r3, #127	; 0x7f
 80053fc:	d829      	bhi.n	8005452 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	885b      	ldrh	r3, [r3, #2]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005408:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b03      	cmp	r3, #3
 8005414:	d104      	bne.n	8005420 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005416:	6839      	ldr	r1, [r7, #0]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f9a3 	bl	8005764 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800541e:	e01d      	b.n	800545c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	7bfa      	ldrb	r2, [r7, #15]
 8005424:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 ff57 	bl	80062e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa61 	bl	80058fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005446:	e009      	b.n	800545c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005450:	e004      	b.n	800545c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f985 	bl	8005764 <USBD_CtlError>
  }
}
 800545a:	bf00      	nop
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	885b      	ldrh	r3, [r3, #2]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	4b4c      	ldr	r3, [pc, #304]	; (80055ac <USBD_SetConfig+0x148>)
 800547a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800547c:	4b4b      	ldr	r3, [pc, #300]	; (80055ac <USBD_SetConfig+0x148>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d905      	bls.n	8005490 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f96c 	bl	8005764 <USBD_CtlError>
    return USBD_FAIL;
 800548c:	2303      	movs	r3, #3
 800548e:	e088      	b.n	80055a2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d002      	beq.n	80054a2 <USBD_SetConfig+0x3e>
 800549c:	2b03      	cmp	r3, #3
 800549e:	d025      	beq.n	80054ec <USBD_SetConfig+0x88>
 80054a0:	e071      	b.n	8005586 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80054a2:	4b42      	ldr	r3, [pc, #264]	; (80055ac <USBD_SetConfig+0x148>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01c      	beq.n	80054e4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80054aa:	4b40      	ldr	r3, [pc, #256]	; (80055ac <USBD_SetConfig+0x148>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80054b4:	4b3d      	ldr	r3, [pc, #244]	; (80055ac <USBD_SetConfig+0x148>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff f948 	bl	8004750 <USBD_SetClassConfig>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d004      	beq.n	80054d4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f949 	bl	8005764 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80054d2:	e065      	b.n	80055a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa10 	bl	80058fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2203      	movs	r2, #3
 80054de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80054e2:	e05d      	b.n	80055a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa08 	bl	80058fa <USBD_CtlSendStatus>
      break;
 80054ea:	e059      	b.n	80055a0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80054ec:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <USBD_SetConfig+0x148>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d112      	bne.n	800551a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80054fc:	4b2b      	ldr	r3, [pc, #172]	; (80055ac <USBD_SetConfig+0x148>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005506:	4b29      	ldr	r3, [pc, #164]	; (80055ac <USBD_SetConfig+0x148>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff f93b 	bl	8004788 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9f1 	bl	80058fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005518:	e042      	b.n	80055a0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800551a:	4b24      	ldr	r3, [pc, #144]	; (80055ac <USBD_SetConfig+0x148>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d02a      	beq.n	800557e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff f929 	bl	8004788 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005536:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <USBD_SetConfig+0x148>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <USBD_SetConfig+0x148>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff f902 	bl	8004750 <USBD_SetClassConfig>
 800554c:	4603      	mov	r3, r0
 800554e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00f      	beq.n	8005576 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f903 	bl	8005764 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff f90e 	bl	8004788 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005574:	e014      	b.n	80055a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f9bf 	bl	80058fa <USBD_CtlSendStatus>
      break;
 800557c:	e010      	b.n	80055a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f9bb 	bl	80058fa <USBD_CtlSendStatus>
      break;
 8005584:	e00c      	b.n	80055a0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f8eb 	bl	8005764 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800558e:	4b07      	ldr	r3, [pc, #28]	; (80055ac <USBD_SetConfig+0x148>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff f8f7 	bl	8004788 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800559a:	2303      	movs	r3, #3
 800559c:	73fb      	strb	r3, [r7, #15]
      break;
 800559e:	bf00      	nop
  }

  return ret;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	200001ac 	.word	0x200001ac

080055b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	88db      	ldrh	r3, [r3, #6]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d004      	beq.n	80055cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8cd 	bl	8005764 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80055ca:	e023      	b.n	8005614 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	dc02      	bgt.n	80055de <USBD_GetConfig+0x2e>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dc03      	bgt.n	80055e4 <USBD_GetConfig+0x34>
 80055dc:	e015      	b.n	800560a <USBD_GetConfig+0x5a>
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d00b      	beq.n	80055fa <USBD_GetConfig+0x4a>
 80055e2:	e012      	b.n	800560a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3308      	adds	r3, #8
 80055ee:	2201      	movs	r2, #1
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f927 	bl	8005846 <USBD_CtlSendData>
        break;
 80055f8:	e00c      	b.n	8005614 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3304      	adds	r3, #4
 80055fe:	2201      	movs	r2, #1
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f91f 	bl	8005846 <USBD_CtlSendData>
        break;
 8005608:	e004      	b.n	8005614 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f8a9 	bl	8005764 <USBD_CtlError>
        break;
 8005612:	bf00      	nop
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800562c:	b2db      	uxtb	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	2b02      	cmp	r3, #2
 8005632:	d81e      	bhi.n	8005672 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	88db      	ldrh	r3, [r3, #6]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d004      	beq.n	8005646 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f890 	bl	8005764 <USBD_CtlError>
        break;
 8005644:	e01a      	b.n	800567c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f043 0202 	orr.w	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	330c      	adds	r3, #12
 8005666:	2202      	movs	r2, #2
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8eb 	bl	8005846 <USBD_CtlSendData>
      break;
 8005670:	e004      	b.n	800567c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f875 	bl	8005764 <USBD_CtlError>
      break;
 800567a:	bf00      	nop
  }
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	885b      	ldrh	r3, [r3, #2]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d106      	bne.n	80056a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f92b 	bl	80058fa <USBD_CtlSendStatus>
  }
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d80b      	bhi.n	80056dc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	885b      	ldrh	r3, [r3, #2]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d10c      	bne.n	80056e6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f910 	bl	80058fa <USBD_CtlSendStatus>
      }
      break;
 80056da:	e004      	b.n	80056e6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f840 	bl	8005764 <USBD_CtlError>
      break;
 80056e4:	e000      	b.n	80056e8 <USBD_ClrFeature+0x3c>
      break;
 80056e6:	bf00      	nop
  }
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	781a      	ldrb	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3301      	adds	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff fabb 	bl	8004c96 <SWAPBYTE>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff faae 	bl	8004c96 <SWAPBYTE>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3301      	adds	r3, #1
 800574c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff faa1 	bl	8004c96 <SWAPBYTE>
 8005754:	4603      	mov	r3, r0
 8005756:	461a      	mov	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	80da      	strh	r2, [r3, #6]
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800576e:	2180      	movs	r1, #128	; 0x80
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fd4b 	bl	800620c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005776:	2100      	movs	r1, #0
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fd47 	bl	800620c <USBD_LL_StallEP>
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d036      	beq.n	800580a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80057a0:	6938      	ldr	r0, [r7, #16]
 80057a2:	f000 f836 	bl	8005812 <USBD_GetLen>
 80057a6:	4603      	mov	r3, r0
 80057a8:	3301      	adds	r3, #1
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4413      	add	r3, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	701a      	strb	r2, [r3, #0]
  idx++;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	3301      	adds	r3, #1
 80057c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80057c6:	7dfb      	ldrb	r3, [r7, #23]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	4413      	add	r3, r2
 80057cc:	2203      	movs	r2, #3
 80057ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
 80057d2:	3301      	adds	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80057d6:	e013      	b.n	8005800 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	4413      	add	r3, r2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	7812      	ldrb	r2, [r2, #0]
 80057e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	3301      	adds	r3, #1
 80057e8:	613b      	str	r3, [r7, #16]
    idx++;
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	3301      	adds	r3, #1
 80057ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	4413      	add	r3, r2
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
    idx++;
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	3301      	adds	r3, #1
 80057fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e7      	bne.n	80057d8 <USBD_GetString+0x52>
 8005808:	e000      	b.n	800580c <USBD_GetString+0x86>
    return;
 800580a:	bf00      	nop
  }
}
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005822:	e005      	b.n	8005830 <USBD_GetLen+0x1e>
  {
    len++;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	3301      	adds	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	3301      	adds	r3, #1
 800582e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f5      	bne.n	8005824 <USBD_GetLen+0x12>
  }

  return len;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2202      	movs	r2, #2
 8005856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	2100      	movs	r1, #0
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fd56 	bl	800631e <USBD_LL_Transmit>

  return USBD_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	2100      	movs	r1, #0
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fd45 	bl	800631e <USBD_LL_Transmit>

  return USBD_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2203      	movs	r2, #3
 80058ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	2100      	movs	r1, #0
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fd49 	bl	8006360 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	2100      	movs	r1, #0
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fd38 	bl	8006360 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2204      	movs	r2, #4
 8005906:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800590a:	2300      	movs	r3, #0
 800590c:	2200      	movs	r2, #0
 800590e:	2100      	movs	r1, #0
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fd04 	bl	800631e <USBD_LL_Transmit>

  return USBD_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2205      	movs	r2, #5
 800592c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005930:	2300      	movs	r3, #0
 8005932:	2200      	movs	r2, #0
 8005934:	2100      	movs	r1, #0
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fd12 	bl	8006360 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800594c:	2200      	movs	r2, #0
 800594e:	4912      	ldr	r1, [pc, #72]	; (8005998 <MX_USB_DEVICE_Init+0x50>)
 8005950:	4812      	ldr	r0, [pc, #72]	; (800599c <MX_USB_DEVICE_Init+0x54>)
 8005952:	f7fe fe8f 	bl	8004674 <USBD_Init>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800595c:	f7fa fe84 	bl	8000668 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005960:	490f      	ldr	r1, [pc, #60]	; (80059a0 <MX_USB_DEVICE_Init+0x58>)
 8005962:	480e      	ldr	r0, [pc, #56]	; (800599c <MX_USB_DEVICE_Init+0x54>)
 8005964:	f7fe feb6 	bl	80046d4 <USBD_RegisterClass>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800596e:	f7fa fe7b 	bl	8000668 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005972:	490c      	ldr	r1, [pc, #48]	; (80059a4 <MX_USB_DEVICE_Init+0x5c>)
 8005974:	4809      	ldr	r0, [pc, #36]	; (800599c <MX_USB_DEVICE_Init+0x54>)
 8005976:	f7fe fe07 	bl	8004588 <USBD_CDC_RegisterInterface>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005980:	f7fa fe72 	bl	8000668 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005984:	4805      	ldr	r0, [pc, #20]	; (800599c <MX_USB_DEVICE_Init+0x54>)
 8005986:	f7fe fecc 	bl	8004722 <USBD_Start>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005990:	f7fa fe6a 	bl	8000668 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005994:	bf00      	nop
 8005996:	bd80      	pop	{r7, pc}
 8005998:	2000013c 	.word	0x2000013c
 800599c:	200001b0 	.word	0x200001b0
 80059a0:	20000018 	.word	0x20000018
 80059a4:	20000128 	.word	0x20000128

080059a8 <cdcDataIn>:
	}
	return ret;
}

void cdcDataIn(uint8_t rx_data)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 80059b2:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <cdcDataIn+0x48>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3301      	adds	r3, #1
 80059b8:	4a0e      	ldr	r2, [pc, #56]	; (80059f4 <cdcDataIn+0x4c>)
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80059c0:	fb01 f202 	mul.w	r2, r1, r2
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 80059c8:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <cdcDataIn+0x48>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	490a      	ldr	r1, [pc, #40]	; (80059f8 <cdcDataIn+0x50>)
 80059ce:	79fa      	ldrb	r2, [r7, #7]
 80059d0:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 80059d2:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <cdcDataIn+0x54>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d002      	beq.n	80059e2 <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 80059dc:	4a04      	ldr	r2, [pc, #16]	; (80059f0 <cdcDataIn+0x48>)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6013      	str	r3, [r2, #0]
	}
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000480 	.word	0x20000480
 80059f4:	20000124 	.word	0x20000124
 80059f8:	20000488 	.word	0x20000488
 80059fc:	20000484 	.word	0x20000484

08005a00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005a04:	2200      	movs	r2, #0
 8005a06:	4905      	ldr	r1, [pc, #20]	; (8005a1c <CDC_Init_FS+0x1c>)
 8005a08:	4805      	ldr	r0, [pc, #20]	; (8005a20 <CDC_Init_FS+0x20>)
 8005a0a:	f7fe fdd2 	bl	80045b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005a0e:	4905      	ldr	r1, [pc, #20]	; (8005a24 <CDC_Init_FS+0x24>)
 8005a10:	4803      	ldr	r0, [pc, #12]	; (8005a20 <CDC_Init_FS+0x20>)
 8005a12:	f7fe fdec 	bl	80045ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005a16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20000a88 	.word	0x20000a88
 8005a20:	200001b0 	.word	0x200001b0
 8005a24:	20000688 	.word	0x20000688

08005a28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005a2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	6039      	str	r1, [r7, #0]
 8005a42:	71fb      	strb	r3, [r7, #7]
 8005a44:	4613      	mov	r3, r2
 8005a46:	80bb      	strh	r3, [r7, #4]
	//...Repository\STM32Cube_FW_F4_V1.26.2\Projects\STM32446E_EVAL\Applications\USB_Device\src\usbd_cdc_interface.c 참고
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	2b23      	cmp	r3, #35	; 0x23
 8005a4c:	f200 80a3 	bhi.w	8005b96 <CDC_Control_FS+0x15e>
 8005a50:	a201      	add	r2, pc, #4	; (adr r2, 8005a58 <CDC_Control_FS+0x20>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005b97 	.word	0x08005b97
 8005a5c:	08005b97 	.word	0x08005b97
 8005a60:	08005b97 	.word	0x08005b97
 8005a64:	08005b97 	.word	0x08005b97
 8005a68:	08005b97 	.word	0x08005b97
 8005a6c:	08005b97 	.word	0x08005b97
 8005a70:	08005b97 	.word	0x08005b97
 8005a74:	08005b97 	.word	0x08005b97
 8005a78:	08005b97 	.word	0x08005b97
 8005a7c:	08005b97 	.word	0x08005b97
 8005a80:	08005b97 	.word	0x08005b97
 8005a84:	08005b97 	.word	0x08005b97
 8005a88:	08005b97 	.word	0x08005b97
 8005a8c:	08005b97 	.word	0x08005b97
 8005a90:	08005b97 	.word	0x08005b97
 8005a94:	08005b97 	.word	0x08005b97
 8005a98:	08005b97 	.word	0x08005b97
 8005a9c:	08005b97 	.word	0x08005b97
 8005aa0:	08005b97 	.word	0x08005b97
 8005aa4:	08005b97 	.word	0x08005b97
 8005aa8:	08005b97 	.word	0x08005b97
 8005aac:	08005b97 	.word	0x08005b97
 8005ab0:	08005b97 	.word	0x08005b97
 8005ab4:	08005b97 	.word	0x08005b97
 8005ab8:	08005b97 	.word	0x08005b97
 8005abc:	08005b97 	.word	0x08005b97
 8005ac0:	08005b97 	.word	0x08005b97
 8005ac4:	08005b97 	.word	0x08005b97
 8005ac8:	08005b97 	.word	0x08005b97
 8005acc:	08005b97 	.word	0x08005b97
 8005ad0:	08005b97 	.word	0x08005b97
 8005ad4:	08005b97 	.word	0x08005b97
 8005ad8:	08005ae9 	.word	0x08005ae9
 8005adc:	08005b43 	.word	0x08005b43
 8005ae0:	08005b97 	.word	0x08005b97
 8005ae4:	08005b97 	.word	0x08005b97
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU로 데이터를 set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	4b2e      	ldr	r3, [pc, #184]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005af0:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 8005af2:	4b2d      	ldr	r3, [pc, #180]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	3301      	adds	r3, #1
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	4313      	orrs	r3, r2
 8005b00:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b02:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 8005b04:	4b28      	ldr	r3, [pc, #160]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	3302      	adds	r3, #2
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	4313      	orrs	r3, r2
 8005b12:	4a25      	ldr	r2, [pc, #148]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b14:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 8005b16:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	3303      	adds	r3, #3
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	061b      	lsls	r3, r3, #24
 8005b22:	4313      	orrs	r3, r2
 8005b24:	4a20      	ldr	r2, [pc, #128]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b26:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	791a      	ldrb	r2, [r3, #4]
 8005b2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b2e:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	795a      	ldrb	r2, [r3, #5]
 8005b34:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b36:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	799a      	ldrb	r2, [r3, #6]
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b3e:	719a      	strb	r2, [r3, #6]
    break;
 8005b40:	e02a      	b.n	8005b98 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC로 데이터를 올려줌
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8005b42:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8005b4c:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	0a1a      	lsrs	r2, r3, #8
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	3301      	adds	r3, #1
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	0c1a      	lsrs	r2, r3, #16
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	3302      	adds	r3, #2
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8005b68:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	0e1a      	lsrs	r2, r3, #24
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	3303      	adds	r3, #3
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4a0b      	ldr	r2, [pc, #44]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b7c:	7912      	ldrb	r2, [r2, #4]
 8005b7e:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	3305      	adds	r3, #5
 8005b84:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b86:	7952      	ldrb	r2, [r2, #5]
 8005b88:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	3306      	adds	r3, #6
 8005b8e:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <CDC_Control_FS+0x170>)
 8005b90:	7992      	ldrb	r2, [r2, #6]
 8005b92:	701a      	strb	r2, [r3, #0]
    break;
 8005b94:	e000      	b.n	8005b98 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005b96:	bf00      	nop
  }

  return (USBD_OK);
 8005b98:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	2000011c 	.word	0x2000011c

08005bac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	480e      	ldr	r0, [pc, #56]	; (8005bf4 <CDC_Receive_FS+0x48>)
 8005bba:	f7fe fd18 	bl	80045ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005bbe:	480d      	ldr	r0, [pc, #52]	; (8005bf4 <CDC_Receive_FS+0x48>)
 8005bc0:	f7fe fd2e 	bl	8004620 <USBD_CDC_ReceivePacket>

  for(int i = 0 ; i < *Len ; i++)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e009      	b.n	8005bde <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);// ?��?��?��?�� 발생?�� data in
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff fee8 	bl	80059a8 <cdcDataIn>
  for(int i = 0 ; i < *Len ; i++)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d8f0      	bhi.n	8005bca <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 8005be8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200001b0 	.word	0x200001b0

08005bf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	6039      	str	r1, [r7, #0]
 8005c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2212      	movs	r2, #18
 8005c2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005c2e:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000158 	.word	0x20000158

08005c40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	6039      	str	r1, [r7, #0]
 8005c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2204      	movs	r2, #4
 8005c50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005c52:	4b03      	ldr	r3, [pc, #12]	; (8005c60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	2000016c 	.word	0x2000016c

08005c64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	6039      	str	r1, [r7, #0]
 8005c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d105      	bne.n	8005c82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	4907      	ldr	r1, [pc, #28]	; (8005c98 <USBD_FS_ProductStrDescriptor+0x34>)
 8005c7a:	4808      	ldr	r0, [pc, #32]	; (8005c9c <USBD_FS_ProductStrDescriptor+0x38>)
 8005c7c:	f7ff fd83 	bl	8005786 <USBD_GetString>
 8005c80:	e004      	b.n	8005c8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	4904      	ldr	r1, [pc, #16]	; (8005c98 <USBD_FS_ProductStrDescriptor+0x34>)
 8005c86:	4805      	ldr	r0, [pc, #20]	; (8005c9c <USBD_FS_ProductStrDescriptor+0x38>)
 8005c88:	f7ff fd7d 	bl	8005786 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c8c:	4b02      	ldr	r3, [pc, #8]	; (8005c98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000e88 	.word	0x20000e88
 8005c9c:	080064c0 	.word	0x080064c0

08005ca0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	6039      	str	r1, [r7, #0]
 8005caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	4904      	ldr	r1, [pc, #16]	; (8005cc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005cb0:	4804      	ldr	r0, [pc, #16]	; (8005cc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005cb2:	f7ff fd68 	bl	8005786 <USBD_GetString>
  return USBD_StrDesc;
 8005cb6:	4b02      	ldr	r3, [pc, #8]	; (8005cc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20000e88 	.word	0x20000e88
 8005cc4:	080064d8 	.word	0x080064d8

08005cc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	6039      	str	r1, [r7, #0]
 8005cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	221a      	movs	r2, #26
 8005cd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005cda:	f000 f843 	bl	8005d64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005cde:	4b02      	ldr	r3, [pc, #8]	; (8005ce8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20000170 	.word	0x20000170

08005cec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d105      	bne.n	8005d0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	4907      	ldr	r1, [pc, #28]	; (8005d20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005d02:	4808      	ldr	r0, [pc, #32]	; (8005d24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005d04:	f7ff fd3f 	bl	8005786 <USBD_GetString>
 8005d08:	e004      	b.n	8005d14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	4904      	ldr	r1, [pc, #16]	; (8005d20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005d0e:	4805      	ldr	r0, [pc, #20]	; (8005d24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005d10:	f7ff fd39 	bl	8005786 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d14:	4b02      	ldr	r3, [pc, #8]	; (8005d20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000e88 	.word	0x20000e88
 8005d24:	080064ec 	.word	0x080064ec

08005d28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	6039      	str	r1, [r7, #0]
 8005d32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d105      	bne.n	8005d46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	4907      	ldr	r1, [pc, #28]	; (8005d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005d3e:	4808      	ldr	r0, [pc, #32]	; (8005d60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005d40:	f7ff fd21 	bl	8005786 <USBD_GetString>
 8005d44:	e004      	b.n	8005d50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	4904      	ldr	r1, [pc, #16]	; (8005d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005d4a:	4805      	ldr	r0, [pc, #20]	; (8005d60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005d4c:	f7ff fd1b 	bl	8005786 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d50:	4b02      	ldr	r3, [pc, #8]	; (8005d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000e88 	.word	0x20000e88
 8005d60:	080064f8 	.word	0x080064f8

08005d64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005d6a:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <Get_SerialNum+0x44>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d70:	4b0e      	ldr	r3, [pc, #56]	; (8005dac <Get_SerialNum+0x48>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005d76:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <Get_SerialNum+0x4c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4413      	add	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d8a:	2208      	movs	r2, #8
 8005d8c:	4909      	ldr	r1, [pc, #36]	; (8005db4 <Get_SerialNum+0x50>)
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f814 	bl	8005dbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d94:	2204      	movs	r2, #4
 8005d96:	4908      	ldr	r1, [pc, #32]	; (8005db8 <Get_SerialNum+0x54>)
 8005d98:	68b8      	ldr	r0, [r7, #8]
 8005d9a:	f000 f80f 	bl	8005dbc <IntToUnicode>
  }
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	1fff7a10 	.word	0x1fff7a10
 8005dac:	1fff7a14 	.word	0x1fff7a14
 8005db0:	1fff7a18 	.word	0x1fff7a18
 8005db4:	20000172 	.word	0x20000172
 8005db8:	20000182 	.word	0x20000182

08005dbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]
 8005dd2:	e027      	b.n	8005e24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	0f1b      	lsrs	r3, r3, #28
 8005dd8:	2b09      	cmp	r3, #9
 8005dda:	d80b      	bhi.n	8005df4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	0f1b      	lsrs	r3, r3, #28
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	4619      	mov	r1, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	440b      	add	r3, r1
 8005dec:	3230      	adds	r2, #48	; 0x30
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	e00a      	b.n	8005e0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	0f1b      	lsrs	r3, r3, #28
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	4619      	mov	r1, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	440b      	add	r3, r1
 8005e04:	3237      	adds	r2, #55	; 0x37
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	3301      	adds	r3, #1
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	4413      	add	r3, r2
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
 8005e20:	3301      	adds	r3, #1
 8005e22:	75fb      	strb	r3, [r7, #23]
 8005e24:	7dfa      	ldrb	r2, [r7, #23]
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d3d3      	bcc.n	8005dd4 <IntToUnicode+0x18>
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e44:	f107 0314 	add.w	r3, r7, #20
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	60da      	str	r2, [r3, #12]
 8005e52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e5c:	d13a      	bne.n	8005ed4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e5e:	2300      	movs	r3, #0
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	4b1e      	ldr	r3, [pc, #120]	; (8005edc <HAL_PCD_MspInit+0xa0>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	4a1d      	ldr	r2, [pc, #116]	; (8005edc <HAL_PCD_MspInit+0xa0>)
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e6e:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <HAL_PCD_MspInit+0xa0>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005e7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e80:	2302      	movs	r3, #2
 8005e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005e8c:	230a      	movs	r3, #10
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	4619      	mov	r1, r3
 8005e96:	4812      	ldr	r0, [pc, #72]	; (8005ee0 <HAL_PCD_MspInit+0xa4>)
 8005e98:	f7fa fe2c 	bl	8000af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <HAL_PCD_MspInit+0xa0>)
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea0:	4a0e      	ldr	r2, [pc, #56]	; (8005edc <HAL_PCD_MspInit+0xa0>)
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea6:	6353      	str	r3, [r2, #52]	; 0x34
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <HAL_PCD_MspInit+0xa0>)
 8005eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb0:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <HAL_PCD_MspInit+0xa0>)
 8005eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005eb6:	6453      	str	r3, [r2, #68]	; 0x44
 8005eb8:	4b08      	ldr	r3, [pc, #32]	; (8005edc <HAL_PCD_MspInit+0xa0>)
 8005eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	2043      	movs	r0, #67	; 0x43
 8005eca:	f7fa fddc 	bl	8000a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005ece:	2043      	movs	r0, #67	; 0x43
 8005ed0:	f7fa fdf5 	bl	8000abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3728      	adds	r7, #40	; 0x28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	40020000 	.word	0x40020000

08005ee4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f7fe fc5c 	bl	80047b8 <USBD_LL_SetupStage>
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	4619      	mov	r1, r3
 8005f32:	f7fe fc96 	bl	8004862 <USBD_LL_DataOutStage>
}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	460b      	mov	r3, r1
 8005f48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	3348      	adds	r3, #72	; 0x48
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	4619      	mov	r1, r3
 8005f66:	f7fe fcdf 	bl	8004928 <USBD_LL_DataInStage>
}
 8005f6a:	bf00      	nop
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe fdf3 	bl	8004b6c <USBD_LL_SOF>
}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005f96:	2301      	movs	r3, #1
 8005f98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d001      	beq.n	8005fa6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005fa2:	f7fa fb61 	bl	8000668 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fac:	7bfa      	ldrb	r2, [r7, #15]
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fd9d 	bl	8004af0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe fd49 	bl	8004a54 <USBD_LL_Reset>
}
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe fd98 	bl	8004b10 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <HAL_PCD_SuspendCallback+0x48>)
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	4a03      	ldr	r2, [pc, #12]	; (8006014 <HAL_PCD_SuspendCallback+0x48>)
 8006006:	f043 0306 	orr.w	r3, r3, #6
 800600a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	e000ed00 	.word	0xe000ed00

08006018 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fd88 	bl	8004b3c <USBD_LL_Resume>
}
 800602c:	bf00      	nop
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006046:	78fa      	ldrb	r2, [r7, #3]
 8006048:	4611      	mov	r1, r2
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fdd6 	bl	8004bfc <USBD_LL_IsoOUTIncomplete>
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	4611      	mov	r1, r2
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe fd9e 	bl	8004bb0 <USBD_LL_IsoINIncomplete>
}
 8006074:	bf00      	nop
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fddc 	bl	8004c48 <USBD_LL_DevConnected>
}
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fdd9 	bl	8004c5e <USBD_LL_DevDisconnected>
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d13c      	bne.n	800613e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80060c4:	4a20      	ldr	r2, [pc, #128]	; (8006148 <USBD_LL_Init+0x94>)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <USBD_LL_Init+0x94>)
 80060d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80060d4:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <USBD_LL_Init+0x94>)
 80060d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80060da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80060dc:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <USBD_LL_Init+0x94>)
 80060de:	2204      	movs	r2, #4
 80060e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80060e2:	4b19      	ldr	r3, [pc, #100]	; (8006148 <USBD_LL_Init+0x94>)
 80060e4:	2202      	movs	r2, #2
 80060e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80060e8:	4b17      	ldr	r3, [pc, #92]	; (8006148 <USBD_LL_Init+0x94>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80060ee:	4b16      	ldr	r3, [pc, #88]	; (8006148 <USBD_LL_Init+0x94>)
 80060f0:	2202      	movs	r2, #2
 80060f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80060f4:	4b14      	ldr	r3, [pc, #80]	; (8006148 <USBD_LL_Init+0x94>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80060fa:	4b13      	ldr	r3, [pc, #76]	; (8006148 <USBD_LL_Init+0x94>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006100:	4b11      	ldr	r3, [pc, #68]	; (8006148 <USBD_LL_Init+0x94>)
 8006102:	2200      	movs	r2, #0
 8006104:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006106:	4b10      	ldr	r3, [pc, #64]	; (8006148 <USBD_LL_Init+0x94>)
 8006108:	2200      	movs	r2, #0
 800610a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800610c:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <USBD_LL_Init+0x94>)
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006112:	480d      	ldr	r0, [pc, #52]	; (8006148 <USBD_LL_Init+0x94>)
 8006114:	f7fa fe8b 	bl	8000e2e <HAL_PCD_Init>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800611e:	f7fa faa3 	bl	8000668 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006122:	2180      	movs	r1, #128	; 0x80
 8006124:	4808      	ldr	r0, [pc, #32]	; (8006148 <USBD_LL_Init+0x94>)
 8006126:	f7fb ffe8 	bl	80020fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800612a:	2240      	movs	r2, #64	; 0x40
 800612c:	2100      	movs	r1, #0
 800612e:	4806      	ldr	r0, [pc, #24]	; (8006148 <USBD_LL_Init+0x94>)
 8006130:	f7fb ff9c 	bl	800206c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006134:	2280      	movs	r2, #128	; 0x80
 8006136:	2101      	movs	r1, #1
 8006138:	4803      	ldr	r0, [pc, #12]	; (8006148 <USBD_LL_Init+0x94>)
 800613a:	f7fb ff97 	bl	800206c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20001088 	.word	0x20001088

0800614c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006162:	4618      	mov	r0, r3
 8006164:	f7fa ff80 	bl	8001068 <HAL_PCD_Start>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f942 	bl	80063f8 <USBD_Get_USB_Status>
 8006174:	4603      	mov	r3, r0
 8006176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006178:	7bbb      	ldrb	r3, [r7, #14]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	4608      	mov	r0, r1
 800618c:	4611      	mov	r1, r2
 800618e:	461a      	mov	r2, r3
 8006190:	4603      	mov	r3, r0
 8006192:	70fb      	strb	r3, [r7, #3]
 8006194:	460b      	mov	r3, r1
 8006196:	70bb      	strb	r3, [r7, #2]
 8006198:	4613      	mov	r3, r2
 800619a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80061aa:	78bb      	ldrb	r3, [r7, #2]
 80061ac:	883a      	ldrh	r2, [r7, #0]
 80061ae:	78f9      	ldrb	r1, [r7, #3]
 80061b0:	f7fb fb64 	bl	800187c <HAL_PCD_EP_Open>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f91c 	bl	80063f8 <USBD_Get_USB_Status>
 80061c0:	4603      	mov	r3, r0
 80061c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fb fbad 	bl	800194c <HAL_PCD_EP_Close>
 80061f2:	4603      	mov	r3, r0
 80061f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 f8fd 	bl	80063f8 <USBD_Get_USB_Status>
 80061fe:	4603      	mov	r3, r0
 8006200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006202:	7bbb      	ldrb	r3, [r7, #14]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006226:	78fa      	ldrb	r2, [r7, #3]
 8006228:	4611      	mov	r1, r2
 800622a:	4618      	mov	r0, r3
 800622c:	f7fb fc85 	bl	8001b3a <HAL_PCD_EP_SetStall>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f8de 	bl	80063f8 <USBD_Get_USB_Status>
 800623c:	4603      	mov	r3, r0
 800623e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006240:	7bbb      	ldrb	r3, [r7, #14]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	4611      	mov	r1, r2
 8006268:	4618      	mov	r0, r3
 800626a:	f7fb fcca 	bl	8001c02 <HAL_PCD_EP_ClrStall>
 800626e:	4603      	mov	r3, r0
 8006270:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	4618      	mov	r0, r3
 8006276:	f000 f8bf 	bl	80063f8 <USBD_Get_USB_Status>
 800627a:	4603      	mov	r3, r0
 800627c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800627e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800629a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800629c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	da0b      	bge.n	80062bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062aa:	68f9      	ldr	r1, [r7, #12]
 80062ac:	4613      	mov	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	333e      	adds	r3, #62	; 0x3e
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	e00b      	b.n	80062d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062c2:	68f9      	ldr	r1, [r7, #12]
 80062c4:	4613      	mov	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	1a9b      	subs	r3, r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062fa:	78fa      	ldrb	r2, [r7, #3]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fb fa97 	bl	8001832 <HAL_PCD_SetAddress>
 8006304:	4603      	mov	r3, r0
 8006306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f874 	bl	80063f8 <USBD_Get_USB_Status>
 8006310:	4603      	mov	r3, r0
 8006312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006314:	7bbb      	ldrb	r3, [r7, #14]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b086      	sub	sp, #24
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	460b      	mov	r3, r1
 800632c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800633c:	7af9      	ldrb	r1, [r7, #11]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	f7fb fbb0 	bl	8001aa6 <HAL_PCD_EP_Transmit>
 8006346:	4603      	mov	r3, r0
 8006348:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	4618      	mov	r0, r3
 800634e:	f000 f853 	bl	80063f8 <USBD_Get_USB_Status>
 8006352:	4603      	mov	r3, r0
 8006354:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006356:	7dbb      	ldrb	r3, [r7, #22]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	607a      	str	r2, [r7, #4]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	460b      	mov	r3, r1
 800636e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800637e:	7af9      	ldrb	r1, [r7, #11]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	f7fb fb2c 	bl	80019e0 <HAL_PCD_EP_Receive>
 8006388:	4603      	mov	r3, r0
 800638a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800638c:	7dfb      	ldrb	r3, [r7, #23]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 f832 	bl	80063f8 <USBD_Get_USB_Status>
 8006394:	4603      	mov	r3, r0
 8006396:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006398:	7dbb      	ldrb	r3, [r7, #22]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b082      	sub	sp, #8
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063b4:	78fa      	ldrb	r2, [r7, #3]
 80063b6:	4611      	mov	r1, r2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fb fb5c 	bl	8001a76 <HAL_PCD_EP_GetRxCount>
 80063be:	4603      	mov	r3, r0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80063d0:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <USBD_static_malloc+0x18>)
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20001490 	.word	0x20001490

080063e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]

}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	2b03      	cmp	r3, #3
 800640a:	d817      	bhi.n	800643c <USBD_Get_USB_Status+0x44>
 800640c:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <USBD_Get_USB_Status+0x1c>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006425 	.word	0x08006425
 8006418:	0800642b 	.word	0x0800642b
 800641c:	08006431 	.word	0x08006431
 8006420:	08006437 	.word	0x08006437
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	73fb      	strb	r3, [r7, #15]
    break;
 8006428:	e00b      	b.n	8006442 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800642a:	2303      	movs	r3, #3
 800642c:	73fb      	strb	r3, [r7, #15]
    break;
 800642e:	e008      	b.n	8006442 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
    break;
 8006434:	e005      	b.n	8006442 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006436:	2303      	movs	r3, #3
 8006438:	73fb      	strb	r3, [r7, #15]
    break;
 800643a:	e002      	b.n	8006442 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	73fb      	strb	r3, [r7, #15]
    break;
 8006440:	bf00      	nop
  }
  return usb_status;
 8006442:	7bfb      	ldrb	r3, [r7, #15]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <__libc_init_array>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	4d0d      	ldr	r5, [pc, #52]	; (8006488 <__libc_init_array+0x38>)
 8006454:	4c0d      	ldr	r4, [pc, #52]	; (800648c <__libc_init_array+0x3c>)
 8006456:	1b64      	subs	r4, r4, r5
 8006458:	10a4      	asrs	r4, r4, #2
 800645a:	2600      	movs	r6, #0
 800645c:	42a6      	cmp	r6, r4
 800645e:	d109      	bne.n	8006474 <__libc_init_array+0x24>
 8006460:	4d0b      	ldr	r5, [pc, #44]	; (8006490 <__libc_init_array+0x40>)
 8006462:	4c0c      	ldr	r4, [pc, #48]	; (8006494 <__libc_init_array+0x44>)
 8006464:	f000 f820 	bl	80064a8 <_init>
 8006468:	1b64      	subs	r4, r4, r5
 800646a:	10a4      	asrs	r4, r4, #2
 800646c:	2600      	movs	r6, #0
 800646e:	42a6      	cmp	r6, r4
 8006470:	d105      	bne.n	800647e <__libc_init_array+0x2e>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	f855 3b04 	ldr.w	r3, [r5], #4
 8006478:	4798      	blx	r3
 800647a:	3601      	adds	r6, #1
 800647c:	e7ee      	b.n	800645c <__libc_init_array+0xc>
 800647e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006482:	4798      	blx	r3
 8006484:	3601      	adds	r6, #1
 8006486:	e7f2      	b.n	800646e <__libc_init_array+0x1e>
 8006488:	08006520 	.word	0x08006520
 800648c:	08006520 	.word	0x08006520
 8006490:	08006520 	.word	0x08006520
 8006494:	08006524 	.word	0x08006524

08006498 <memset>:
 8006498:	4402      	add	r2, r0
 800649a:	4603      	mov	r3, r0
 800649c:	4293      	cmp	r3, r2
 800649e:	d100      	bne.n	80064a2 <memset+0xa>
 80064a0:	4770      	bx	lr
 80064a2:	f803 1b01 	strb.w	r1, [r3], #1
 80064a6:	e7f9      	b.n	800649c <memset+0x4>

080064a8 <_init>:
 80064a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064aa:	bf00      	nop
 80064ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ae:	bc08      	pop	{r3}
 80064b0:	469e      	mov	lr, r3
 80064b2:	4770      	bx	lr

080064b4 <_fini>:
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b6:	bf00      	nop
 80064b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ba:	bc08      	pop	{r3}
 80064bc:	469e      	mov	lr, r3
 80064be:	4770      	bx	lr
