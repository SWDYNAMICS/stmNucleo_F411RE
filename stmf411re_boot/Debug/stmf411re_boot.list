
stmf411re_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007880  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b1c  08007b1c  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b24  08007b24  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e5c  20000100  08007c2c  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f5c  08007c2c  00020f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001186d  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c4a  00000000  00000000  0003199d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  000355e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00036648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0bf  00000000  00000000  000374a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dbc0  00000000  00000000  0005355f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc34  00000000  00000000  0007111f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fed53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f78  00000000  00000000  000feda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007a00 	.word	0x08007a00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08007a00 	.word	0x08007a00

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <apInit>:
#include "qbuffer.h"



void apInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <apMain>:

void apMain(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b082      	sub	sp, #8
 80004ee:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis();
 80004f0:	f000 f853 	bl	800059a <millis>
 80004f4:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if(millis() - pre_time >= 100)
 80004f6:	f000 f850 	bl	800059a <millis>
 80004fa:	4602      	mov	r2, r0
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	2b63      	cmp	r3, #99	; 0x63
 8000502:	d9f8      	bls.n	80004f6 <apMain+0xc>
		{
			pre_time = millis();
 8000504:	f000 f849 	bl	800059a <millis>
 8000508:	6078      	str	r0, [r7, #4]
			ledToggle(_DEF_LED1);
 800050a:	2000      	movs	r0, #0
 800050c:	f000 fae2 	bl	8000ad4 <ledToggle>
		if(millis() - pre_time >= 100)
 8000510:	e7f1      	b.n	80004f6 <apMain+0xc>
	...

08000514 <bspInit>:
#include "uart.h"

void SystemClock_Config(void);

void bspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  HAL_Init();
 800051a:	f000 fc19 	bl	8000d50 <HAL_Init>
  SystemClock_Config();
 800051e:	f000 f843 	bl	80005a8 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <bspInit+0x6c>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a15      	ldr	r2, [pc, #84]	; (8000580 <bspInit+0x6c>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <bspInit+0x6c>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <bspInit+0x6c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <bspInit+0x6c>)
 8000548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <bspInit+0x6c>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <bspInit+0x6c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a07      	ldr	r2, [pc, #28]	; (8000580 <bspInit+0x6c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <bspInit+0x6c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800

08000584 <delay>:
void delay(uint32_t ms)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 fc85 	bl	8000e9c <HAL_Delay>
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <millis>:
uint32_t millis(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800059e:	f000 fc71 	bl	8000e84 <HAL_GetTick>
 80005a2:	4603      	mov	r3, r0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <SystemClock_Config>:
  return 1;
}


void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 fa1a 	bl	80079f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	; (8000674 <SystemClock_Config+0xcc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xd0>)
 80005f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000604:	2305      	movs	r3, #5
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800060e:	2301      	movs	r3, #1
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800061c:	2319      	movs	r3, #25
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000620:	23c0      	movs	r3, #192	; 0xc0
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fb63 	bl	8002cfc <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800063c:	f000 f81e 	bl	800067c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2103      	movs	r1, #3
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fdc5 	bl	80031ec <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000668:	f000 f808 	bl	800067c <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	; 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	e7fe      	b.n	8000684 <Error_Handler+0x8>
	...

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <HAL_MspInit+0x4c>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <HAL_MspInit+0x4c>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069c:	6453      	str	r3, [r2, #68]	; 0x44
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <HAL_MspInit+0x4c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_MspInit+0x4c>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <HAL_MspInit+0x4c>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_MspInit+0x4c>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 fb9a 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <OTG_FS_IRQHandler+0x10>)
 8000732:	f001 fb11 	bl	8001d58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000734 	.word	0x20000734

08000740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <SystemInit+0x28>)
 8000746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800074a:	4a07      	ldr	r2, [pc, #28]	; (8000768 <SystemInit+0x28>)
 800074c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <SystemInit+0x28>)
 8000756:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800075a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000772:	490e      	ldr	r1, [pc, #56]	; (80007ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000774:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000788:	4c0b      	ldr	r4, [pc, #44]	; (80007b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000796:	f7ff ffd3 	bl	8000740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079a:	f007 f905 	bl	80079a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079e:	f007 f8f7 	bl	8007990 <main>
  bx  lr    
 80007a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80007b0:	08007b2c 	.word	0x08007b2c
  ldr r2, =_sbss
 80007b4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80007b8:	20000f5c 	.word	0x20000f5c

080007bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC_IRQHandler>

080007be <flashInit>:
  {FLASH_SECTOR_6, 0x08040000, 131072},
  {FLASH_SECTOR_7, 0x08060000, 131072}
};

bool flashInit(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  return true;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <flashErase>:
bool flashErase(uint32_t addr, uint32_t length)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  bool ret = false;
 80007da:	2300      	movs	r3, #0
 80007dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t sector_error;

  int16_t start_sector_num = -1;
 80007e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count    = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
 80007ee:	e015      	b.n	800081c <flashErase+0x4c>
  {
    if(flashInSector(i, addr, length) == true)
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f88d 	bl	8000918 <flashInSector>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d008      	beq.n	8000816 <flashErase+0x46>
    {
      if(start_sector_num < 0)
 8000804:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000808:	2b00      	cmp	r3, #0
 800080a:	da01      	bge.n	8000810 <flashErase+0x40>
      {
        start_sector_num = i;
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 8000810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000812:	3301      	adds	r3, #1
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	3301      	adds	r3, #1
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	2b07      	cmp	r3, #7
 8000820:	dde6      	ble.n	80007f0 <flashErase+0x20>
    }
  }

  if(sector_count > 0 )
 8000822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000824:	2b00      	cmp	r3, #0
 8000826:	d027      	beq.n	8000878 <flashErase+0xa8>
  {
    HAL_FLASH_Unlock();
 8000828:	f000 fcc2 	bl	80011b0 <HAL_FLASH_Unlock>
    init.TypeErase    = FLASH_TYPEERASE_SECTORS;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
    init.Banks        = FLASH_BANK_1;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
    init.Sector       = flash_tbl[start_sector_num].sector;
 8000834:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8000838:	4912      	ldr	r1, [pc, #72]	; (8000884 <flashErase+0xb4>)
 800083a:	4613      	mov	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	4413      	add	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	440b      	add	r3, r1
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	617b      	str	r3, [r7, #20]
    init.NbSectors    = sector_count;
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &sector_error);
 8000850:	f107 0208 	add.w	r2, r7, #8
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fe1a 	bl	8001494 <HAL_FLASHEx_Erase>
 8000860:	4603      	mov	r3, r0
 8000862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(status == HAL_OK)
 8000866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800086a:	2b00      	cmp	r3, #0
 800086c:	d102      	bne.n	8000874 <flashErase+0xa4>
    {
      ret = true;
 800086e:	2301      	movs	r3, #1
 8000870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    HAL_FLASH_Lock();
 8000874:	f000 fcbe 	bl	80011f4 <HAL_FLASH_Lock>
  }

  return ret;
 8000878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800087c:	4618      	mov	r0, r3
 800087e:	3730      	adds	r7, #48	; 0x30
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	08007abc 	.word	0x08007abc

08000888 <flashWrite>:
bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000888:	b5b0      	push	{r4, r5, r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000894:	2301      	movs	r3, #1
 8000896:	77fb      	strb	r3, [r7, #31]

  HAL_StatusTypeDef status;

  if(addr%2 != 0)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <flashWrite+0x1e>
  {
    return false;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e033      	b.n	800090e <flashWrite+0x86>
  }
  HAL_FLASH_Unlock();
 80008a6:	f000 fc83 	bl	80011b0 <HAL_FLASH_Unlock>
  for(int i=0; i<length; i+=2)
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	e027      	b.n	8000900 <flashWrite+0x78>
  {//per HALFWORD 16bit
    uint16_t data;

    data  = p_data[i+0] << 0; // is equal = *(p_data + i);???
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	4413      	add	r3, r2
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	82fb      	strh	r3, [r7, #22]
    data |= p_data[i+1] << 8;
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	3301      	adds	r3, #1
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	b21a      	sxth	r2, r3
 80008c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);// 16bit write
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	18d1      	adds	r1, r2, r3
 80008d8:	8afb      	ldrh	r3, [r7, #22]
 80008da:	2200      	movs	r2, #0
 80008dc:	461c      	mov	r4, r3
 80008de:	4615      	mov	r5, r2
 80008e0:	4622      	mov	r2, r4
 80008e2:	462b      	mov	r3, r5
 80008e4:	2001      	movs	r0, #1
 80008e6:	f000 fc0f 	bl	8001108 <HAL_FLASH_Program>
 80008ea:	4603      	mov	r3, r0
 80008ec:	757b      	strb	r3, [r7, #21]
    if(status != HAL_OK)
 80008ee:	7d7b      	ldrb	r3, [r7, #21]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <flashWrite+0x72>
    {
      ret = false;
 80008f4:	2300      	movs	r3, #0
 80008f6:	77fb      	strb	r3, [r7, #31]
      break;
 80008f8:	e006      	b.n	8000908 <flashWrite+0x80>
  for(int i=0; i<length; i+=2)
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	3302      	adds	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	d8d3      	bhi.n	80008b0 <flashWrite+0x28>
    }
  }

  HAL_FLASH_Lock();
 8000908:	f000 fc74 	bl	80011f4 <HAL_FLASH_Lock>

  return ret;
 800090c:	7ffb      	ldrb	r3, [r7, #31]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000918 <flashInSector>:
  }

  return ret;
}
bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8000918:	b480      	push	{r7}
 800091a:	b08b      	sub	sp, #44	; 0x2c
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_start;
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;

  sector_start = flash_tbl[sector_num].addr;
 800092c:	89fa      	ldrh	r2, [r7, #14]
 800092e:	492c      	ldr	r1, [pc, #176]	; (80009e0 <flashInSector+0xc8>)
 8000930:	4613      	mov	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	3304      	adds	r3, #4
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8000940:	89fa      	ldrh	r2, [r7, #14]
 8000942:	4927      	ldr	r1, [pc, #156]	; (80009e0 <flashInSector+0xc8>)
 8000944:	4613      	mov	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	4413      	add	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	440b      	add	r3, r1
 800094e:	3304      	adds	r3, #4
 8000950:	6819      	ldr	r1, [r3, #0]
 8000952:	89fa      	ldrh	r2, [r7, #14]
 8000954:	4822      	ldr	r0, [pc, #136]	; (80009e0 <flashInSector+0xc8>)
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4403      	add	r3, r0
 8000960:	3308      	adds	r3, #8
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	440b      	add	r3, r1
 8000966:	3b01      	subs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4413      	add	r3, r2
 8000974:	3b01      	subs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]

  if(sector_start >= flash_start && sector_start <= flash_end)
 8000978:	6a3a      	ldr	r2, [r7, #32]
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	429a      	cmp	r2, r3
 800097e:	d306      	bcc.n	800098e <flashInSector+0x76>
 8000980:	6a3a      	ldr	r2, [r7, #32]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	429a      	cmp	r2, r3
 8000986:	d802      	bhi.n	800098e <flashInSector+0x76>
  {
    ret = true;
 8000988:	2301      	movs	r3, #1
 800098a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(sector_end >= flash_start && sector_end <= flash_end)
 800098e:	69fa      	ldr	r2, [r7, #28]
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	429a      	cmp	r2, r3
 8000994:	d306      	bcc.n	80009a4 <flashInSector+0x8c>
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	429a      	cmp	r2, r3
 800099c:	d802      	bhi.n	80009a4 <flashInSector+0x8c>
  {
    ret = true;
 800099e:	2301      	movs	r3, #1
 80009a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(flash_start >= sector_start && flash_start <= sector_end)
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d306      	bcc.n	80009ba <flashInSector+0xa2>
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d802      	bhi.n	80009ba <flashInSector+0xa2>
  {
    ret = true;
 80009b4:	2301      	movs	r3, #1
 80009b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(flash_end >= sector_start && flash_end <= sector_end)
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d306      	bcc.n	80009d0 <flashInSector+0xb8>
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d802      	bhi.n	80009d0 <flashInSector+0xb8>
  {
    ret = true;
 80009ca:	2301      	movs	r3, #1
 80009cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 80009d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	372c      	adds	r7, #44	; 0x2c
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	08007abc 	.word	0x08007abc

080009e4 <ledInit>:
{
	{GPIOC, GPIO_PIN_13, GPIO_PIN_SET, GPIO_PIN_RESET}
};

bool ledInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
	bool ret = true;
 80009ea:	2301      	movs	r3, #1
 80009ec:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <ledInit+0x94>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <ledInit+0x94>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <ledInit+0x94>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	e01e      	b.n	8000a68 <ledInit+0x84>
	{
		ledOff(i);
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f826 	bl	8000a80 <ledOff>
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <ledInit+0x98>)
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	3304      	adds	r3, #4
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <ledInit+0x98>)
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	440b      	add	r3, r1
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1d3a      	adds	r2, r7, #4
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fe3b 	bl	80016d8 <HAL_GPIO_Init>
	for(int i = 0; i < LED_MAX_CHANNEL; i++)
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3301      	adds	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	dddd      	ble.n	8000a2a <ledInit+0x46>
	}
	return ret;
 8000a6e:	7efb      	ldrb	r3, [r7, #27]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	20000004 	.word	0x20000004

08000a80 <ledOff>:
void ledOn(uint8_t ch)
{
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	4910      	ldr	r1, [pc, #64]	; (8000ad0 <ledOff+0x50>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	440b      	add	r3, r1
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <ledOff+0x50>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	b299      	uxth	r1, r3
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	4c07      	ldr	r4, [pc, #28]	; (8000ad0 <ledOff+0x50>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4423      	add	r3, r4
 8000abc:	3309      	adds	r3, #9
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f000 ff8d 	bl	80019e0 <HAL_GPIO_WritePin>
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd90      	pop	{r4, r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000ade:	79fa      	ldrb	r2, [r7, #7]
 8000ae0:	490b      	ldr	r1, [pc, #44]	; (8000b10 <ledToggle+0x3c>)
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	440b      	add	r3, r1
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	79fa      	ldrb	r2, [r7, #7]
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <ledToggle+0x3c>)
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	440b      	add	r3, r1
 8000afc:	3304      	adds	r3, #4
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	f000 ff85 	bl	8001a12 <HAL_GPIO_TogglePin>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000004 	.word	0x20000004

08000b14 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
	bool ret = true;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	72fb      	strb	r3, [r7, #11]

	if(RCC->CSR == (1<<26))
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <resetInit+0xa4>)
 8000b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000b26:	d113      	bne.n	8000b50 <resetInit+0x3c>
	{
		rtcBackupRegWrite(0, rtcBackupRegRead(0) + 1);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 f88b 	bl	8000c44 <rtcBackupRegRead>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	3301      	adds	r3, #1
 8000b32:	4619      	mov	r1, r3
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 f875 	bl	8000c24 <rtcBackupRegWrite>
		delay(500);
 8000b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3e:	f7ff fd21 	bl	8000584 <delay>
		/* due to multiple input */
		reset_count = rtcBackupRegRead(0);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f87e 	bl	8000c44 <rtcBackupRegRead>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <resetInit+0xa8>)
 8000b4e:	601a      	str	r2, [r3, #0]
		/* one count increase itself */
	}
	rtcBackupRegWrite(0, 0);
 8000b50:	2100      	movs	r1, #0
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f866 	bl	8000c24 <rtcBackupRegWrite>

	if(reset_count !=2)
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <resetInit+0xa8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d026      	beq.n	8000bae <resetInit+0x9a>
	{
	  /*if not bl, jump*/
	  void (**jump_func)() = (void (**)())(0x8008000 + 4);/*except 4byte of _estack pointer*/
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <resetInit+0xac>)
 8000b62:	607b      	str	r3, [r7, #4]

	  if((uint32_t)*jump_func != 0xFFFFFFFF)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6c:	d01f      	beq.n	8000bae <resetInit+0x9a>
	  {
	    /*fw data exists*/
	    HAL_RCC_DeInit();
 8000b6e:	f002 fde5 	bl	800373c <HAL_RCC_DeInit>
	    HAL_DeInit();
 8000b72:	f000 f90f 	bl	8000d94 <HAL_DeInit>
	    for(int i=0; i<8; i++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	e00f      	b.n	8000b9c <resetInit+0x88>
	    {
	      NVIC->ICER[i] = 0xFFFFFFFF;
 8000b7c:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <resetInit+0xb0>)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3320      	adds	r3, #32
 8000b82:	f04f 31ff 	mov.w	r1, #4294967295
 8000b86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b8a:	f3bf 8f4f 	dsb	sy
}
 8000b8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b90:	f3bf 8f6f 	isb	sy
}
 8000b94:	bf00      	nop
	    for(int i=0; i<8; i++)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b07      	cmp	r3, #7
 8000ba0:	ddec      	ble.n	8000b7c <resetInit+0x68>
	      __DSB();
	      __ISB();
	    }
	    SysTick->CTRL = 0;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <resetInit+0xb4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]

	    (*jump_func)();
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4798      	blx	r3
	  }
	}

	return ret;
 8000bae:	7afb      	ldrb	r3, [r7, #11]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	2000011c 	.word	0x2000011c
 8000bc0:	08008004 	.word	0x08008004
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	bool ret = true;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	71fb      	strb	r3, [r7, #7]
	// also need to enable GPIOC -> already declared on "bsp.c"
	hrtc.Instance 						= RTC;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <rtcInit+0x50>)
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <rtcInit+0x54>)
 8000bda:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat 			= RTC_HOURFORMAT_24;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <rtcInit+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv 		= 127;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <rtcInit+0x50>)
 8000be4:	227f      	movs	r2, #127	; 0x7f
 8000be6:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv 		= 255;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <rtcInit+0x50>)
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut 					= RTC_OUTPUT_DISABLE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <rtcInit+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity 	= RTC_OUTPUT_POLARITY_HIGH;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <rtcInit+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType	    = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <rtcInit+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <rtcInit+0x50>)
 8000c02:	f002 fe69 	bl	80038d8 <HAL_RTC_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <rtcInit+0x44>
	{
	Error_Handler();
 8000c0c:	f7ff fd36 	bl	800067c <Error_Handler>
	}
	return ret;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000120 	.word	0x20000120
 8000c20:	40002800 	.word	0x40002800

08000c24 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <rtcBackupRegWrite+0x1c>)
 8000c34:	f002 ff35 	bl	8003aa2 <HAL_RTCEx_BKUPWrite>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000120 	.word	0x20000120

08000c44 <rtcBackupRegRead>:
uint32_t rtcBackupRegRead(uint32_t index)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <rtcBackupRegRead+0x1c>)
 8000c50:	f002 ff41 	bl	8003ad6 <HAL_RTCEx_BKUPRead>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000120 	.word	0x20000120

08000c64 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <HAL_RTC_MspInit+0x50>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d111      	bne.n	8000cac <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c90:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fc60 	bl	800355c <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000ca2:	f7ff fceb 	bl	800067c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <HAL_RTC_MspInit+0x54>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40002800 	.word	0x40002800
 8000cb8:	42470e3c 	.word	0x42470e3c

08000cbc <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
	bool ret = true;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cda:	2311      	movs	r3, #17
 8000cdc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4810      	ldr	r0, [pc, #64]	; (8000d2c <usbInit+0x70>)
 8000cec:	f000 fcf4 	bl	80016d8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <usbInit+0x70>)
 8000cf8:	f000 fe72 	bl	80019e0 <HAL_GPIO_WritePin>
	delay(200);
 8000cfc:	20c8      	movs	r0, #200	; 0xc8
 8000cfe:	f7ff fc41 	bl	8000584 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <usbInit+0x70>)
 8000d0a:	f000 fe69 	bl	80019e0 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	463b      	mov	r3, r7
 8000d14:	4619      	mov	r1, r3
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <usbInit+0x70>)
 8000d18:	f000 fcde 	bl	80016d8 <HAL_GPIO_Init>

	MX_USB_DEVICE_Init();
 8000d1c:	f006 f97c 	bl	8007018 <MX_USB_DEVICE_Init>
	return ret;
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40020000 	.word	0x40020000

08000d30 <hwInit>:
 */

#include "hw.h"

void hwInit()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  bspInit();
 8000d34:	f7ff fbee 	bl	8000514 <bspInit>
  rtcInit();
 8000d38:	f7ff ff48 	bl	8000bcc <rtcInit>
  resetInit();
 8000d3c:	f7ff feea 	bl	8000b14 <resetInit>
  ledInit();
 8000d40:	f7ff fe50 	bl	80009e4 <ledInit>
  usbInit();
 8000d44:	f7ff ffba 	bl	8000cbc <usbInit>
//  uartInit();
  flashInit();
 8000d48:	f7ff fd39 	bl	80007be <flashInit>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f983 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f83c 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fc80 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <HAL_DeInit+0x54>)
 8000d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_DeInit+0x54>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_DeInit+0x54>)
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_DeInit+0x54>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_DeInit+0x54>)
 8000db6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dba:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_DeInit+0x54>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_DeInit+0x54>)
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_DeInit+0x54>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_DeInit+0x54>)
 8000dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_DeInit+0x54>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000dde:	f000 f805 	bl	8000dec <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f967 	bl	80010ee <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f92f 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	2000002c 	.word	0x2000002c
 8000e58:	20000028 	.word	0x20000028

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2000002c 	.word	0x2000002c
 8000e80:	20000140 	.word	0x20000140

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000140 	.word	0x20000140

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000002c 	.word	0x2000002c

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	; (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff3e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff31 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa2 	bl	8001040 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_FLASH_Program+0xa0>)
 800111c:	7e1b      	ldrb	r3, [r3, #24]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_FLASH_Program+0x1e>
 8001122:	2302      	movs	r3, #2
 8001124:	e03b      	b.n	800119e <HAL_FLASH_Program+0x96>
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_FLASH_Program+0xa0>)
 8001128:	2201      	movs	r2, #1
 800112a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800112c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001130:	f000 f870 	bl	8001214 <FLASH_WaitForLastOperation>
 8001134:	4603      	mov	r3, r0
 8001136:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d12b      	bne.n	8001196 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d105      	bne.n	8001150 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001144:	783b      	ldrb	r3, [r7, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f000 f91b 	bl	8001384 <FLASH_Program_Byte>
 800114e:	e016      	b.n	800117e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d105      	bne.n	8001162 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001156:	883b      	ldrh	r3, [r7, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	68b8      	ldr	r0, [r7, #8]
 800115c:	f000 f8ee 	bl	800133c <FLASH_Program_HalfWord>
 8001160:	e00d      	b.n	800117e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d105      	bne.n	8001174 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f000 f8c3 	bl	80012f8 <FLASH_Program_Word>
 8001172:	e004      	b.n	800117e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001178:	68b8      	ldr	r0, [r7, #8]
 800117a:	f000 f88b 	bl	8001294 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800117e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001182:	f000 f847 	bl	8001214 <FLASH_WaitForLastOperation>
 8001186:	4603      	mov	r3, r0
 8001188:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_FLASH_Program+0xa4>)
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_FLASH_Program+0xa4>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <HAL_FLASH_Program+0xa0>)
 8001198:	2200      	movs	r2, #0
 800119a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800119c:	7dfb      	ldrb	r3, [r7, #23]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000144 	.word	0x20000144
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_FLASH_Unlock+0x38>)
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	da0b      	bge.n	80011da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_FLASH_Unlock+0x38>)
 80011c4:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_FLASH_Unlock+0x3c>)
 80011c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_FLASH_Unlock+0x38>)
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_FLASH_Unlock+0x40>)
 80011cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_FLASH_Unlock+0x38>)
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da01      	bge.n	80011da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80011da:	79fb      	ldrb	r3, [r7, #7]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40023c00 	.word	0x40023c00
 80011ec:	45670123 	.word	0x45670123
 80011f0:	cdef89ab 	.word	0xcdef89ab

080011f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_FLASH_Lock+0x1c>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_FLASH_Lock+0x1c>)
 80011fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001202:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40023c00 	.word	0x40023c00

08001214 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <FLASH_WaitForLastOperation+0x78>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001226:	f7ff fe2d 	bl	8000e84 <HAL_GetTick>
 800122a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800122c:	e010      	b.n	8001250 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d00c      	beq.n	8001250 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d007      	beq.n	800124c <FLASH_WaitForLastOperation+0x38>
 800123c:	f7ff fe22 	bl	8000e84 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	d201      	bcs.n	8001250 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e019      	b.n	8001284 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <FLASH_WaitForLastOperation+0x7c>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e8      	bne.n	800122e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <FLASH_WaitForLastOperation+0x7c>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <FLASH_WaitForLastOperation+0x7c>)
 800126a:	2201      	movs	r2, #1
 800126c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <FLASH_WaitForLastOperation+0x7c>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800127a:	f000 f8a5 	bl	80013c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
  
}  
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000144 	.word	0x20000144
 8001290:	40023c00 	.word	0x40023c00

08001294 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <FLASH_Program_DoubleWord+0x60>)
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <FLASH_Program_DoubleWord+0x60>)
 80012a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <FLASH_Program_DoubleWord+0x60>)
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <FLASH_Program_DoubleWord+0x60>)
 80012b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <FLASH_Program_DoubleWord+0x60>)
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <FLASH_Program_DoubleWord+0x60>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80012ca:	f3bf 8f6f 	isb	sy
}
 80012ce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80012d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	000a      	movs	r2, r1
 80012de:	2300      	movs	r3, #0
 80012e0:	68f9      	ldr	r1, [r7, #12]
 80012e2:	3104      	adds	r1, #4
 80012e4:	4613      	mov	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40023c00 	.word	0x40023c00

080012f8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <FLASH_Program_Word+0x40>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <FLASH_Program_Word+0x40>)
 8001308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800130c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <FLASH_Program_Word+0x40>)
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <FLASH_Program_Word+0x40>)
 8001314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001318:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <FLASH_Program_Word+0x40>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	4a06      	ldr	r2, [pc, #24]	; (8001338 <FLASH_Program_Word+0x40>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40023c00 	.word	0x40023c00

0800133c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <FLASH_Program_HalfWord+0x44>)
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <FLASH_Program_HalfWord+0x44>)
 800134e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001352:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <FLASH_Program_HalfWord+0x44>)
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	4a09      	ldr	r2, [pc, #36]	; (8001380 <FLASH_Program_HalfWord+0x44>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <FLASH_Program_HalfWord+0x44>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <FLASH_Program_HalfWord+0x44>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	801a      	strh	r2, [r3, #0]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00

08001384 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <FLASH_Program_Byte+0x40>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <FLASH_Program_Byte+0x40>)
 8001396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800139a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <FLASH_Program_Byte+0x40>)
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <FLASH_Program_Byte+0x40>)
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <FLASH_Program_Byte+0x40>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <FLASH_Program_Byte+0x40>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	701a      	strb	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <FLASH_SetErrorCode+0xc4>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	4a2b      	ldr	r2, [pc, #172]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 80013e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80013e4:	4b29      	ldr	r3, [pc, #164]	; (800148c <FLASH_SetErrorCode+0xc4>)
 80013e6:	2210      	movs	r2, #16
 80013e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <FLASH_SetErrorCode+0xc4>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	4a24      	ldr	r2, [pc, #144]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 8001400:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <FLASH_SetErrorCode+0xc4>)
 8001404:	2220      	movs	r2, #32
 8001406:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <FLASH_SetErrorCode+0xc4>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 800141e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <FLASH_SetErrorCode+0xc4>)
 8001422:	2240      	movs	r2, #64	; 0x40
 8001424:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <FLASH_SetErrorCode+0xc4>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 800143c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <FLASH_SetErrorCode+0xc4>)
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <FLASH_SetErrorCode+0xc4>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d009      	beq.n	8001464 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 800145a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <FLASH_SetErrorCode+0xc4>)
 800145e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001462:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <FLASH_SetErrorCode+0xc4>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <FLASH_SetErrorCode+0xc8>)
 800147a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <FLASH_SetErrorCode+0xc4>)
 800147e:	2202      	movs	r2, #2
 8001480:	60da      	str	r2, [r3, #12]
  }
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40023c00 	.word	0x40023c00
 8001490:	20000144 	.word	0x20000144

08001494 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_FLASHEx_Erase+0xd8>)
 80014a8:	7e1b      	ldrb	r3, [r3, #24]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_FLASHEx_Erase+0x1e>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e058      	b.n	8001564 <HAL_FLASHEx_Erase+0xd0>
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_FLASHEx_Erase+0xd8>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014bc:	f7ff feaa 	bl	8001214 <FLASH_WaitForLastOperation>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d148      	bne.n	800155c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d115      	bne.n	8001506 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f000 f844 	bl	8001574 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014f0:	f7ff fe90 	bl	8001214 <FLASH_WaitForLastOperation>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_FLASHEx_Erase+0xdc>)
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <HAL_FLASHEx_Erase+0xdc>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6113      	str	r3, [r2, #16]
 8001504:	e028      	b.n	8001558 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	e01c      	b.n	8001548 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4619      	mov	r1, r3
 8001516:	68b8      	ldr	r0, [r7, #8]
 8001518:	f000 f850 	bl	80015bc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800151c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001520:	f7ff fe78 	bl	8001214 <FLASH_WaitForLastOperation>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_FLASHEx_Erase+0xdc>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_FLASHEx_Erase+0xdc>)
 800152e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001532:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	601a      	str	r2, [r3, #0]
          break;
 8001540:	e00a      	b.n	8001558 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3301      	adds	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4413      	add	r3, r2
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3da      	bcc.n	800150e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001558:	f000 f878 	bl	800164c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_FLASHEx_Erase+0xd8>)
 800155e:	2200      	movs	r2, #0
 8001560:	761a      	strb	r2, [r3, #24]

  return status;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000144 	.word	0x20000144
 8001570:	40023c00 	.word	0x40023c00

08001574 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <FLASH_MassErase+0x44>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <FLASH_MassErase+0x44>)
 8001586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800158a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <FLASH_MassErase+0x44>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <FLASH_MassErase+0x44>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <FLASH_MassErase+0x44>)
 800159a:	691a      	ldr	r2, [r3, #16]
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	4313      	orrs	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <FLASH_MassErase+0x44>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6113      	str	r3, [r2, #16]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023c00 	.word	0x40023c00

080015bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e010      	b.n	80015fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d103      	bne.n	80015e6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80015de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e009      	b.n	80015fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d103      	bne.n	80015f4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80015ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e002      	b.n	80015fa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80015f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <FLASH_Erase_Sector+0x8c>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <FLASH_Erase_Sector+0x8c>)
 8001600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001604:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <FLASH_Erase_Sector+0x8c>)
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	490f      	ldr	r1, [pc, #60]	; (8001648 <FLASH_Erase_Sector+0x8c>)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <FLASH_Erase_Sector+0x8c>)
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <FLASH_Erase_Sector+0x8c>)
 8001618:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800161c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <FLASH_Erase_Sector+0x8c>)
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4313      	orrs	r3, r2
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <FLASH_Erase_Sector+0x8c>)
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <FLASH_Erase_Sector+0x8c>)
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <FLASH_Erase_Sector+0x8c>)
 8001636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163a:	6113      	str	r3, [r2, #16]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40023c00 	.word	0x40023c00

0800164c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <FLASH_FlushCaches+0x88>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001658:	2b00      	cmp	r3, #0
 800165a:	d017      	beq.n	800168c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <FLASH_FlushCaches+0x88>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <FLASH_FlushCaches+0x88>)
 8001662:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001666:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <FLASH_FlushCaches+0x88>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <FLASH_FlushCaches+0x88>)
 800166e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <FLASH_FlushCaches+0x88>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <FLASH_FlushCaches+0x88>)
 800167a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800167e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <FLASH_FlushCaches+0x88>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <FLASH_FlushCaches+0x88>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <FLASH_FlushCaches+0x88>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d017      	beq.n	80016c8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <FLASH_FlushCaches+0x88>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <FLASH_FlushCaches+0x88>)
 800169e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016a2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <FLASH_FlushCaches+0x88>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <FLASH_FlushCaches+0x88>)
 80016aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <FLASH_FlushCaches+0x88>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <FLASH_FlushCaches+0x88>)
 80016b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <FLASH_FlushCaches+0x88>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <FLASH_FlushCaches+0x88>)
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
  }
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e159      	b.n	80019a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8148 	bne.w	80019a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d005      	beq.n	800172a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001726:	2b02      	cmp	r3, #2
 8001728:	d130      	bne.n	800178c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 0201 	and.w	r2, r3, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b03      	cmp	r3, #3
 8001796:	d017      	beq.n	80017c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d123      	bne.n	800181c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	08da      	lsrs	r2, r3, #3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3208      	adds	r2, #8
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0203 	and.w	r2, r3, #3
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a2 	beq.w	80019a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <HAL_GPIO_Init+0x2e8>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a56      	ldr	r2, [pc, #344]	; (80019c0 <HAL_GPIO_Init+0x2e8>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b54      	ldr	r3, [pc, #336]	; (80019c0 <HAL_GPIO_Init+0x2e8>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800187a:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_GPIO_Init+0x2ec>)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a49      	ldr	r2, [pc, #292]	; (80019c8 <HAL_GPIO_Init+0x2f0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d019      	beq.n	80018da <HAL_GPIO_Init+0x202>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_GPIO_Init+0x2f4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x1fe>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <HAL_GPIO_Init+0x2f8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x1fa>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a46      	ldr	r2, [pc, #280]	; (80019d4 <HAL_GPIO_Init+0x2fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x1f6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a45      	ldr	r2, [pc, #276]	; (80019d8 <HAL_GPIO_Init+0x300>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x1f2>
 80018c6:	2304      	movs	r3, #4
 80018c8:	e008      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018ca:	2307      	movs	r3, #7
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018ce:	2303      	movs	r3, #3
 80018d0:	e004      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x204>
 80018da:	2300      	movs	r3, #0
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f002 0203 	and.w	r2, r2, #3
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	4093      	lsls	r3, r2
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ec:	4935      	ldr	r1, [pc, #212]	; (80019c4 <HAL_GPIO_Init+0x2ec>)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018fa:	4b38      	ldr	r3, [pc, #224]	; (80019dc <HAL_GPIO_Init+0x304>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800191e:	4a2f      	ldr	r2, [pc, #188]	; (80019dc <HAL_GPIO_Init+0x304>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_GPIO_Init+0x304>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001948:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_GPIO_Init+0x304>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <HAL_GPIO_Init+0x304>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001972:	4a1a      	ldr	r2, [pc, #104]	; (80019dc <HAL_GPIO_Init+0x304>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_GPIO_Init+0x304>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800199c:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_GPIO_Init+0x304>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3301      	adds	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	f67f aea2 	bls.w	80016f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40013800 	.word	0x40013800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020c00 	.word	0x40020c00
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40013c00 	.word	0x40013c00

080019e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
 80019ec:	4613      	mov	r3, r2
 80019ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f0:	787b      	ldrb	r3, [r7, #1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019fc:	e003      	b.n	8001a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	041a      	lsls	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	619a      	str	r2, [r3, #24]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a24:	887a      	ldrh	r2, [r7, #2]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	041a      	lsls	r2, r3, #16
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	400b      	ands	r3, r1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	619a      	str	r2, [r3, #24]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a48:	b08f      	sub	sp, #60	; 0x3c
 8001a4a:	af0a      	add	r7, sp, #40	; 0x28
 8001a4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e10f      	b.n	8001c78 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f005 fc98 	bl	80073a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 f949 	bl	8003d2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	687e      	ldr	r6, [r7, #4]
 8001aa4:	466d      	mov	r5, sp
 8001aa6:	f106 0410 	add.w	r4, r6, #16
 8001aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ab6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aba:	1d33      	adds	r3, r6, #4
 8001abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f002 f821 	bl	8003b06 <USB_CoreInit>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0d0      	b.n	8001c78 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f002 f937 	bl	8003d50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	e04a      	b.n	8001b7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	333d      	adds	r3, #61	; 0x3d
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	333c      	adds	r3, #60	; 0x3c
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	b298      	uxth	r0, r3
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	3342      	adds	r3, #66	; 0x42
 8001b24:	4602      	mov	r2, r0
 8001b26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	333f      	adds	r3, #63	; 0x3f
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	3344      	adds	r3, #68	; 0x44
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b50:	7bfa      	ldrb	r2, [r7, #15]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3348      	adds	r3, #72	; 0x48
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	3350      	adds	r3, #80	; 0x50
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	7bfa      	ldrb	r2, [r7, #15]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d3af      	bcc.n	8001ae8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e044      	b.n	8001c18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b8e:	7bfa      	ldrb	r2, [r7, #15]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	3301      	adds	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d3b5      	bcc.n	8001b8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	687e      	ldr	r6, [r7, #4]
 8001c2a:	466d      	mov	r5, sp
 8001c2c:	f106 0410 	add.w	r4, r6, #16
 8001c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c40:	1d33      	adds	r3, r6, #4
 8001c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c44:	6838      	ldr	r0, [r7, #0]
 8001c46:	f002 f8cf 	bl	8003de8 <USB_DevInit>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e00d      	b.n	8001c78 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 f86f 	bl	8004d54 <USB_DevDisconnect>

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_PCD_Start+0x1c>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e020      	b.n	8001cde <HAL_PCD_Start+0x5e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d109      	bne.n	8001cc0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d005      	beq.n	8001cc0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 f821 	bl	8003d0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 f81f 	bl	8004d12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_PCD_Stop+0x1c>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e026      	b.n	8001d50 <HAL_PCD_Stop+0x6a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 f80d 	bl	8003d2e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 f81b 	bl	8004d54 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2110      	movs	r1, #16
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 f9c3 	bl	80040b0 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d109      	bne.n	8001d46 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d005      	beq.n	8001d46 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b08d      	sub	sp, #52	; 0x34
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 f8a4 	bl	8004ebc <USB_GetMode>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 839d 	bne.w	80024b6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 f808 	bl	8004d96 <USB_ReadInterrupts>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8393 	beq.w	80024b4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 ffff 	bl	8004d96 <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d107      	bne.n	8001db2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f002 0202 	and.w	r2, r2, #2
 8001db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 ffed 	bl	8004d96 <USB_ReadInterrupts>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d161      	bne.n	8001e8a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0210 	bic.w	r2, r2, #16
 8001dd4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f003 020f 	and.w	r2, r3, #15
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	3304      	adds	r3, #4
 8001df4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	0c5b      	lsrs	r3, r3, #17
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d124      	bne.n	8001e4c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d035      	beq.n	8001e7a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	6a38      	ldr	r0, [r7, #32]
 8001e22:	f002 fe24 	bl	8004a6e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e32:	441a      	add	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e44:	441a      	add	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	619a      	str	r2, [r3, #24]
 8001e4a:	e016      	b.n	8001e7a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	0c5b      	lsrs	r3, r3, #17
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	2b06      	cmp	r3, #6
 8001e56:	d110      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e5e:	2208      	movs	r2, #8
 8001e60:	4619      	mov	r1, r3
 8001e62:	6a38      	ldr	r0, [r7, #32]
 8001e64:	f002 fe03 	bl	8004a6e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e74:	441a      	add	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0210 	orr.w	r2, r2, #16
 8001e88:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 ff81 	bl	8004d96 <USB_ReadInterrupts>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e9e:	d16e      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 ff87 	bl	8004dbc <USB_ReadDevAllOutEpInterrupt>
 8001eae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001eb0:	e062      	b.n	8001f78 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d057      	beq.n	8001f6c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 ffac 	bl	8004e24 <USB_ReadDevOutEPInterrupt>
 8001ecc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00c      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fd4f 	bl	8002990 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00c      	beq.n	8001f16 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fe49 	bl	8002ba8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2310      	movs	r3, #16
 8001f30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2320      	movs	r3, #32
 8001f4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d009      	beq.n	8001f6c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f64:	461a      	mov	r2, r3
 8001f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	3301      	adds	r3, #1
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d199      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 ff07 	bl	8004d96 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f92:	f040 80c0 	bne.w	8002116 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 ff28 	bl	8004df0 <USB_ReadDevAllInEpInterrupt>
 8001fa0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fa6:	e0b2      	b.n	800210e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80a7 	beq.w	8002102 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 ff4e 	bl	8004e60 <USB_ReadDevInEPInterrupt>
 8001fc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d057      	beq.n	8002080 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69f9      	ldr	r1, [r7, #28]
 8001fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002000:	461a      	mov	r2, r3
 8002002:	2301      	movs	r3, #1
 8002004:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d132      	bne.n	8002074 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	3348      	adds	r3, #72	; 0x48
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4403      	add	r3, r0
 800202e:	3344      	adds	r3, #68	; 0x44
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4419      	add	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4403      	add	r3, r0
 8002042:	3348      	adds	r3, #72	; 0x48
 8002044:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	2b00      	cmp	r3, #0
 800204a:	d113      	bne.n	8002074 <HAL_PCD_IRQHandler+0x31c>
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	3350      	adds	r3, #80	; 0x50
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d108      	bne.n	8002074 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800206c:	461a      	mov	r2, r3
 800206e:	2101      	movs	r1, #1
 8002070:	f002 ff56 	bl	8004f20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4619      	mov	r1, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f005 fa15 	bl	80074aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4413      	add	r3, r2
 8002092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002096:	461a      	mov	r2, r3
 8002098:	2308      	movs	r3, #8
 800209a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020b2:	461a      	mov	r2, r3
 80020b4:	2310      	movs	r3, #16
 80020b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ce:	461a      	mov	r2, r3
 80020d0:	2340      	movs	r3, #64	; 0x40
 80020d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ea:	461a      	mov	r2, r3
 80020ec:	2302      	movs	r3, #2
 80020ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fbb9 	bl	8002874 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	3301      	adds	r3, #1
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	f47f af49 	bne.w	8001fa8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fe3b 	bl	8004d96 <USB_ReadInterrupts>
 8002120:	4603      	mov	r3, r0
 8002122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800212a:	d122      	bne.n	8002172 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002146:	2b01      	cmp	r3, #1
 8002148:	d108      	bne.n	800215c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002152:	2100      	movs	r1, #0
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fdc5 	bl	8002ce4 <HAL_PCDEx_LPM_Callback>
 800215a:	e002      	b.n	8002162 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f005 fa11 	bl	8007584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f002 fe0d 	bl	8004d96 <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002186:	d112      	bne.n	80021ae <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d102      	bne.n	800219e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f005 f9cd 	bl	8007538 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80021ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 fdef 	bl	8004d96 <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c2:	f040 80c7 	bne.w	8002354 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2110      	movs	r1, #16
 80021e0:	4618      	mov	r0, r3
 80021e2:	f001 ff65 	bl	80040b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ea:	e056      	b.n	800229a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f8:	461a      	mov	r2, r3
 80021fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002210:	0151      	lsls	r1, r2, #5
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	440a      	add	r2, r1
 8002216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800221a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800221e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002230:	0151      	lsls	r1, r2, #5
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	440a      	add	r2, r1
 8002236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800223a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800223e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224c:	461a      	mov	r2, r3
 800224e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002252:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002264:	0151      	lsls	r1, r2, #5
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	440a      	add	r2, r1
 800226a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800226e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002272:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002284:	0151      	lsls	r1, r2, #5
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	440a      	add	r2, r1
 800228a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800228e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002292:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	3301      	adds	r3, #1
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d3a3      	bcc.n	80021ec <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d016      	beq.n	80022ee <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d0:	f043 030b 	orr.w	r3, r3, #11
 80022d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e6:	f043 030b 	orr.w	r3, r3, #11
 80022ea:	6453      	str	r3, [r2, #68]	; 0x44
 80022ec:	e015      	b.n	800231a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002300:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002304:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002314:	f043 030b 	orr.w	r3, r3, #11
 8002318:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002328:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800232c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800233e:	461a      	mov	r2, r3
 8002340:	f002 fdee 	bl	8004f20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f002 fd1c 	bl	8004d96 <USB_ReadInterrupts>
 800235e:	4603      	mov	r3, r0
 8002360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002368:	d124      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f002 fdb2 	bl	8004ed8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f001 fef6 	bl	800416a <USB_GetDevSpeed>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681c      	ldr	r4, [r3, #0]
 800238a:	f001 f8db 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 800238e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	4620      	mov	r0, r4
 800239a:	f001 fc15 	bl	8003bc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f005 f8ab 	bl	80074fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fcec 	bl	8004d96 <USB_ReadInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d10a      	bne.n	80023de <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f005 f888 	bl	80074de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f002 0208 	and.w	r2, r2, #8
 80023dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f002 fcd7 	bl	8004d96 <USB_ReadInterrupts>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023f2:	d10f      	bne.n	8002414 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	4619      	mov	r1, r3
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f005 f8e0 	bl	80075c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f002 fcbc 	bl	8004d96 <USB_ReadInterrupts>
 800241e:	4603      	mov	r3, r0
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002428:	d10f      	bne.n	800244a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f005 f8b3 	bl	80075a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fca1 	bl	8004d96 <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245e:	d10a      	bne.n	8002476 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f005 f8c1 	bl	80075e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f002 fc8b 	bl	8004d96 <USB_ReadInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b04      	cmp	r3, #4
 8002488:	d115      	bne.n	80024b6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f005 f8b1 	bl	8007604 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	e000      	b.n	80024b6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80024b4:	bf00      	nop
    }
  }
}
 80024b6:	3734      	adds	r7, #52	; 0x34
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}

080024bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_PCD_SetAddress+0x1a>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e013      	b.n	80024fe <HAL_PCD_SetAddress+0x42>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fbe9 	bl	8004cc6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	4608      	mov	r0, r1
 8002510:	4611      	mov	r1, r2
 8002512:	461a      	mov	r2, r3
 8002514:	4603      	mov	r3, r0
 8002516:	70fb      	strb	r3, [r7, #3]
 8002518:	460b      	mov	r3, r1
 800251a:	803b      	strh	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002528:	2b00      	cmp	r3, #0
 800252a:	da0f      	bge.n	800254c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	f003 020f 	and.w	r2, r3, #15
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	3338      	adds	r3, #56	; 0x38
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	3304      	adds	r3, #4
 8002542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	705a      	strb	r2, [r3, #1]
 800254a:	e00f      	b.n	800256c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	f003 020f 	and.w	r2, r3, #15
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	3304      	adds	r3, #4
 8002564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002578:	883a      	ldrh	r2, [r7, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	78ba      	ldrb	r2, [r7, #2]
 8002582:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	785b      	ldrb	r3, [r3, #1]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002596:	78bb      	ldrb	r3, [r7, #2]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d102      	bne.n	80025a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_PCD_EP_Open+0xaa>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e00e      	b.n	80025ce <HAL_PCD_EP_Open+0xc8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68f9      	ldr	r1, [r7, #12]
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fdf8 	bl	80041b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80025cc:	7afb      	ldrb	r3, [r7, #11]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	460b      	mov	r3, r1
 80025e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e6:	7afb      	ldrb	r3, [r7, #11]
 80025e8:	f003 020f 	and.w	r2, r3, #15
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	3304      	adds	r3, #4
 80025fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2200      	movs	r2, #0
 8002616:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002618:	7afb      	ldrb	r3, [r7, #11]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	b2da      	uxtb	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d102      	bne.n	8002632 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002632:	7afb      	ldrb	r3, [r7, #11]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	6979      	ldr	r1, [r7, #20]
 800264a:	f002 f87f 	bl	800474c <USB_EP0StartXfer>
 800264e:	e008      	b.n	8002662 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	6979      	ldr	r1, [r7, #20]
 800265e:	f001 fe31 	bl	80042c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	460b      	mov	r3, r1
 800267a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800267c:	7afb      	ldrb	r3, [r7, #11]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	3338      	adds	r3, #56	; 0x38
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ac:	7afb      	ldrb	r3, [r7, #11]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	6979      	ldr	r1, [r7, #20]
 80026de:	f002 f835 	bl	800474c <USB_EP0StartXfer>
 80026e2:	e008      	b.n	80026f6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	6979      	ldr	r1, [r7, #20]
 80026f2:	f001 fde7 	bl	80042c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	f003 020f 	and.w	r2, r3, #15
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d901      	bls.n	800271e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e050      	b.n	80027c0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800271e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002722:	2b00      	cmp	r3, #0
 8002724:	da0f      	bge.n	8002746 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 020f 	and.w	r2, r3, #15
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	3338      	adds	r3, #56	; 0x38
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	3304      	adds	r3, #4
 800273c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	705a      	strb	r2, [r3, #1]
 8002744:	e00d      	b.n	8002762 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	3304      	adds	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_PCD_EP_SetStall+0x82>
 800277e:	2302      	movs	r3, #2
 8002780:	e01e      	b.n	80027c0 <HAL_PCD_EP_SetStall+0xc0>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	4618      	mov	r0, r3
 8002792:	f002 f9c4 	bl	8004b1e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	b2d9      	uxtb	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027b0:	461a      	mov	r2, r3
 80027b2:	f002 fbb5 	bl	8004f20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 020f 	and.w	r2, r3, #15
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d901      	bls.n	80027e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e042      	b.n	800286c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da0f      	bge.n	800280e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f003 020f 	and.w	r2, r3, #15
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	3338      	adds	r3, #56	; 0x38
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	705a      	strb	r2, [r3, #1]
 800280c:	e00f      	b.n	800282e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	f003 020f 	and.w	r2, r3, #15
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	3304      	adds	r3, #4
 8002826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_PCD_EP_ClrStall+0x86>
 800284a:	2302      	movs	r3, #2
 800284c:	e00e      	b.n	800286c <HAL_PCD_EP_ClrStall+0xa4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	4618      	mov	r0, r3
 800285e:	f002 f9cc 	bl	8004bfa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af02      	add	r7, sp, #8
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	3338      	adds	r3, #56	; 0x38
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	3304      	adds	r3, #4
 800289a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d901      	bls.n	80028ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e06c      	b.n	8002986 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d902      	bls.n	80028c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	3303      	adds	r3, #3
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028d0:	e02b      	b.n	800292a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d902      	bls.n	80028ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3303      	adds	r3, #3
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	68d9      	ldr	r1, [r3, #12]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002906:	b2db      	uxtb	r3, r3
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4603      	mov	r3, r0
 800290c:	6978      	ldr	r0, [r7, #20]
 800290e:	f002 f870 	bl	80049f2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	441a      	add	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	441a      	add	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	b29b      	uxth	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	429a      	cmp	r2, r3
 800293e:	d809      	bhi.n	8002954 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002948:	429a      	cmp	r2, r3
 800294a:	d203      	bcs.n	8002954 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1be      	bne.n	80028d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	429a      	cmp	r2, r3
 800295e:	d811      	bhi.n	8002984 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	2201      	movs	r2, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	43db      	mvns	r3, r3
 800297a:	6939      	ldr	r1, [r7, #16]
 800297c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002980:	4013      	ands	r3, r2
 8002982:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	333c      	adds	r3, #60	; 0x3c
 80029a8:	3304      	adds	r3, #4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	f040 80a0 	bne.w	8002b08 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a72      	ldr	r2, [pc, #456]	; (8002ba0 <PCD_EP_OutXfrComplete_int+0x210>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	f240 80dd 	bls.w	8002b96 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80d7 	beq.w	8002b96 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f4:	461a      	mov	r2, r3
 80029f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029fa:	6093      	str	r3, [r2, #8]
 80029fc:	e0cb      	b.n	8002b96 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d009      	beq.n	8002a1c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a14:	461a      	mov	r2, r3
 8002a16:	2320      	movs	r3, #32
 8002a18:	6093      	str	r3, [r2, #8]
 8002a1a:	e0bc      	b.n	8002b96 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 80b7 	bne.w	8002b96 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ba0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d90f      	bls.n	8002a50 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a46:	461a      	mov	r2, r3
 8002a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a4c:	6093      	str	r3, [r2, #8]
 8002a4e:	e0a2      	b.n	8002b96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a62:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	0159      	lsls	r1, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002a76:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4403      	add	r3, r0
 8002a86:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a8a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4403      	add	r3, r0
 8002aae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4419      	add	r1, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4403      	add	r3, r0
 8002ac4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ac8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d114      	bne.n	8002afa <PCD_EP_OutXfrComplete_int+0x16a>
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d108      	bne.n	8002afa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002af2:	461a      	mov	r2, r3
 8002af4:	2101      	movs	r1, #1
 8002af6:	f002 fa13 	bl	8004f20 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4619      	mov	r1, r3
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f004 fcb7 	bl	8007474 <HAL_PCD_DataOutStageCallback>
 8002b06:	e046      	b.n	8002b96 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4a26      	ldr	r2, [pc, #152]	; (8002ba4 <PCD_EP_OutXfrComplete_int+0x214>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d124      	bne.n	8002b5a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b26:	461a      	mov	r2, r3
 8002b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2c:	6093      	str	r3, [r2, #8]
 8002b2e:	e032      	b.n	8002b96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b46:	461a      	mov	r2, r3
 8002b48:	2320      	movs	r3, #32
 8002b4a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	4619      	mov	r1, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f004 fc8e 	bl	8007474 <HAL_PCD_DataOutStageCallback>
 8002b58:	e01d      	b.n	8002b96 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d114      	bne.n	8002b8a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d108      	bne.n	8002b8a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b82:	461a      	mov	r2, r3
 8002b84:	2100      	movs	r1, #0
 8002b86:	f002 f9cb 	bl	8004f20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f004 fc6f 	bl	8007474 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	4f54300a 	.word	0x4f54300a
 8002ba4:	4f54310a 	.word	0x4f54310a

08002ba8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	333c      	adds	r3, #60	; 0x3c
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d90e      	bls.n	8002bfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f004 fc27 	bl	8007450 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d90c      	bls.n	8002c24 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d108      	bne.n	8002c24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2101      	movs	r1, #1
 8002c20:	f002 f97e 	bl	8004f20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	4f54300a 	.word	0x4f54300a

08002c34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	70fb      	strb	r3, [r7, #3]
 8002c40:	4613      	mov	r3, r2
 8002c42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c52:	883b      	ldrh	r3, [r7, #0]
 8002c54:	0419      	lsls	r1, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c60:	e028      	b.n	8002cb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	e00d      	b.n	8002c92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	3340      	adds	r3, #64	; 0x40
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4413      	add	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d3ec      	bcc.n	8002c76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c9c:	883b      	ldrh	r3, [r7, #0]
 8002c9e:	0418      	lsls	r0, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	4302      	orrs	r2, r0
 8002cac:	3340      	adds	r3, #64	; 0x40
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e267      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d075      	beq.n	8002e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1a:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b85      	ldr	r3, [pc, #532]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	4b7e      	ldr	r3, [pc, #504]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x108>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d157      	bne.n	8002e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e242      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x74>
 8002d62:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a75      	ldr	r2, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x98>
 8002d7a:	4b70      	ldr	r3, [pc, #448]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6f      	ldr	r2, [pc, #444]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b6d      	ldr	r3, [pc, #436]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6c      	ldr	r2, [pc, #432]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d94:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a68      	ldr	r2, [pc, #416]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a65      	ldr	r2, [pc, #404]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe f866 	bl	8000e84 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe f862 	bl	8000e84 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e207      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f852 	bl	8000e84 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe f84e 	bl	8000e84 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1f3      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b51      	ldr	r3, [pc, #324]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0xe8>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d063      	beq.n	8002eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e12:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d11c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b44      	ldr	r3, [pc, #272]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1c7      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4937      	ldr	r1, [pc, #220]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	e03a      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fe f807 	bl	8000e84 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7fe f803 	bl	8000e84 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1a8      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4925      	ldr	r1, [pc, #148]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	e015      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fd ffe6 	bl	8000e84 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7fd ffe2 	bl	8000e84 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e187      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d036      	beq.n	8002f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fd ffc6 	bl	8000e84 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fd ffc2 	bl	8000e84 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e167      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x200>
 8002f1a:	e01b      	b.n	8002f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fd ffaf 	bl	8000e84 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	e00e      	b.n	8002f48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fd ffab 	bl	8000e84 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d907      	bls.n	8002f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e150      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470000 	.word	0x42470000
 8002f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ea      	bne.n	8002f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8097 	beq.w	8003090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f66:	4b81      	ldr	r3, [pc, #516]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b7d      	ldr	r3, [pc, #500]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a7c      	ldr	r2, [pc, #496]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b7a      	ldr	r3, [pc, #488]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b77      	ldr	r3, [pc, #476]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b74      	ldr	r3, [pc, #464]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a73      	ldr	r2, [pc, #460]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fd ff6b 	bl	8000e84 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fd ff67 	bl	8000e84 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e10c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2ea>
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a63      	ldr	r2, [pc, #396]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	e01c      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x30c>
 8002fee:	4b5f      	ldr	r3, [pc, #380]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a5b      	ldr	r2, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8003008:	4b58      	ldr	r3, [pc, #352]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a57      	ldr	r2, [pc, #348]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	4b55      	ldr	r3, [pc, #340]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a54      	ldr	r2, [pc, #336]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0304 	bic.w	r3, r3, #4
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fd ff2c 	bl	8000e84 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fd ff28 	bl	8000e84 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0cb      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ee      	beq.n	8003030 <HAL_RCC_OscConfig+0x334>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7fd ff16 	bl	8000e84 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fd ff12 	bl	8000e84 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0b5      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	4b3e      	ldr	r3, [pc, #248]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1ee      	bne.n	800305c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003084:	4b39      	ldr	r3, [pc, #228]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	4a38      	ldr	r2, [pc, #224]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a1 	beq.w	80031dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309a:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_RCC_OscConfig+0x470>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d05c      	beq.n	8003160 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d141      	bne.n	8003132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fd fee6 	bl	8000e84 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fd fee2 	bl	8000e84 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e087      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x470>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	3b01      	subs	r3, #1
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	491b      	ldr	r1, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fd febb 	bl	8000e84 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003112:	f7fd feb7 	bl	8000e84 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e05c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x416>
 8003130:	e054      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fd fea4 	bl	8000e84 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7fd fea0 	bl	8000e84 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e045      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_OscConfig+0x470>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x444>
 800315e:	e03d      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e038      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 800316c:	40023800 	.word	0x40023800
 8003170:	40007000 	.word	0x40007000
 8003174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_RCC_OscConfig+0x4ec>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d028      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d121      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d11a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031a8:	4013      	ands	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d111      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	3b01      	subs	r3, #1
 80031c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0cc      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b68      	ldr	r3, [pc, #416]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d90c      	bls.n	8003228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b8      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a58      	ldr	r2, [pc, #352]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800324a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a52      	ldr	r2, [pc, #328]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	494d      	ldr	r1, [pc, #308]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d044      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d119      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e067      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4934      	ldr	r1, [pc, #208]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fd fdd2 	bl	8000e84 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fd fdce 	bl	8000e84 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e04f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d20c      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e032      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4916      	ldr	r1, [pc, #88]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490e      	ldr	r1, [pc, #56]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f821 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8003376:	4602      	mov	r2, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	490a      	ldr	r1, [pc, #40]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	5ccb      	ldrb	r3, [r1, r3]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd fd32 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023c00 	.word	0x40023c00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	08007aac 	.word	0x08007aac
 80033b0:	20000000 	.word	0x20000000
 80033b4:	20000028 	.word	0x20000028

080033b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b090      	sub	sp, #64	; 0x40
 80033be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	637b      	str	r3, [r7, #52]	; 0x34
 80033c4:	2300      	movs	r3, #0
 80033c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c8:	2300      	movs	r3, #0
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d0:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d00d      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x40>
 80033dc:	2b08      	cmp	r3, #8
 80033de:	f200 80a1 	bhi.w	8003524 <HAL_RCC_GetSysClockFreq+0x16c>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x34>
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d003      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ea:	e09b      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b53      	ldr	r3, [pc, #332]	; (800353c <HAL_RCC_GetSysClockFreq+0x184>)
 80033ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033f0:	e09b      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f2:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033f6:	e098      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f8:	4b4f      	ldr	r3, [pc, #316]	; (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003400:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003402:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d028      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	2200      	movs	r2, #0
 8003416:	623b      	str	r3, [r7, #32]
 8003418:	627a      	str	r2, [r7, #36]	; 0x24
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003420:	2100      	movs	r1, #0
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_GetSysClockFreq+0x188>)
 8003424:	fb03 f201 	mul.w	r2, r3, r1
 8003428:	2300      	movs	r3, #0
 800342a:	fb00 f303 	mul.w	r3, r0, r3
 800342e:	4413      	add	r3, r2
 8003430:	4a43      	ldr	r2, [pc, #268]	; (8003540 <HAL_RCC_GetSysClockFreq+0x188>)
 8003432:	fba0 1202 	umull	r1, r2, r0, r2
 8003436:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003438:	460a      	mov	r2, r1
 800343a:	62ba      	str	r2, [r7, #40]	; 0x28
 800343c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343e:	4413      	add	r3, r2
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	2200      	movs	r2, #0
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	61fa      	str	r2, [r7, #28]
 800344a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800344e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003452:	f7fc fec1 	bl	80001d8 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4613      	mov	r3, r2
 800345c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800345e:	e053      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003460:	4b35      	ldr	r3, [pc, #212]	; (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	2200      	movs	r2, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	617a      	str	r2, [r7, #20]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003472:	f04f 0b00 	mov.w	fp, #0
 8003476:	4652      	mov	r2, sl
 8003478:	465b      	mov	r3, fp
 800347a:	f04f 0000 	mov.w	r0, #0
 800347e:	f04f 0100 	mov.w	r1, #0
 8003482:	0159      	lsls	r1, r3, #5
 8003484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003488:	0150      	lsls	r0, r2, #5
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	ebb2 080a 	subs.w	r8, r2, sl
 8003492:	eb63 090b 	sbc.w	r9, r3, fp
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034aa:	ebb2 0408 	subs.w	r4, r2, r8
 80034ae:	eb63 0509 	sbc.w	r5, r3, r9
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	00eb      	lsls	r3, r5, #3
 80034bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c0:	00e2      	lsls	r2, r4, #3
 80034c2:	4614      	mov	r4, r2
 80034c4:	461d      	mov	r5, r3
 80034c6:	eb14 030a 	adds.w	r3, r4, sl
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	eb45 030b 	adc.w	r3, r5, fp
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034de:	4629      	mov	r1, r5
 80034e0:	028b      	lsls	r3, r1, #10
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034e8:	4621      	mov	r1, r4
 80034ea:	028a      	lsls	r2, r1, #10
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f2:	2200      	movs	r2, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	60fa      	str	r2, [r7, #12]
 80034f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034fc:	f7fc fe6c 	bl	80001d8 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	3301      	adds	r3, #1
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003518:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003522:	e002      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetSysClockFreq+0x184>)
 8003526:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800352c:	4618      	mov	r0, r3
 800352e:	3740      	adds	r7, #64	; 0x40
 8003530:	46bd      	mov	sp, r7
 8003532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	00f42400 	.word	0x00f42400
 8003540:	017d7840 	.word	0x017d7840

08003544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <HAL_RCC_GetHCLKFreq+0x14>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000000 	.word	0x20000000

0800355c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003580:	2b00      	cmp	r3, #0
 8003582:	d038      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003584:	4b68      	ldr	r3, [pc, #416]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800358a:	f7fd fc7b 	bl	8000e84 <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003592:	f7fd fc77 	bl	8000e84 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0bd      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035a4:	4b61      	ldr	r3, [pc, #388]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	019b      	lsls	r3, r3, #6
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	071b      	lsls	r3, r3, #28
 80035c2:	495a      	ldr	r1, [pc, #360]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035ca:	4b57      	ldr	r3, [pc, #348]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035d0:	f7fd fc58 	bl	8000e84 <HAL_GetTick>
 80035d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80035d8:	f7fd fc54 	bl	8000e84 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e09a      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035ea:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8083 	beq.w	800370a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	4b48      	ldr	r3, [pc, #288]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	4a47      	ldr	r2, [pc, #284]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003612:	6413      	str	r3, [r2, #64]	; 0x40
 8003614:	4b45      	ldr	r3, [pc, #276]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003620:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a42      	ldr	r2, [pc, #264]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800362c:	f7fd fc2a 	bl	8000e84 <HAL_GetTick>
 8003630:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003634:	f7fd fc26 	bl	8000e84 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e06c      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003652:	4b36      	ldr	r3, [pc, #216]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02f      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	429a      	cmp	r2, r3
 800366e:	d028      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003670:	4b2e      	ldr	r3, [pc, #184]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003678:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800367a:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003680:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003686:	4a29      	ldr	r2, [pc, #164]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d114      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003698:	f7fd fbf4 	bl	8000e84 <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fd fbf0 	bl	8000e84 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e034      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	4b1d      	ldr	r3, [pc, #116]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ee      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ce:	d10d      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x190>
 80036d0:	4b16      	ldr	r3, [pc, #88]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80036e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e4:	4911      	ldr	r1, [pc, #68]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
 80036ea:	e005      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a0e      	ldr	r2, [pc, #56]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036f6:	6093      	str	r3, [r2, #8]
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003704:	4909      	ldr	r1, [pc, #36]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003706:	4313      	orrs	r3, r2
 8003708:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7d1a      	ldrb	r2, [r3, #20]
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800371c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	42470068 	.word	0x42470068
 800372c:	40023800 	.word	0x40023800
 8003730:	40007000 	.word	0x40007000
 8003734:	42470e40 	.word	0x42470e40
 8003738:	424711e0 	.word	0x424711e0

0800373c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003742:	f7fd fb9f 	bl	8000e84 <HAL_GetTick>
 8003746:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003748:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a5c      	ldr	r2, [pc, #368]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003756:	f7fd fb95 	bl	8000e84 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0a7      	b.n	80038b8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003768:	4b55      	ldr	r3, [pc, #340]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003774:	4b52      	ldr	r3, [pc, #328]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800377a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800377e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003780:	f7fd fb80 	bl	8000e84 <HAL_GetTick>
 8003784:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003786:	4b4e      	ldr	r3, [pc, #312]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378e:	f7fd fb79 	bl	8000e84 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e089      	b.n	80038b8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80037a4:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ee      	bne.n	800378e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80037b0:	f7fd fb68 	bl	8000e84 <HAL_GetTick>
 80037b4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80037b6:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a41      	ldr	r2, [pc, #260]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 80037bc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80037c0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd fb5e 	bl	8000e84 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e070      	b.n	80038b8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80037d6:	4b3a      	ldr	r3, [pc, #232]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80037e2:	f7fd fb4f 	bl	8000e84 <HAL_GetTick>
 80037e6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a34      	ldr	r2, [pc, #208]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 80037ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fd fb45 	bl	8000e84 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e057      	b.n	80038b8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003808:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003814:	f7fd fb36 	bl	8000e84 <HAL_GetTick>
 8003818:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800381a:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a28      	ldr	r2, [pc, #160]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003820:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003824:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003828:	f7fd fb2c 	bl	8000e84 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e03e      	b.n	80038b8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800383a:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003846:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003848:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_RCC_DeInit+0x188>)
 800384a:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800384c:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800384e:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <HAL_RCC_DeInit+0x18c>)
 8003850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003854:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800385a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800385e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800386a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003872:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003876:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a10      	ldr	r2, [pc, #64]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800387e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003882:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003884:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003888:	4a0d      	ldr	r2, [pc, #52]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003894:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <HAL_RCC_DeInit+0x184>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_DeInit+0x190>)
 800389e:	4a0c      	ldr	r2, [pc, #48]	; (80038d0 <HAL_RCC_DeInit+0x194>)
 80038a0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_RCC_DeInit+0x198>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd faa8 	bl	8000dfc <HAL_InitTick>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80038b6:	2300      	movs	r3, #0
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	04003010 	.word	0x04003010
 80038c8:	20003010 	.word	0x20003010
 80038cc:	20000000 	.word	0x20000000
 80038d0:	00f42400 	.word	0x00f42400
 80038d4:	20000028 	.word	0x20000028

080038d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e083      	b.n	80039f2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	7f5b      	ldrb	r3, [r3, #29]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd f9b2 	bl	8000c64 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	22ca      	movs	r2, #202	; 0xca
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2253      	movs	r2, #83	; 0x53
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f897 	bl	8003a4a <RTC_EnterInitMode>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	22ff      	movs	r2, #255	; 0xff
 8003928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2204      	movs	r2, #4
 800392e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e05e      	b.n	80039f2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003946:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6899      	ldr	r1, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d2      	ldr	r2, [r2, #12]
 800396e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6919      	ldr	r1, [r3, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	041a      	lsls	r2, r3, #16
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003992:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10e      	bne.n	80039c0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f829 	bl	80039fa <HAL_RTC_WaitForSynchro>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	22ff      	movs	r2, #255	; 0xff
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2204      	movs	r2, #4
 80039ba:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e018      	b.n	80039f2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	22ff      	movs	r2, #255	; 0xff
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80039f0:	2300      	movs	r3, #0
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a14:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a16:	f7fd fa35 	bl	8000e84 <HAL_GetTick>
 8003a1a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a1c:	e009      	b.n	8003a32 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a1e:	f7fd fa31 	bl	8000e84 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2c:	d901      	bls.n	8003a32 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e007      	b.n	8003a42 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ee      	beq.n	8003a1e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d119      	bne.n	8003a98 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a6e:	f7fd fa09 	bl	8000e84 <HAL_GetTick>
 8003a72:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a74:	e009      	b.n	8003a8a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a76:	f7fd fa05 	bl	8000e84 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a84:	d901      	bls.n	8003a8a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e007      	b.n	8003a9a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ee      	beq.n	8003a76 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b087      	sub	sp, #28
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3350      	adds	r3, #80	; 0x50
 8003ab8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
}
 8003aca:	bf00      	nop
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b085      	sub	sp, #20
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3350      	adds	r3, #80	; 0x50
 8003aea:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b06:	b084      	sub	sp, #16
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	f107 001c 	add.w	r0, r7, #28
 8003b14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d122      	bne.n	8003b64 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d105      	bne.n	8003b58 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f001 fa3f 	bl	8004fdc <USB_CoreReset>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	e01a      	b.n	8003b9a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f001 fa33 	bl	8004fdc <USB_CoreReset>
 8003b76:	4603      	mov	r3, r0
 8003b78:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
 8003b8c:	e005      	b.n	8003b9a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10b      	bne.n	8003bb8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f043 0206 	orr.w	r2, r3, #6
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bc4:	b004      	add	sp, #16
 8003bc6:	4770      	bx	lr

08003bc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d165      	bne.n	8003ca8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4a41      	ldr	r2, [pc, #260]	; (8003ce4 <USB_SetTurnaroundTime+0x11c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d906      	bls.n	8003bf2 <USB_SetTurnaroundTime+0x2a>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4a40      	ldr	r2, [pc, #256]	; (8003ce8 <USB_SetTurnaroundTime+0x120>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d202      	bcs.n	8003bf2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003bec:	230f      	movs	r3, #15
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e062      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4a3c      	ldr	r2, [pc, #240]	; (8003ce8 <USB_SetTurnaroundTime+0x120>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d306      	bcc.n	8003c08 <USB_SetTurnaroundTime+0x40>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4a3b      	ldr	r2, [pc, #236]	; (8003cec <USB_SetTurnaroundTime+0x124>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d202      	bcs.n	8003c08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003c02:	230e      	movs	r3, #14
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e057      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4a38      	ldr	r2, [pc, #224]	; (8003cec <USB_SetTurnaroundTime+0x124>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d306      	bcc.n	8003c1e <USB_SetTurnaroundTime+0x56>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4a37      	ldr	r2, [pc, #220]	; (8003cf0 <USB_SetTurnaroundTime+0x128>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d202      	bcs.n	8003c1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003c18:	230d      	movs	r3, #13
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e04c      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4a33      	ldr	r2, [pc, #204]	; (8003cf0 <USB_SetTurnaroundTime+0x128>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d306      	bcc.n	8003c34 <USB_SetTurnaroundTime+0x6c>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4a32      	ldr	r2, [pc, #200]	; (8003cf4 <USB_SetTurnaroundTime+0x12c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d802      	bhi.n	8003c34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003c2e:	230c      	movs	r3, #12
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e041      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <USB_SetTurnaroundTime+0x12c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d906      	bls.n	8003c4a <USB_SetTurnaroundTime+0x82>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <USB_SetTurnaroundTime+0x130>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d802      	bhi.n	8003c4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c44:	230b      	movs	r3, #11
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e036      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4a2a      	ldr	r2, [pc, #168]	; (8003cf8 <USB_SetTurnaroundTime+0x130>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d906      	bls.n	8003c60 <USB_SetTurnaroundTime+0x98>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4a29      	ldr	r2, [pc, #164]	; (8003cfc <USB_SetTurnaroundTime+0x134>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d802      	bhi.n	8003c60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c5a:	230a      	movs	r3, #10
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e02b      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <USB_SetTurnaroundTime+0x134>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d906      	bls.n	8003c76 <USB_SetTurnaroundTime+0xae>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4a25      	ldr	r2, [pc, #148]	; (8003d00 <USB_SetTurnaroundTime+0x138>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d202      	bcs.n	8003c76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c70:	2309      	movs	r3, #9
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e020      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <USB_SetTurnaroundTime+0x138>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d306      	bcc.n	8003c8c <USB_SetTurnaroundTime+0xc4>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4a20      	ldr	r2, [pc, #128]	; (8003d04 <USB_SetTurnaroundTime+0x13c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d802      	bhi.n	8003c8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c86:	2308      	movs	r3, #8
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e015      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <USB_SetTurnaroundTime+0x13c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d906      	bls.n	8003ca2 <USB_SetTurnaroundTime+0xda>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <USB_SetTurnaroundTime+0x140>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d202      	bcs.n	8003ca2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c9c:	2307      	movs	r3, #7
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e00a      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ca2:	2306      	movs	r3, #6
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e007      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003cae:	2309      	movs	r3, #9
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e001      	b.n	8003cb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003cb4:	2309      	movs	r3, #9
 8003cb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	029b      	lsls	r3, r3, #10
 8003ccc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	00d8acbf 	.word	0x00d8acbf
 8003ce8:	00e4e1c0 	.word	0x00e4e1c0
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	01067380 	.word	0x01067380
 8003cf4:	011a499f 	.word	0x011a499f
 8003cf8:	01312cff 	.word	0x01312cff
 8003cfc:	014ca43f 	.word	0x014ca43f
 8003d00:	016e3600 	.word	0x016e3600
 8003d04:	01a6ab1f 	.word	0x01a6ab1f
 8003d08:	01e84800 	.word	0x01e84800

08003d0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f043 0201 	orr.w	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d115      	bne.n	8003d9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f7fd f88c 	bl	8000e9c <HAL_Delay>
      ms++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 f896 	bl	8004ebc <USB_GetMode>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d01e      	beq.n	8003dd4 <USB_SetCurrentMode+0x84>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b31      	cmp	r3, #49	; 0x31
 8003d9a:	d9f0      	bls.n	8003d7e <USB_SetCurrentMode+0x2e>
 8003d9c:	e01a      	b.n	8003dd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d115      	bne.n	8003dd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003db0:	2001      	movs	r0, #1
 8003db2:	f7fd f873 	bl	8000e9c <HAL_Delay>
      ms++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3301      	adds	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f001 f87d 	bl	8004ebc <USB_GetMode>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <USB_SetCurrentMode+0x84>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b31      	cmp	r3, #49	; 0x31
 8003dcc:	d9f0      	bls.n	8003db0 <USB_SetCurrentMode+0x60>
 8003dce:	e001      	b.n	8003dd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e005      	b.n	8003de0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b32      	cmp	r3, #50	; 0x32
 8003dd8:	d101      	bne.n	8003dde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003de8:	b084      	sub	sp, #16
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	e009      	b.n	8003e1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3340      	adds	r3, #64	; 0x40
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	2200      	movs	r2, #0
 8003e14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b0e      	cmp	r3, #14
 8003e20:	d9f2      	bls.n	8003e08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d11c      	bne.n	8003e62 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e36:	f043 0302 	orr.w	r3, r3, #2
 8003e3a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e60:	e00b      	b.n	8003e7a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e80:	461a      	mov	r2, r3
 8003e82:	2300      	movs	r3, #0
 8003e84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e94:	461a      	mov	r2, r3
 8003e96:	680b      	ldr	r3, [r1, #0]
 8003e98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d10c      	bne.n	8003eba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d104      	bne.n	8003eb0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f945 	bl	8004138 <USB_SetDevSpeed>
 8003eae:	e008      	b.n	8003ec2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f940 	bl	8004138 <USB_SetDevSpeed>
 8003eb8:	e003      	b.n	8003ec2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003eba:	2103      	movs	r1, #3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f93b 	bl	8004138 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ec2:	2110      	movs	r1, #16
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f8f3 	bl	80040b0 <USB_FlushTxFifo>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f90f 	bl	80040f8 <USB_FlushRxFifo>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eea:	461a      	mov	r2, r3
 8003eec:	2300      	movs	r3, #0
 8003eee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2300      	movs	r3, #0
 8003efa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f02:	461a      	mov	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	e043      	b.n	8003f96 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f24:	d118      	bne.n	8003f58 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	e013      	b.n	8003f6a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e008      	b.n	8003f6a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f64:	461a      	mov	r2, r3
 8003f66:	2300      	movs	r3, #0
 8003f68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f76:	461a      	mov	r2, r3
 8003f78:	2300      	movs	r3, #0
 8003f7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	3301      	adds	r3, #1
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d3b7      	bcc.n	8003f0e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e043      	b.n	800402c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fba:	d118      	bne.n	8003fee <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e013      	b.n	8004000 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e008      	b.n	8004000 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	461a      	mov	r2, r3
 800400e:	2300      	movs	r3, #0
 8004010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	461a      	mov	r2, r3
 8004020:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004024:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	3301      	adds	r3, #1
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	429a      	cmp	r2, r3
 8004032:	d3b7      	bcc.n	8003fa4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004046:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004054:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f043 0210 	orr.w	r2, r3, #16
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <USB_DevInit+0x2c4>)
 800406e:	4313      	orrs	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f043 0208 	orr.w	r2, r3, #8
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d107      	bne.n	800409c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a8:	b004      	add	sp, #16
 80040aa:	4770      	bx	lr
 80040ac:	803c3800 	.word	0x803c3800

080040b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	f043 0220 	orr.w	r2, r3, #32
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3301      	adds	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <USB_FlushTxFifo+0x44>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e006      	b.n	80040e8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d0f1      	beq.n	80040ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	00030d40 	.word	0x00030d40

080040f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2210      	movs	r2, #16
 8004108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3301      	adds	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	4a08      	ldr	r2, [pc, #32]	; (8004134 <USB_FlushRxFifo+0x3c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e006      	b.n	8004128 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b10      	cmp	r3, #16
 8004124:	d0f1      	beq.n	800410a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	00030d40 	.word	0x00030d40

08004138 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800416a:	b480      	push	{r7}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0306 	and.w	r3, r3, #6
 8004182:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]
 800418e:	e00a      	b.n	80041a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d002      	beq.n	800419c <USB_GetDevSpeed+0x32>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b06      	cmp	r3, #6
 800419a:	d102      	bne.n	80041a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800419c:	2302      	movs	r3, #2
 800419e:	75fb      	strb	r3, [r7, #23]
 80041a0:	e001      	b.n	80041a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80041a2:	230f      	movs	r3, #15
 80041a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	785b      	ldrb	r3, [r3, #1]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d13a      	bne.n	8004246 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	2101      	movs	r1, #1
 80041e2:	fa01 f303 	lsl.w	r3, r1, r3
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	68f9      	ldr	r1, [r7, #12]
 80041ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d155      	bne.n	80042b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	78db      	ldrb	r3, [r3, #3]
 8004222:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004224:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	059b      	lsls	r3, r3, #22
 800422a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800422c:	4313      	orrs	r3, r2
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	0151      	lsls	r1, r2, #5
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	440a      	add	r2, r1
 8004236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	e036      	b.n	80042b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004264:	4313      	orrs	r3, r2
 8004266:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d11a      	bne.n	80042b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	78db      	ldrb	r3, [r3, #3]
 8004298:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800429a:	430b      	orrs	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	0151      	lsls	r1, r2, #5
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	440a      	add	r2, r1
 80042a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	785b      	ldrb	r3, [r3, #1]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	f040 815c 	bne.w	800459e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d132      	bne.n	8004354 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004308:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800430c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	440a      	add	r2, r1
 8004328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004330:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	440a      	add	r2, r1
 8004348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434c:	0cdb      	lsrs	r3, r3, #19
 800434e:	04db      	lsls	r3, r3, #19
 8004350:	6113      	str	r3, [r2, #16]
 8004352:	e074      	b.n	800443e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436e:	0cdb      	lsrs	r3, r3, #19
 8004370:	04db      	lsls	r3, r3, #19
 8004372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	0151      	lsls	r1, r2, #5
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	440a      	add	r2, r1
 800438a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800438e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004392:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6959      	ldr	r1, [r3, #20]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	440b      	add	r3, r1
 80043b0:	1e59      	subs	r1, r3, #1
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80043bc:	4b9d      	ldr	r3, [pc, #628]	; (8004634 <USB_EPStartXfer+0x370>)
 80043be:	400b      	ands	r3, r1
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	0148      	lsls	r0, r1, #5
 80043c4:	69f9      	ldr	r1, [r7, #28]
 80043c6:	4401      	add	r1, r0
 80043c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043cc:	4313      	orrs	r3, r2
 80043ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e6:	69b9      	ldr	r1, [r7, #24]
 80043e8:	0148      	lsls	r0, r1, #5
 80043ea:	69f9      	ldr	r1, [r7, #28]
 80043ec:	4401      	add	r1, r0
 80043ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043f2:	4313      	orrs	r3, r2
 80043f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	78db      	ldrb	r3, [r3, #3]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d11f      	bne.n	800443e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	0151      	lsls	r1, r2, #5
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	440a      	add	r2, r1
 8004414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004418:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800441c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004438:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800443c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d14b      	bne.n	80044dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004458:	461a      	mov	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	78db      	ldrb	r3, [r3, #3]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d128      	bne.n	80044ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d110      	bne.n	800449a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004492:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e00f      	b.n	80044ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e12f      	b.n	800473c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	0151      	lsls	r1, r2, #5
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	440a      	add	r2, r1
 80044f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	78db      	ldrb	r3, [r3, #3]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d015      	beq.n	8004530 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8117 	beq.w	800473c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	2101      	movs	r1, #1
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	69f9      	ldr	r1, [r7, #28]
 8004526:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800452a:	4313      	orrs	r3, r2
 800452c:	634b      	str	r3, [r1, #52]	; 0x34
 800452e:	e105      	b.n	800473c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d110      	bne.n	8004562 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	440a      	add	r2, r1
 8004556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800455a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e00f      	b.n	8004582 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	440a      	add	r2, r1
 8004578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004580:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	68d9      	ldr	r1, [r3, #12]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	b298      	uxth	r0, r3
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	4603      	mov	r3, r0
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fa2b 	bl	80049f2 <USB_WritePacket>
 800459c:	e0ce      	b.n	800473c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b8:	0cdb      	lsrs	r3, r3, #19
 80045ba:	04db      	lsls	r3, r3, #19
 80045bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d126      	bne.n	8004638 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	0148      	lsls	r0, r1, #5
 8004604:	69f9      	ldr	r1, [r7, #28]
 8004606:	4401      	add	r1, r0
 8004608:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800460c:	4313      	orrs	r3, r2
 800460e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	440a      	add	r2, r1
 8004626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800462a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800462e:	6113      	str	r3, [r2, #16]
 8004630:	e036      	b.n	80046a0 <USB_EPStartXfer+0x3dc>
 8004632:	bf00      	nop
 8004634:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	4413      	add	r3, r2
 8004642:	1e5a      	subs	r2, r3, #1
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	04d9      	lsls	r1, r3, #19
 8004660:	4b39      	ldr	r3, [pc, #228]	; (8004748 <USB_EPStartXfer+0x484>)
 8004662:	400b      	ands	r3, r1
 8004664:	69b9      	ldr	r1, [r7, #24]
 8004666:	0148      	lsls	r0, r1, #5
 8004668:	69f9      	ldr	r1, [r7, #28]
 800466a:	4401      	add	r1, r0
 800466c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004670:	4313      	orrs	r3, r2
 8004672:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	8af9      	ldrh	r1, [r7, #22]
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004690:	69b9      	ldr	r1, [r7, #24]
 8004692:	0148      	lsls	r0, r1, #5
 8004694:	69f9      	ldr	r1, [r7, #28]
 8004696:	4401      	add	r1, r0
 8004698:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800469c:	4313      	orrs	r3, r2
 800469e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d10d      	bne.n	80046c2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	68d9      	ldr	r1, [r3, #12]
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046be:	460a      	mov	r2, r1
 80046c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	78db      	ldrb	r3, [r3, #3]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d128      	bne.n	800471c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d110      	bne.n	80046fc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e00f      	b.n	800471c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	0151      	lsls	r1, r2, #5
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	440a      	add	r2, r1
 8004712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	440a      	add	r2, r1
 8004732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004736:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800473a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	1ff80000 	.word	0x1ff80000

0800474c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	4613      	mov	r3, r2
 8004758:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b01      	cmp	r3, #1
 800476a:	f040 80cd 	bne.w	8004908 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d132      	bne.n	80047dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	0151      	lsls	r1, r2, #5
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	440a      	add	r2, r1
 800478c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	0151      	lsls	r1, r2, #5
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	440a      	add	r2, r1
 80047b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d4:	0cdb      	lsrs	r3, r3, #19
 80047d6:	04db      	lsls	r3, r3, #19
 80047d8:	6113      	str	r3, [r2, #16]
 80047da:	e04e      	b.n	800487a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f6:	0cdb      	lsrs	r3, r3, #19
 80047f8:	04db      	lsls	r3, r3, #19
 80047fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004816:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800481a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800481e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	d903      	bls.n	8004834 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486a:	6939      	ldr	r1, [r7, #16]
 800486c:	0148      	lsls	r0, r1, #5
 800486e:	6979      	ldr	r1, [r7, #20]
 8004870:	4401      	add	r1, r0
 8004872:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004876:	4313      	orrs	r3, r2
 8004878:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d11e      	bne.n	80048be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004894:	461a      	mov	r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	0151      	lsls	r1, r2, #5
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	440a      	add	r2, r1
 80048b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	e092      	b.n	80049e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d07e      	beq.n	80049e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	2101      	movs	r1, #1
 80048f8:	fa01 f303 	lsl.w	r3, r1, r3
 80048fc:	6979      	ldr	r1, [r7, #20]
 80048fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004902:	4313      	orrs	r3, r2
 8004904:	634b      	str	r3, [r1, #52]	; 0x34
 8004906:	e06d      	b.n	80049e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004922:	0cdb      	lsrs	r3, r3, #19
 8004924:	04db      	lsls	r3, r3, #19
 8004926:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004942:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004946:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800494a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	0151      	lsls	r1, r2, #5
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	440a      	add	r2, r1
 8004972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004976:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800497a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004992:	6939      	ldr	r1, [r7, #16]
 8004994:	0148      	lsls	r0, r1, #5
 8004996:	6979      	ldr	r1, [r7, #20]
 8004998:	4401      	add	r1, r0
 800499a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800499e:	4313      	orrs	r3, r2
 80049a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10d      	bne.n	80049c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d009      	beq.n	80049c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	68d9      	ldr	r1, [r3, #12]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	460a      	mov	r2, r1
 80049c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b089      	sub	sp, #36	; 0x24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	4611      	mov	r1, r2
 80049fe:	461a      	mov	r2, r3
 8004a00:	460b      	mov	r3, r1
 8004a02:	71fb      	strb	r3, [r7, #7]
 8004a04:	4613      	mov	r3, r2
 8004a06:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d123      	bne.n	8004a60 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a18:	88bb      	ldrh	r3, [r7, #4]
 8004a1a:	3303      	adds	r3, #3
 8004a1c:	089b      	lsrs	r3, r3, #2
 8004a1e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	e018      	b.n	8004a58 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	031a      	lsls	r2, r3, #12
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a32:	461a      	mov	r2, r3
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	3301      	adds	r3, #1
 8004a44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	3301      	adds	r3, #1
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d3e2      	bcc.n	8004a26 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3724      	adds	r7, #36	; 0x24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b08b      	sub	sp, #44	; 0x2c
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a84:	88fb      	ldrh	r3, [r7, #6]
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a94:	2300      	movs	r3, #0
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	e014      	b.n	8004ac4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	601a      	str	r2, [r3, #0]
    pDest++;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	3301      	adds	r3, #1
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	3301      	adds	r3, #1
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	623b      	str	r3, [r7, #32]
 8004ac4:	6a3a      	ldr	r2, [r7, #32]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d3e6      	bcc.n	8004a9a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004acc:	8bfb      	ldrh	r3, [r7, #30]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01e      	beq.n	8004b10 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004adc:	461a      	mov	r2, r3
 8004ade:	f107 0310 	add.w	r3, r7, #16
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	fa22 f303 	lsr.w	r3, r2, r3
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	701a      	strb	r2, [r3, #0]
      i++;
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	3301      	adds	r3, #1
 8004afc:	623b      	str	r3, [r7, #32]
      pDest++;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	3301      	adds	r3, #1
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b04:	8bfb      	ldrh	r3, [r7, #30]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b0a:	8bfb      	ldrh	r3, [r7, #30]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1ea      	bne.n	8004ae6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	372c      	adds	r7, #44	; 0x2c
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d12c      	bne.n	8004b94 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db12      	blt.n	8004b72 <USB_EPSetStall+0x54>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00f      	beq.n	8004b72 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b70:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e02b      	b.n	8004bec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db12      	blt.n	8004bcc <USB_EPSetStall+0xae>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00f      	beq.n	8004bcc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	0151      	lsls	r1, r2, #5
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	440a      	add	r2, r1
 8004be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	785b      	ldrb	r3, [r3, #1]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d128      	bne.n	8004c68 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	78db      	ldrb	r3, [r3, #3]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d003      	beq.n	8004c46 <USB_EPClearStall+0x4c>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	78db      	ldrb	r3, [r3, #3]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d138      	bne.n	8004cb8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e027      	b.n	8004cb8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	78db      	ldrb	r3, [r3, #3]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d003      	beq.n	8004c98 <USB_EPClearStall+0x9e>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	78db      	ldrb	r3, [r3, #3]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d10f      	bne.n	8004cb8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	0151      	lsls	r1, r2, #5
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	440a      	add	r2, r1
 8004cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ce4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ce8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d2c:	f023 0303 	bic.w	r3, r3, #3
 8004d30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d40:	f023 0302 	bic.w	r3, r3, #2
 8004d44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d82:	f043 0302 	orr.w	r3, r3, #2
 8004d86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4013      	ands	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004dae:	68fb      	ldr	r3, [r7, #12]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	0c1b      	lsrs	r3, r3, #16
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4013      	ands	r3, r2
 8004e12:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	b29b      	uxth	r3, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e52:	68bb      	ldr	r3, [r7, #8]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e90:	01db      	lsls	r3, r3, #7
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004eae:	68bb      	ldr	r3, [r7, #8]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ef6:	f023 0307 	bic.w	r3, r3, #7
 8004efa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	333c      	adds	r3, #60	; 0x3c
 8004f36:	3304      	adds	r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <USB_EP0_OutStart+0xb8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d90a      	bls.n	8004f5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f54:	d101      	bne.n	8004f5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e037      	b.n	8004fca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	461a      	mov	r2, r3
 8004f62:	2300      	movs	r3, #0
 8004f64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f88:	f043 0318 	orr.w	r3, r3, #24
 8004f8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004fa0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004fa2:	7afb      	ldrb	r3, [r7, #11]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d10f      	bne.n	8004fc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	461a      	mov	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004fc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	4f54300a 	.word	0x4f54300a

08004fdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3301      	adds	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	4a13      	ldr	r2, [pc, #76]	; (800503c <USB_CoreReset+0x60>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e01a      	b.n	800502e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	daf3      	bge.n	8004fe8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f043 0201 	orr.w	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3301      	adds	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	4a09      	ldr	r2, [pc, #36]	; (800503c <USB_CoreReset+0x60>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d901      	bls.n	8005020 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e006      	b.n	800502e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b01      	cmp	r3, #1
 800502a:	d0f1      	beq.n	8005010 <USB_CoreReset+0x34>

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	00030d40 	.word	0x00030d40

08005040 <__NVIC_SystemReset>:
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005044:	f3bf 8f4f 	dsb	sy
}
 8005048:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <__NVIC_SystemReset+0x24>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005052:	4904      	ldr	r1, [pc, #16]	; (8005064 <__NVIC_SystemReset+0x24>)
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <__NVIC_SystemReset+0x28>)
 8005056:	4313      	orrs	r3, r2
 8005058:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800505a:	f3bf 8f4f 	dsb	sy
}
 800505e:	bf00      	nop
    __NOP();
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <__NVIC_SystemReset+0x20>
 8005064:	e000ed00 	.word	0xe000ed00
 8005068:	05fa0004 	.word	0x05fa0004

0800506c <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005078:	f240 401c 	movw	r0, #1052	; 0x41c
 800507c:	f002 fc44 	bl	8007908 <USBD_static_malloc>
 8005080:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005090:	2302      	movs	r3, #2
 8005092:	e03e      	b.n	8005112 <USBD_DFU_Init+0xa6>
  }

  pdev->pClassData = (void *)hdfu;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a1d      	ldr	r2, [pc, #116]	; (800511c <USBD_DFU_Init+0xb0>)
 80050a8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4798      	blx	r3
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <USBD_DFU_Init+0xa4>
  {
    return (uint8_t)USBD_FAIL;
 800510c:	2303      	movs	r3, #3
 800510e:	e000      	b.n	8005112 <USBD_DFU_Init+0xa6>
  }

  return (uint8_t)USBD_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	08008000 	.word	0x08008000

08005120 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8005136:	2302      	movs	r3, #2
 8005138:	e027      	b.n	800518a <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005140:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800517a:	4618      	mov	r0, r3
 800517c:	f002 fbd2 	bl	8007924 <USBD_static_free>
  pdev->pClassData = NULL;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051a4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80051bc:	2303      	movs	r3, #3
 80051be:	e0d5      	b.n	800536c <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d03e      	beq.n	800524a <USBD_DFU_Setup+0xb6>
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	f040 80c5 	bne.w	800535c <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d82f      	bhi.n	800523a <USBD_DFU_Setup+0xa6>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <USBD_DFU_Setup+0x4c>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005231 	.word	0x08005231
 80051e4:	080051fd 	.word	0x080051fd
 80051e8:	08005207 	.word	0x08005207
 80051ec:	08005211 	.word	0x08005211
 80051f0:	08005219 	.word	0x08005219
 80051f4:	08005221 	.word	0x08005221
 80051f8:	08005229 	.word	0x08005229
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa6c 	bl	80056dc <DFU_Download>
          break;
 8005204:	e020      	b.n	8005248 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fad3 	bl	80057b4 <DFU_Upload>
          break;
 800520e:	e01b      	b.n	8005248 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fba9 	bl	8005968 <DFU_GetStatus>
          break;
 8005216:	e017      	b.n	8005248 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fc5b 	bl	8005ad4 <DFU_ClearStatus>
          break;
 800521e:	e013      	b.n	8005248 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fcab 	bl	8005b7c <DFU_GetState>
          break;
 8005226:	e00f      	b.n	8005248 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fcbf 	bl	8005bac <DFU_Abort>
          break;
 800522e:	e00b      	b.n	8005248 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9ee 	bl	8005614 <DFU_Detach>
          break;
 8005238:	e006      	b.n	8005248 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 fdf9 	bl	8006e34 <USBD_CtlError>
          ret = USBD_FAIL;
 8005242:	2303      	movs	r3, #3
 8005244:	77fb      	strb	r3, [r7, #31]
          break;
 8005246:	bf00      	nop
      }
      break;
 8005248:	e08f      	b.n	800536a <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	2b0b      	cmp	r3, #11
 8005250:	d87b      	bhi.n	800534a <USBD_DFU_Setup+0x1b6>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <USBD_DFU_Setup+0xc4>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	08005289 	.word	0x08005289
 800525c:	08005359 	.word	0x08005359
 8005260:	0800534b 	.word	0x0800534b
 8005264:	0800534b 	.word	0x0800534b
 8005268:	0800534b 	.word	0x0800534b
 800526c:	0800534b 	.word	0x0800534b
 8005270:	080052b3 	.word	0x080052b3
 8005274:	0800534b 	.word	0x0800534b
 8005278:	0800534b 	.word	0x0800534b
 800527c:	0800534b 	.word	0x0800534b
 8005280:	080052dd 	.word	0x080052dd
 8005284:	08005309 	.word	0x08005309
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b03      	cmp	r3, #3
 8005292:	d107      	bne.n	80052a4 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005294:	f107 030e 	add.w	r3, r7, #14
 8005298:	2202      	movs	r2, #2
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fe3a 	bl	8006f16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052a2:	e05a      	b.n	800535a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 fdc4 	bl	8006e34 <USBD_CtlError>
            ret = USBD_FAIL;
 80052ac:	2303      	movs	r3, #3
 80052ae:	77fb      	strb	r3, [r7, #31]
          break;
 80052b0:	e053      	b.n	800535a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	885b      	ldrh	r3, [r3, #2]
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b21      	cmp	r3, #33	; 0x21
 80052bc:	d107      	bne.n	80052ce <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80052be:	4b2d      	ldr	r3, [pc, #180]	; (8005374 <USBD_DFU_Setup+0x1e0>)
 80052c0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	88db      	ldrh	r3, [r3, #6]
 80052c6:	2b09      	cmp	r3, #9
 80052c8:	bf28      	it	cs
 80052ca:	2309      	movcs	r3, #9
 80052cc:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80052ce:	8afb      	ldrh	r3, [r7, #22]
 80052d0:	461a      	mov	r2, r3
 80052d2:	69b9      	ldr	r1, [r7, #24]
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f001 fe1e 	bl	8006f16 <USBD_CtlSendData>
          break;
 80052da:	e03e      	b.n	800535a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d108      	bne.n	80052fa <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052ee:	2201      	movs	r2, #1
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f001 fe0f 	bl	8006f16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052f8:	e02f      	b.n	800535a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f001 fd99 	bl	8006e34 <USBD_CtlError>
            ret = USBD_FAIL;
 8005302:	2303      	movs	r3, #3
 8005304:	77fb      	strb	r3, [r7, #31]
          break;
 8005306:	e028      	b.n	800535a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	885b      	ldrh	r3, [r3, #2]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d114      	bne.n	800533c <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b03      	cmp	r3, #3
 800531c:	d107      	bne.n	800532e <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	885b      	ldrh	r3, [r3, #2]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800532c:	e015      	b.n	800535a <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f001 fd7f 	bl	8006e34 <USBD_CtlError>
              ret = USBD_FAIL;
 8005336:	2303      	movs	r3, #3
 8005338:	77fb      	strb	r3, [r7, #31]
          break;
 800533a:	e00e      	b.n	800535a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 fd78 	bl	8006e34 <USBD_CtlError>
            ret = USBD_FAIL;
 8005344:	2303      	movs	r3, #3
 8005346:	77fb      	strb	r3, [r7, #31]
          break;
 8005348:	e007      	b.n	800535a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f001 fd71 	bl	8006e34 <USBD_CtlError>
          ret = USBD_FAIL;
 8005352:	2303      	movs	r3, #3
 8005354:	77fb      	strb	r3, [r7, #31]
          break;
 8005356:	e000      	b.n	800535a <USBD_DFU_Setup+0x1c6>
          break;
 8005358:	bf00      	nop
      }
      break;
 800535a:	e006      	b.n	800536a <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 fd68 	bl	8006e34 <USBD_CtlError>
      ret = USBD_FAIL;
 8005364:	2303      	movs	r3, #3
 8005366:	77fb      	strb	r3, [r7, #31]
      break;
 8005368:	bf00      	nop
  }

  return (uint8_t)ret;
 800536a:	7ffb      	ldrb	r3, [r7, #31]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	2000007e 	.word	0x2000007e

08005378 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	221b      	movs	r2, #27
 8005384:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8005386:	4b03      	ldr	r3, [pc, #12]	; (8005394 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	2000006c 	.word	0x2000006c

08005398 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b088      	sub	sp, #32
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053bc:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053c4:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e0ce      	b.n	800556e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	f040 80bd 	bne.w	8005556 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d17c      	bne.n	80054e0 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	f000 8093 	beq.w	8005518 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80053f8:	2b05      	cmp	r3, #5
 80053fa:	d15e      	bne.n	80054ba <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b21      	cmp	r3, #33	; 0x21
 8005402:	d124      	bne.n	800544e <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	461a      	mov	r2, r3
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	789b      	ldrb	r3, [r3, #2]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	441a      	add	r2, r3
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	78db      	ldrb	r3, [r3, #3]
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	441a      	add	r2, r3
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	791b      	ldrb	r3, [r3, #4]
 8005442:	061b      	lsls	r3, r3, #24
 8005444:	441a      	add	r2, r3
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800544c:	e064      	b.n	8005518 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b41      	cmp	r3, #65	; 0x41
 8005454:	d12f      	bne.n	80054b6 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	461a      	mov	r2, r3
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	789b      	ldrb	r3, [r3, #2]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	441a      	add	r2, r3
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	78db      	ldrb	r3, [r3, #3]
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	441a      	add	r2, r3
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	791b      	ldrb	r3, [r3, #4]
 8005494:	061b      	lsls	r3, r3, #24
 8005496:	441a      	add	r2, r3
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 80054a8:	4610      	mov	r0, r2
 80054aa:	4798      	blx	r3
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d032      	beq.n	8005518 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e05b      	b.n	800556e <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e059      	b.n	800556e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	2200      	movs	r2, #0
 80054be:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 80054ce:	2301      	movs	r3, #1
 80054d0:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80054d2:	f107 030c 	add.w	r3, r7, #12
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f001 fcab 	bl	8006e34 <USBD_CtlError>
 80054de:	e01b      	b.n	8005518 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d916      	bls.n	8005518 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80054f0:	3b02      	subs	r3, #2
 80054f2:	029a      	lsls	r2, r3, #10
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80054fa:	4413      	add	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	69f8      	ldr	r0, [r7, #28]
 8005504:	6979      	ldr	r1, [r7, #20]
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800550c:	4798      	blx	r3
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8005514:	2303      	movs	r3, #3
 8005516:	e02a      	b.n	800556e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2200      	movs	r2, #0
 8005524:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2203      	movs	r2, #3
 800552c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8005554:	e00a      	b.n	800556c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800555c:	2b07      	cmp	r3, #7
 800555e:	d103      	bne.n	8005568 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fb75 	bl	8005c50 <DFU_Leave>
 8005566:	e001      	b.n	800556c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8005568:	2303      	movs	r3, #3
 800556a:	e000      	b.n	800556e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	220a      	movs	r2, #10
 8005598:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800559a:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	20000088 	.word	0x20000088

080055ac <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	460b      	mov	r3, r1
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055c0:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80055c2:	7afb      	ldrb	r3, [r7, #11]
 80055c4:	2b06      	cmp	r3, #6
 80055c6:	d808      	bhi.n	80055da <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	4905      	ldr	r1, [pc, #20]	; (80055e4 <USBD_DFU_GetUsrStringDesc+0x38>)
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 fc40 	bl	8006e56 <USBD_GetString>
    return USBD_StrDesc;
 80055d6:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <USBD_DFU_GetUsrStringDesc+0x38>)
 80055d8:	e000      	b.n	80055dc <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80055da:	2300      	movs	r3, #0
  }
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000164 	.word	0x20000164

080055e8 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e004      	b.n	8005606 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005624:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d051      	beq.n	80056d0 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005632:	2b02      	cmp	r3, #2
 8005634:	d013      	beq.n	800565e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800563c:	2b03      	cmp	r3, #3
 800563e:	d00e      	beq.n	800565e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8005646:	2b05      	cmp	r3, #5
 8005648:	d009      	beq.n	800565e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8005650:	2b06      	cmp	r3, #6
 8005652:	d004      	beq.n	800565e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800565a:	2b09      	cmp	r3, #9
 800565c:	d125      	bne.n	80056aa <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2202      	movs	r2, #2
 8005662:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <DFU_Detach+0xc4>)
 80056ac:	7d5b      	ldrb	r3, [r3, #21]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d006      	beq.n	80056c4 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fb7b 	bl	8005db2 <USBD_Stop>
    (void)USBD_Start(pdev);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fb6c 	bl	8005d9a <USBD_Start>
 80056c2:	e006      	b.n	80056d2 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	885b      	ldrh	r3, [r3, #2]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fb fbe7 	bl	8000e9c <HAL_Delay>
 80056ce:	e000      	b.n	80056d2 <DFU_Detach+0xbe>
    return;
 80056d0:	bf00      	nop
  }
}
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	2000006c 	.word	0x2000006c

080056dc <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056ec:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d05b      	beq.n	80057ac <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	88db      	ldrh	r3, [r3, #6]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d02d      	beq.n	8005758 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005702:	2b02      	cmp	r3, #2
 8005704:	d004      	beq.n	8005710 <DFU_Download+0x34>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800570c:	2b05      	cmp	r3, #5
 800570e:	d11e      	bne.n	800574e <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	885b      	ldrh	r3, [r3, #2]
 8005714:	461a      	mov	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	88db      	ldrh	r3, [r3, #6]
 8005720:	461a      	mov	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2203      	movs	r2, #3
 800572c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800573c:	68f9      	ldr	r1, [r7, #12]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005744:	461a      	mov	r2, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 fc11 	bl	8006f6e <USBD_CtlPrepareRx>
 800574c:	e02f      	b.n	80057ae <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 fb6f 	bl	8006e34 <USBD_CtlError>
 8005756:	e02a      	b.n	80057ae <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800575e:	2b05      	cmp	r3, #5
 8005760:	d004      	beq.n	800576c <DFU_Download+0x90>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005768:	2b02      	cmp	r3, #2
 800576a:	d11a      	bne.n	80057a2 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2206      	movs	r2, #6
 8005778:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80057a0:	e005      	b.n	80057ae <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fb45 	bl	8006e34 <USBD_CtlError>
 80057aa:	e000      	b.n	80057ae <DFU_Download+0xd2>
    return;
 80057ac:	bf00      	nop
    }
  }
}
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057c4:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057cc:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80c4 	beq.w	800595e <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	88db      	ldrh	r3, [r3, #6]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 80a8 	beq.w	8005930 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d005      	beq.n	80057f6 <DFU_Upload+0x42>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80057f0:	2b09      	cmp	r3, #9
 80057f2:	f040 8090 	bne.w	8005916 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	885b      	ldrh	r3, [r3, #2]
 80057fa:	461a      	mov	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	88db      	ldrh	r3, [r3, #6]
 8005806:	461a      	mov	r2, r3
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005814:	2b00      	cmp	r3, #0
 8005816:	d12c      	bne.n	8005872 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800581e:	2b03      	cmp	r3, #3
 8005820:	d901      	bls.n	8005826 <DFU_Upload+0x72>
 8005822:	2202      	movs	r2, #2
 8005824:	e000      	b.n	8005828 <DFU_Upload+0x74>
 8005826:	2209      	movs	r2, #9
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2221      	movs	r2, #33	; 0x21
 800585c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2241      	movs	r2, #65	; 0x41
 8005862:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2203      	movs	r2, #3
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 fb53 	bl	8006f16 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8005870:	e076      	b.n	8005960 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005878:	2b01      	cmp	r3, #1
 800587a:	d931      	bls.n	80058e0 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2209      	movs	r2, #9
 8005880:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80058ae:	3b02      	subs	r3, #2
 80058b0:	029a      	lsls	r2, r3, #10
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80058b8:	4413      	add	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	6979      	ldr	r1, [r7, #20]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80058ca:	4798      	blx	r3
 80058cc:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058d4:	461a      	mov	r2, r3
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 fb1c 	bl	8006f16 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80058de:	e03f      	b.n	8005960 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	220f      	movs	r2, #15
 80058e4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 fa90 	bl	8006e34 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8005914:	e024      	b.n	8005960 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2200      	movs	r2, #0
 8005922:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 fa83 	bl	8006e34 <USBD_CtlError>
 800592e:	e017      	b.n	8005960 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800595c:	e000      	b.n	8005960 <DFU_Upload+0x1ac>
    return;
 800595e:	bf00      	nop
  }
}
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005976:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800597e:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80a0 	beq.w	8005ac8 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800598e:	2b03      	cmp	r3, #3
 8005990:	d002      	beq.n	8005998 <DFU_GetStatus+0x30>
 8005992:	2b06      	cmp	r3, #6
 8005994:	d051      	beq.n	8005a3a <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8005996:	e08e      	b.n	8005ab6 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d034      	beq.n	8005a0c <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2204      	movs	r2, #4
 80059a6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10e      	bne.n	80059f6 <DFU_GetStatus+0x8e>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b41      	cmp	r3, #65	; 0x41
 80059de:	d10a      	bne.n	80059f6 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80059f0:	2100      	movs	r1, #0
 80059f2:	4798      	blx	r3
      break;
 80059f4:	e05f      	b.n	8005ab6 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005a06:	2101      	movs	r1, #1
 8005a08:	4798      	blx	r3
      break;
 8005a0a:	e054      	b.n	8005ab6 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2205      	movs	r2, #5
 8005a10:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8005a38:	e03d      	b.n	8005ab6 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d116      	bne.n	8005a72 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2207      	movs	r2, #7
 8005a48:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8005a70:	e020      	b.n	8005ab4 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11b      	bne.n	8005ab4 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8005a7c:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <DFU_GetStatus+0x168>)
 8005a7e:	7d1b      	ldrb	r3, [r3, #20]
 8005a80:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d015      	beq.n	8005ab4 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8005ab4:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8005abc:	2206      	movs	r2, #6
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 fa28 	bl	8006f16 <USBD_CtlSendData>
 8005ac6:	e000      	b.n	8005aca <DFU_GetStatus+0x162>
    return;
 8005ac8:	bf00      	nop
}
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	2000006c 	.word	0x2000006c

08005ad4 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ae2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d042      	beq.n	8005b70 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005af0:	2b0a      	cmp	r3, #10
 8005af2:	d11e      	bne.n	8005b32 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8005b30:	e01f      	b.n	8005b72 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	220a      	movs	r2, #10
 8005b36:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	220e      	movs	r2, #14
 8005b3e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8005b6e:	e000      	b.n	8005b72 <DFU_ClearStatus+0x9e>
    return;
 8005b70:	bf00      	nop
  }
}
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b8a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d008      	beq.n	8005ba4 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 f9ba 	bl	8006f16 <USBD_CtlSendData>
 8005ba2:	e000      	b.n	8005ba6 <DFU_GetState+0x2a>
    return;
 8005ba4:	bf00      	nop
}
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bba:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d03f      	beq.n	8005c42 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d013      	beq.n	8005bf4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d00e      	beq.n	8005bf4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8005bdc:	2b05      	cmp	r3, #5
 8005bde:	d009      	beq.n	8005bf4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8005be6:	2b06      	cmp	r3, #6
 8005be8:	d004      	beq.n	8005bf4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8005bf0:	2b09      	cmp	r3, #9
 8005bf2:	d127      	bne.n	8005c44 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005c40:	e000      	b.n	8005c44 <DFU_Abort+0x98>
    return;
 8005c42:	bf00      	nop
  }
}
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c5e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d03b      	beq.n	8005cde <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8005c6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ce8 <DFU_Leave+0x98>)
 8005c70:	7d1b      	ldrb	r3, [r3, #20]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d016      	beq.n	8005ca8 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2206      	movs	r2, #6
 8005c7e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8005ca6:	e01b      	b.n	8005ce0 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2208      	movs	r2, #8
 8005cac:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f86c 	bl	8005db2 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8005cda:	f7ff f9b1 	bl	8005040 <__NVIC_SystemReset>
    return;
 8005cde:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	2000006c 	.word	0x2000006c

08005cec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e01f      	b.n	8005d44 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	79fa      	ldrb	r2, [r7, #7]
 8005d36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f001 fc71 	bl	8007620 <USBD_LL_Init>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e016      	b.n	8005d92 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	f107 020e 	add.w	r2, r7, #14
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	4602      	mov	r2, r0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 fc88 	bl	80076b8 <USBD_LL_Start>
 8005da8:	4603      	mov	r3, r0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 fc97 	bl	80076ee <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d009      	beq.n	8005dde <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6852      	ldr	r2, [r2, #4]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	4611      	mov	r1, r2
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
  }

  return USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d009      	beq.n	8005e2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	78fa      	ldrb	r2, [r7, #3]
 8005e22:	4611      	mov	r1, r2
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4798      	blx	r3
 8005e28:	4603      	mov	r3, r0
 8005e2a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	4611      	mov	r1, r2
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
  }

  return USBD_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 ffa1 	bl	8006dc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d01a      	beq.n	8005ed8 <USBD_LL_SetupStage+0x72>
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d822      	bhi.n	8005eec <USBD_LL_SetupStage+0x86>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <USBD_LL_SetupStage+0x4a>
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d00a      	beq.n	8005ec4 <USBD_LL_SetupStage+0x5e>
 8005eae:	e01d      	b.n	8005eec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fa61 	bl	8006380 <USBD_StdDevReq>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec2:	e020      	b.n	8005f06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fac5 	bl	800645c <USBD_StdItfReq>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed6:	e016      	b.n	8005f06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fb04 	bl	80064ee <USBD_StdEPReq>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eea:	e00c      	b.n	8005f06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ef2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fc38 	bl	8007770 <USBD_LL_StallEP>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73fb      	strb	r3, [r7, #15]
      break;
 8005f04:	bf00      	nop
  }

  return ret;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f1e:	7afb      	ldrb	r3, [r7, #11]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d138      	bne.n	8005f96 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d14a      	bne.n	8005fcc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d913      	bls.n	8005f6a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	bf28      	it	cs
 8005f5c:	4613      	movcs	r3, r2
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f001 f820 	bl	8006fa8 <USBD_CtlContinueRx>
 8005f68:	e030      	b.n	8005fcc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d10b      	bne.n	8005f8e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 f81b 	bl	8006fca <USBD_CtlSendStatus>
 8005f94:	e01a      	b.n	8005fcc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d114      	bne.n	8005fcc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00e      	beq.n	8005fcc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	7afa      	ldrb	r2, [r7, #11]
 8005fb8:	4611      	mov	r1, r2
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	4798      	blx	r3
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	e000      	b.n	8005fce <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b086      	sub	sp, #24
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005fe4:	7afb      	ldrb	r3, [r7, #11]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d16b      	bne.n	80060c2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3314      	adds	r3, #20
 8005fee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d156      	bne.n	80060a8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	429a      	cmp	r2, r3
 8006004:	d914      	bls.n	8006030 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	461a      	mov	r2, r3
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 ff95 	bl	8006f4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006022:	2300      	movs	r3, #0
 8006024:	2200      	movs	r2, #0
 8006026:	2100      	movs	r1, #0
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f001 fc4b 	bl	80078c4 <USBD_LL_PrepareReceive>
 800602e:	e03b      	b.n	80060a8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	429a      	cmp	r2, r3
 800603a:	d11c      	bne.n	8006076 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006044:	429a      	cmp	r2, r3
 8006046:	d316      	bcc.n	8006076 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006052:	429a      	cmp	r2, r3
 8006054:	d20f      	bcs.n	8006076 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006056:	2200      	movs	r2, #0
 8006058:	2100      	movs	r1, #0
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 ff76 	bl	8006f4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006068:	2300      	movs	r3, #0
 800606a:	2200      	movs	r2, #0
 800606c:	2100      	movs	r1, #0
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f001 fc28 	bl	80078c4 <USBD_LL_PrepareReceive>
 8006074:	e018      	b.n	80060a8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b03      	cmp	r3, #3
 8006080:	d10b      	bne.n	800609a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800609a:	2180      	movs	r1, #128	; 0x80
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f001 fb67 	bl	8007770 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 ffa4 	bl	8006ff0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d122      	bne.n	80060f8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff fe98 	bl	8005de8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060c0:	e01a      	b.n	80060f8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d114      	bne.n	80060f8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00e      	beq.n	80060f8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	7afa      	ldrb	r2, [r7, #11]
 80060e4:	4611      	mov	r1, r2
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	4798      	blx	r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	e000      	b.n	80060fa <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006132:	2303      	movs	r3, #3
 8006134:	e02f      	b.n	8006196 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00f      	beq.n	8006160 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6852      	ldr	r2, [r2, #4]
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	4611      	mov	r1, r2
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006160:	2340      	movs	r3, #64	; 0x40
 8006162:	2200      	movs	r2, #0
 8006164:	2100      	movs	r1, #0
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 fadc 	bl	8007724 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2240      	movs	r2, #64	; 0x40
 8006178:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800617c:	2340      	movs	r3, #64	; 0x40
 800617e:	2200      	movs	r2, #0
 8006180:	2180      	movs	r1, #128	; 0x80
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 face 	bl	8007724 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2240      	movs	r2, #64	; 0x40
 8006192:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2204      	movs	r2, #4
 80061d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d106      	bne.n	800620c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006204:	b2da      	uxtb	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800622c:	2303      	movs	r3, #3
 800622e:	e012      	b.n	8006256 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b03      	cmp	r3, #3
 800623a:	d10b      	bne.n	8006254 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006274:	2303      	movs	r3, #3
 8006276:	e014      	b.n	80062a2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b03      	cmp	r3, #3
 8006282:	d10d      	bne.n	80062a0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d007      	beq.n	80062a0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	78fa      	ldrb	r2, [r7, #3]
 800629a:	4611      	mov	r1, r2
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b082      	sub	sp, #8
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e014      	b.n	80062ee <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d10d      	bne.n	80062ec <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	78fa      	ldrb	r2, [r7, #3]
 80062e6:	4611      	mov	r1, r2
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d009      	beq.n	800633a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6852      	ldr	r2, [r2, #4]
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	4611      	mov	r1, r2
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
  }

  return USBD_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	3301      	adds	r3, #1
 800635a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006362:	8a3b      	ldrh	r3, [r7, #16]
 8006364:	021b      	lsls	r3, r3, #8
 8006366:	b21a      	sxth	r2, r3
 8006368:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800636c:	4313      	orrs	r3, r2
 800636e:	b21b      	sxth	r3, r3
 8006370:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006372:	89fb      	ldrh	r3, [r7, #14]
}
 8006374:	4618      	mov	r0, r3
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d005      	beq.n	80063a6 <USBD_StdDevReq+0x26>
 800639a:	2b40      	cmp	r3, #64	; 0x40
 800639c:	d853      	bhi.n	8006446 <USBD_StdDevReq+0xc6>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00b      	beq.n	80063ba <USBD_StdDevReq+0x3a>
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d14f      	bne.n	8006446 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	4798      	blx	r3
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]
      break;
 80063b8:	e04a      	b.n	8006450 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b09      	cmp	r3, #9
 80063c0:	d83b      	bhi.n	800643a <USBD_StdDevReq+0xba>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <USBD_StdDevReq+0x48>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	0800641d 	.word	0x0800641d
 80063cc:	08006431 	.word	0x08006431
 80063d0:	0800643b 	.word	0x0800643b
 80063d4:	08006427 	.word	0x08006427
 80063d8:	0800643b 	.word	0x0800643b
 80063dc:	080063fb 	.word	0x080063fb
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	0800643b 	.word	0x0800643b
 80063e8:	08006413 	.word	0x08006413
 80063ec:	08006405 	.word	0x08006405
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9de 	bl	80067b4 <USBD_GetDescriptor>
          break;
 80063f8:	e024      	b.n	8006444 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fb55 	bl	8006aac <USBD_SetAddress>
          break;
 8006402:	e01f      	b.n	8006444 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fb94 	bl	8006b34 <USBD_SetConfig>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]
          break;
 8006410:	e018      	b.n	8006444 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fc33 	bl	8006c80 <USBD_GetConfig>
          break;
 800641a:	e013      	b.n	8006444 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fc64 	bl	8006cec <USBD_GetStatus>
          break;
 8006424:	e00e      	b.n	8006444 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fc93 	bl	8006d54 <USBD_SetFeature>
          break;
 800642e:	e009      	b.n	8006444 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fca2 	bl	8006d7c <USBD_ClrFeature>
          break;
 8006438:	e004      	b.n	8006444 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fcf9 	bl	8006e34 <USBD_CtlError>
          break;
 8006442:	bf00      	nop
      }
      break;
 8006444:	e004      	b.n	8006450 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fcf3 	bl	8006e34 <USBD_CtlError>
      break;
 800644e:	bf00      	nop
  }

  return ret;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop

0800645c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	d005      	beq.n	8006482 <USBD_StdItfReq+0x26>
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d82f      	bhi.n	80064da <USBD_StdItfReq+0x7e>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <USBD_StdItfReq+0x26>
 800647e:	2b20      	cmp	r3, #32
 8006480:	d12b      	bne.n	80064da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006488:	b2db      	uxtb	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	2b02      	cmp	r3, #2
 800648e:	d81d      	bhi.n	80064cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	889b      	ldrh	r3, [r3, #4]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d813      	bhi.n	80064c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	88db      	ldrh	r3, [r3, #6]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d110      	bne.n	80064d6 <USBD_StdItfReq+0x7a>
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10d      	bne.n	80064d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fd85 	bl	8006fca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064c0:	e009      	b.n	80064d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fcb5 	bl	8006e34 <USBD_CtlError>
          break;
 80064ca:	e004      	b.n	80064d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fcb0 	bl	8006e34 <USBD_CtlError>
          break;
 80064d4:	e000      	b.n	80064d8 <USBD_StdItfReq+0x7c>
          break;
 80064d6:	bf00      	nop
      }
      break;
 80064d8:	e004      	b.n	80064e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fca9 	bl	8006e34 <USBD_CtlError>
      break;
 80064e2:	bf00      	nop
  }

  return ret;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	889b      	ldrh	r3, [r3, #4]
 8006500:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d007      	beq.n	800651e <USBD_StdEPReq+0x30>
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	f200 8145 	bhi.w	800679e <USBD_StdEPReq+0x2b0>
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00c      	beq.n	8006532 <USBD_StdEPReq+0x44>
 8006518:	2b20      	cmp	r3, #32
 800651a:	f040 8140 	bne.w	800679e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]
      break;
 8006530:	e13a      	b.n	80067a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	2b03      	cmp	r3, #3
 8006538:	d007      	beq.n	800654a <USBD_StdEPReq+0x5c>
 800653a:	2b03      	cmp	r3, #3
 800653c:	f300 8129 	bgt.w	8006792 <USBD_StdEPReq+0x2a4>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d07f      	beq.n	8006644 <USBD_StdEPReq+0x156>
 8006544:	2b01      	cmp	r3, #1
 8006546:	d03c      	beq.n	80065c2 <USBD_StdEPReq+0xd4>
 8006548:	e123      	b.n	8006792 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d002      	beq.n	800655c <USBD_StdEPReq+0x6e>
 8006556:	2b03      	cmp	r3, #3
 8006558:	d016      	beq.n	8006588 <USBD_StdEPReq+0x9a>
 800655a:	e02c      	b.n	80065b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00d      	beq.n	800657e <USBD_StdEPReq+0x90>
 8006562:	7bbb      	ldrb	r3, [r7, #14]
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d00a      	beq.n	800657e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 f8ff 	bl	8007770 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006572:	2180      	movs	r1, #128	; 0x80
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f8fb 	bl	8007770 <USBD_LL_StallEP>
 800657a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800657c:	e020      	b.n	80065c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fc57 	bl	8006e34 <USBD_CtlError>
              break;
 8006586:	e01b      	b.n	80065c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	885b      	ldrh	r3, [r3, #2]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10e      	bne.n	80065ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00b      	beq.n	80065ae <USBD_StdEPReq+0xc0>
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	2b80      	cmp	r3, #128	; 0x80
 800659a:	d008      	beq.n	80065ae <USBD_StdEPReq+0xc0>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	88db      	ldrh	r3, [r3, #6]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 f8e1 	bl	8007770 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fd0b 	bl	8006fca <USBD_CtlSendStatus>

              break;
 80065b4:	e004      	b.n	80065c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fc3b 	bl	8006e34 <USBD_CtlError>
              break;
 80065be:	bf00      	nop
          }
          break;
 80065c0:	e0ec      	b.n	800679c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d002      	beq.n	80065d4 <USBD_StdEPReq+0xe6>
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d016      	beq.n	8006600 <USBD_StdEPReq+0x112>
 80065d2:	e030      	b.n	8006636 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00d      	beq.n	80065f6 <USBD_StdEPReq+0x108>
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b80      	cmp	r3, #128	; 0x80
 80065de:	d00a      	beq.n	80065f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 f8c3 	bl	8007770 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065ea:	2180      	movs	r1, #128	; 0x80
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 f8bf 	bl	8007770 <USBD_LL_StallEP>
 80065f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065f4:	e025      	b.n	8006642 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fc1b 	bl	8006e34 <USBD_CtlError>
              break;
 80065fe:	e020      	b.n	8006642 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	885b      	ldrh	r3, [r3, #2]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d11b      	bne.n	8006640 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660e:	2b00      	cmp	r3, #0
 8006610:	d004      	beq.n	800661c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f001 f8c9 	bl	80077ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fcd4 	bl	8006fca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	4798      	blx	r3
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006634:	e004      	b.n	8006640 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fbfb 	bl	8006e34 <USBD_CtlError>
              break;
 800663e:	e000      	b.n	8006642 <USBD_StdEPReq+0x154>
              break;
 8006640:	bf00      	nop
          }
          break;
 8006642:	e0ab      	b.n	800679c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d002      	beq.n	8006656 <USBD_StdEPReq+0x168>
 8006650:	2b03      	cmp	r3, #3
 8006652:	d032      	beq.n	80066ba <USBD_StdEPReq+0x1cc>
 8006654:	e097      	b.n	8006786 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <USBD_StdEPReq+0x17e>
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b80      	cmp	r3, #128	; 0x80
 8006660:	d004      	beq.n	800666c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fbe5 	bl	8006e34 <USBD_CtlError>
                break;
 800666a:	e091      	b.n	8006790 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800666c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006670:	2b00      	cmp	r3, #0
 8006672:	da0b      	bge.n	800668c <USBD_StdEPReq+0x19e>
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	3310      	adds	r3, #16
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	4413      	add	r3, r2
 8006688:	3304      	adds	r3, #4
 800668a:	e00b      	b.n	80066a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	4413      	add	r3, r2
 80066a2:	3304      	adds	r3, #4
 80066a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2202      	movs	r2, #2
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fc2f 	bl	8006f16 <USBD_CtlSendData>
              break;
 80066b8:	e06a      	b.n	8006790 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	da11      	bge.n	80066e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	f003 020f 	and.w	r2, r3, #15
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	3324      	adds	r3, #36	; 0x24
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d117      	bne.n	800670c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fba8 	bl	8006e34 <USBD_CtlError>
                  break;
 80066e4:	e054      	b.n	8006790 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fb95 	bl	8006e34 <USBD_CtlError>
                  break;
 800670a:	e041      	b.n	8006790 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800670c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006710:	2b00      	cmp	r3, #0
 8006712:	da0b      	bge.n	800672c <USBD_StdEPReq+0x23e>
 8006714:	7bbb      	ldrb	r3, [r7, #14]
 8006716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	3310      	adds	r3, #16
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	4413      	add	r3, r2
 8006728:	3304      	adds	r3, #4
 800672a:	e00b      	b.n	8006744 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	4413      	add	r3, r2
 8006742:	3304      	adds	r3, #4
 8006744:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <USBD_StdEPReq+0x264>
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b80      	cmp	r3, #128	; 0x80
 8006750:	d103      	bne.n	800675a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	e00e      	b.n	8006778 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 f844 	bl	80077ec <USBD_LL_IsStallEP>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2201      	movs	r2, #1
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	e002      	b.n	8006778 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2202      	movs	r2, #2
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fbc9 	bl	8006f16 <USBD_CtlSendData>
              break;
 8006784:	e004      	b.n	8006790 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fb53 	bl	8006e34 <USBD_CtlError>
              break;
 800678e:	bf00      	nop
          }
          break;
 8006790:	e004      	b.n	800679c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fb4d 	bl	8006e34 <USBD_CtlError>
          break;
 800679a:	bf00      	nop
      }
      break;
 800679c:	e004      	b.n	80067a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fb47 	bl	8006e34 <USBD_CtlError>
      break;
 80067a6:	bf00      	nop
  }

  return ret;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	885b      	ldrh	r3, [r3, #2]
 80067ce:	0a1b      	lsrs	r3, r3, #8
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	2b06      	cmp	r3, #6
 80067d6:	f200 813b 	bhi.w	8006a50 <USBD_GetDescriptor+0x29c>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <USBD_GetDescriptor+0x2c>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	080067fd 	.word	0x080067fd
 80067e4:	08006815 	.word	0x08006815
 80067e8:	08006855 	.word	0x08006855
 80067ec:	08006a51 	.word	0x08006a51
 80067f0:	08006a51 	.word	0x08006a51
 80067f4:	080069f1 	.word	0x080069f1
 80067f8:	08006a1d 	.word	0x08006a1d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	7c12      	ldrb	r2, [r2, #16]
 8006808:	f107 0108 	add.w	r1, r7, #8
 800680c:	4610      	mov	r0, r2
 800680e:	4798      	blx	r3
 8006810:	60f8      	str	r0, [r7, #12]
      break;
 8006812:	e125      	b.n	8006a60 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	7c1b      	ldrb	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10d      	bne.n	8006838 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	f107 0208 	add.w	r2, r7, #8
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
 800682c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3301      	adds	r3, #1
 8006832:	2202      	movs	r2, #2
 8006834:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006836:	e113      	b.n	8006a60 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	f107 0208 	add.w	r2, r7, #8
 8006844:	4610      	mov	r0, r2
 8006846:	4798      	blx	r3
 8006848:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	2202      	movs	r2, #2
 8006850:	701a      	strb	r2, [r3, #0]
      break;
 8006852:	e105      	b.n	8006a60 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	885b      	ldrh	r3, [r3, #2]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b05      	cmp	r3, #5
 800685c:	f200 80ac 	bhi.w	80069b8 <USBD_GetDescriptor+0x204>
 8006860:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <USBD_GetDescriptor+0xb4>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	08006881 	.word	0x08006881
 800686c:	080068b5 	.word	0x080068b5
 8006870:	080068e9 	.word	0x080068e9
 8006874:	0800691d 	.word	0x0800691d
 8006878:	08006951 	.word	0x08006951
 800687c:	08006985 	.word	0x08006985
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	7c12      	ldrb	r2, [r2, #16]
 8006898:	f107 0108 	add.w	r1, r7, #8
 800689c:	4610      	mov	r0, r2
 800689e:	4798      	blx	r3
 80068a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068a2:	e0a4      	b.n	80069ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fac4 	bl	8006e34 <USBD_CtlError>
            err++;
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	3301      	adds	r3, #1
 80068b0:	72fb      	strb	r3, [r7, #11]
          break;
 80068b2:	e09c      	b.n	80069ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	7c12      	ldrb	r2, [r2, #16]
 80068cc:	f107 0108 	add.w	r1, r7, #8
 80068d0:	4610      	mov	r0, r2
 80068d2:	4798      	blx	r3
 80068d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068d6:	e08a      	b.n	80069ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 faaa 	bl	8006e34 <USBD_CtlError>
            err++;
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	3301      	adds	r3, #1
 80068e4:	72fb      	strb	r3, [r7, #11]
          break;
 80068e6:	e082      	b.n	80069ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	7c12      	ldrb	r2, [r2, #16]
 8006900:	f107 0108 	add.w	r1, r7, #8
 8006904:	4610      	mov	r0, r2
 8006906:	4798      	blx	r3
 8006908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800690a:	e070      	b.n	80069ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa90 	bl	8006e34 <USBD_CtlError>
            err++;
 8006914:	7afb      	ldrb	r3, [r7, #11]
 8006916:	3301      	adds	r3, #1
 8006918:	72fb      	strb	r3, [r7, #11]
          break;
 800691a:	e068      	b.n	80069ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00b      	beq.n	8006940 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	7c12      	ldrb	r2, [r2, #16]
 8006934:	f107 0108 	add.w	r1, r7, #8
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
 800693c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800693e:	e056      	b.n	80069ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa76 	bl	8006e34 <USBD_CtlError>
            err++;
 8006948:	7afb      	ldrb	r3, [r7, #11]
 800694a:	3301      	adds	r3, #1
 800694c:	72fb      	strb	r3, [r7, #11]
          break;
 800694e:	e04e      	b.n	80069ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00b      	beq.n	8006974 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	7c12      	ldrb	r2, [r2, #16]
 8006968:	f107 0108 	add.w	r1, r7, #8
 800696c:	4610      	mov	r0, r2
 800696e:	4798      	blx	r3
 8006970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006972:	e03c      	b.n	80069ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa5c 	bl	8006e34 <USBD_CtlError>
            err++;
 800697c:	7afb      	ldrb	r3, [r7, #11]
 800697e:	3301      	adds	r3, #1
 8006980:	72fb      	strb	r3, [r7, #11]
          break;
 8006982:	e034      	b.n	80069ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	7c12      	ldrb	r2, [r2, #16]
 800699c:	f107 0108 	add.w	r1, r7, #8
 80069a0:	4610      	mov	r0, r2
 80069a2:	4798      	blx	r3
 80069a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069a6:	e022      	b.n	80069ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa42 	bl	8006e34 <USBD_CtlError>
            err++;
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	3301      	adds	r3, #1
 80069b4:	72fb      	strb	r3, [r7, #11]
          break;
 80069b6:	e01a      	b.n	80069ee <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00c      	beq.n	80069de <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	8852      	ldrh	r2, [r2, #2]
 80069d0:	b2d1      	uxtb	r1, r2
 80069d2:	f107 0208 	add.w	r2, r7, #8
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	4798      	blx	r3
 80069da:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 80069dc:	e006      	b.n	80069ec <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fa27 	bl	8006e34 <USBD_CtlError>
            err++;
 80069e6:	7afb      	ldrb	r3, [r7, #11]
 80069e8:	3301      	adds	r3, #1
 80069ea:	72fb      	strb	r3, [r7, #11]
          break;
 80069ec:	bf00      	nop
      }
      break;
 80069ee:	e037      	b.n	8006a60 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	7c1b      	ldrb	r3, [r3, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a00:	f107 0208 	add.w	r2, r7, #8
 8006a04:	4610      	mov	r0, r2
 8006a06:	4798      	blx	r3
 8006a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a0a:	e029      	b.n	8006a60 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa10 	bl	8006e34 <USBD_CtlError>
        err++;
 8006a14:	7afb      	ldrb	r3, [r7, #11]
 8006a16:	3301      	adds	r3, #1
 8006a18:	72fb      	strb	r3, [r7, #11]
      break;
 8006a1a:	e021      	b.n	8006a60 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	7c1b      	ldrb	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10d      	bne.n	8006a40 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	f107 0208 	add.w	r2, r7, #8
 8006a30:	4610      	mov	r0, r2
 8006a32:	4798      	blx	r3
 8006a34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	2207      	movs	r2, #7
 8006a3c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a3e:	e00f      	b.n	8006a60 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f9f6 	bl	8006e34 <USBD_CtlError>
        err++;
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006a4e:	e007      	b.n	8006a60 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9ee 	bl	8006e34 <USBD_CtlError>
      err++;
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	72fb      	strb	r3, [r7, #11]
      break;
 8006a5e:	bf00      	nop
  }

  if (err != 0U)
 8006a60:	7afb      	ldrb	r3, [r7, #11]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d11e      	bne.n	8006aa4 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	88db      	ldrh	r3, [r3, #6]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d016      	beq.n	8006a9c <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8006a6e:	893b      	ldrh	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00e      	beq.n	8006a92 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	88da      	ldrh	r2, [r3, #6]
 8006a78:	893b      	ldrh	r3, [r7, #8]
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bf28      	it	cs
 8006a7e:	4613      	movcs	r3, r2
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a84:	893b      	ldrh	r3, [r7, #8]
 8006a86:	461a      	mov	r2, r3
 8006a88:	68f9      	ldr	r1, [r7, #12]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa43 	bl	8006f16 <USBD_CtlSendData>
 8006a90:	e009      	b.n	8006aa6 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f9cd 	bl	8006e34 <USBD_CtlError>
 8006a9a:	e004      	b.n	8006aa6 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fa94 	bl	8006fca <USBD_CtlSendStatus>
 8006aa2:	e000      	b.n	8006aa6 <USBD_GetDescriptor+0x2f2>
    return;
 8006aa4:	bf00      	nop
  }
}
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	889b      	ldrh	r3, [r3, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d131      	bne.n	8006b22 <USBD_SetAddress+0x76>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	88db      	ldrh	r3, [r3, #6]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d12d      	bne.n	8006b22 <USBD_SetAddress+0x76>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	885b      	ldrh	r3, [r3, #2]
 8006aca:	2b7f      	cmp	r3, #127	; 0x7f
 8006acc:	d829      	bhi.n	8006b22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	885b      	ldrh	r3, [r3, #2]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d104      	bne.n	8006af0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f9a3 	bl	8006e34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aee:	e01d      	b.n	8006b2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7bfa      	ldrb	r2, [r7, #15]
 8006af4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fea1 	bl	8007844 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa61 	bl	8006fca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2202      	movs	r2, #2
 8006b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b16:	e009      	b.n	8006b2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b20:	e004      	b.n	8006b2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f985 	bl	8006e34 <USBD_CtlError>
  }
}
 8006b2a:	bf00      	nop
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	885b      	ldrh	r3, [r3, #2]
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	4b4c      	ldr	r3, [pc, #304]	; (8006c7c <USBD_SetConfig+0x148>)
 8006b4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b4c:	4b4b      	ldr	r3, [pc, #300]	; (8006c7c <USBD_SetConfig+0x148>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d905      	bls.n	8006b60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f96c 	bl	8006e34 <USBD_CtlError>
    return USBD_FAIL;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e088      	b.n	8006c72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d002      	beq.n	8006b72 <USBD_SetConfig+0x3e>
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d025      	beq.n	8006bbc <USBD_SetConfig+0x88>
 8006b70:	e071      	b.n	8006c56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b72:	4b42      	ldr	r3, [pc, #264]	; (8006c7c <USBD_SetConfig+0x148>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d01c      	beq.n	8006bb4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006b7a:	4b40      	ldr	r3, [pc, #256]	; (8006c7c <USBD_SetConfig+0x148>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b84:	4b3d      	ldr	r3, [pc, #244]	; (8006c7c <USBD_SetConfig+0x148>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff f937 	bl	8005dfe <USBD_SetClassConfig>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f949 	bl	8006e34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ba2:	e065      	b.n	8006c70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fa10 	bl	8006fca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2203      	movs	r2, #3
 8006bae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bb2:	e05d      	b.n	8006c70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fa08 	bl	8006fca <USBD_CtlSendStatus>
      break;
 8006bba:	e059      	b.n	8006c70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006bbc:	4b2f      	ldr	r3, [pc, #188]	; (8006c7c <USBD_SetConfig+0x148>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d112      	bne.n	8006bea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006bcc:	4b2b      	ldr	r3, [pc, #172]	; (8006c7c <USBD_SetConfig+0x148>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bd6:	4b29      	ldr	r3, [pc, #164]	; (8006c7c <USBD_SetConfig+0x148>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff f92a 	bl	8005e36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f9f1 	bl	8006fca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006be8:	e042      	b.n	8006c70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006bea:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <USBD_SetConfig+0x148>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d02a      	beq.n	8006c4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff f918 	bl	8005e36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c06:	4b1d      	ldr	r3, [pc, #116]	; (8006c7c <USBD_SetConfig+0x148>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c10:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <USBD_SetConfig+0x148>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff f8f1 	bl	8005dfe <USBD_SetClassConfig>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00f      	beq.n	8006c46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f903 	bl	8006e34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff f8fd 	bl	8005e36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c44:	e014      	b.n	8006c70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f9bf 	bl	8006fca <USBD_CtlSendStatus>
      break;
 8006c4c:	e010      	b.n	8006c70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f9bb 	bl	8006fca <USBD_CtlSendStatus>
      break;
 8006c54:	e00c      	b.n	8006c70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f8eb 	bl	8006e34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c5e:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <USBD_SetConfig+0x148>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff f8e6 	bl	8005e36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6e:	bf00      	nop
  }

  return ret;
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000263 	.word	0x20000263

08006c80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	88db      	ldrh	r3, [r3, #6]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d004      	beq.n	8006c9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f8cd 	bl	8006e34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c9a:	e023      	b.n	8006ce4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	dc02      	bgt.n	8006cae <USBD_GetConfig+0x2e>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	dc03      	bgt.n	8006cb4 <USBD_GetConfig+0x34>
 8006cac:	e015      	b.n	8006cda <USBD_GetConfig+0x5a>
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d00b      	beq.n	8006cca <USBD_GetConfig+0x4a>
 8006cb2:	e012      	b.n	8006cda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f927 	bl	8006f16 <USBD_CtlSendData>
        break;
 8006cc8:	e00c      	b.n	8006ce4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	2201      	movs	r2, #1
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f91f 	bl	8006f16 <USBD_CtlSendData>
        break;
 8006cd8:	e004      	b.n	8006ce4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f8a9 	bl	8006e34 <USBD_CtlError>
        break;
 8006ce2:	bf00      	nop
}
 8006ce4:	bf00      	nop
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d81e      	bhi.n	8006d42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	88db      	ldrh	r3, [r3, #6]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d004      	beq.n	8006d16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f890 	bl	8006e34 <USBD_CtlError>
        break;
 8006d14:	e01a      	b.n	8006d4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f043 0202 	orr.w	r2, r3, #2
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	330c      	adds	r3, #12
 8006d36:	2202      	movs	r2, #2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f8eb 	bl	8006f16 <USBD_CtlSendData>
      break;
 8006d40:	e004      	b.n	8006d4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f875 	bl	8006e34 <USBD_CtlError>
      break;
 8006d4a:	bf00      	nop
  }
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	885b      	ldrh	r3, [r3, #2]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d106      	bne.n	8006d74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f92b 	bl	8006fca <USBD_CtlSendStatus>
  }
}
 8006d74:	bf00      	nop
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d80b      	bhi.n	8006dac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	885b      	ldrh	r3, [r3, #2]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d10c      	bne.n	8006db6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f910 	bl	8006fca <USBD_CtlSendStatus>
      }
      break;
 8006daa:	e004      	b.n	8006db6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f840 	bl	8006e34 <USBD_CtlError>
      break;
 8006db4:	e000      	b.n	8006db8 <USBD_ClrFeature+0x3c>
      break;
 8006db6:	bf00      	nop
  }
}
 8006db8:	bf00      	nop
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	781a      	ldrb	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff faaa 	bl	8006344 <SWAPBYTE>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff fa9d 	bl	8006344 <SWAPBYTE>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3301      	adds	r3, #1
 8006e16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7ff fa90 	bl	8006344 <SWAPBYTE>
 8006e24:	4603      	mov	r3, r0
 8006e26:	461a      	mov	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	80da      	strh	r2, [r3, #6]
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e3e:	2180      	movs	r1, #128	; 0x80
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fc95 	bl	8007770 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e46:	2100      	movs	r1, #0
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fc91 	bl	8007770 <USBD_LL_StallEP>
}
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d036      	beq.n	8006eda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e70:	6938      	ldr	r0, [r7, #16]
 8006e72:	f000 f836 	bl	8006ee2 <USBD_GetLen>
 8006e76:	4603      	mov	r3, r0
 8006e78:	3301      	adds	r3, #1
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	4413      	add	r3, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	7812      	ldrb	r2, [r2, #0]
 8006e8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	3301      	adds	r3, #1
 8006e94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	2203      	movs	r2, #3
 8006e9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ea6:	e013      	b.n	8006ed0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	4413      	add	r3, r2
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	7812      	ldrb	r2, [r2, #0]
 8006eb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	613b      	str	r3, [r7, #16]
    idx++;
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	701a      	strb	r2, [r3, #0]
    idx++;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e7      	bne.n	8006ea8 <USBD_GetString+0x52>
 8006ed8:	e000      	b.n	8006edc <USBD_GetString+0x86>
    return;
 8006eda:	bf00      	nop
  }
}
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ef2:	e005      	b.n	8006f00 <USBD_GetLen+0x1e>
  {
    len++;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1f5      	bne.n	8006ef4 <USBD_GetLen+0x12>
  }

  return len;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fca0 	bl	8007882 <USBD_LL_Transmit>

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 fc8f 	bl	8007882 <USBD_LL_Transmit>

  return USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2203      	movs	r2, #3
 8006f7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	2100      	movs	r1, #0
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fc93 	bl	80078c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	2100      	movs	r1, #0
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 fc82 	bl	80078c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2100      	movs	r1, #0
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fc4e 	bl	8007882 <USBD_LL_Transmit>

  return USBD_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2205      	movs	r2, #5
 8006ffc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007000:	2300      	movs	r3, #0
 8007002:	2200      	movs	r2, #0
 8007004:	2100      	movs	r1, #0
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fc5c 	bl	80078c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800701c:	2200      	movs	r2, #0
 800701e:	4912      	ldr	r1, [pc, #72]	; (8007068 <MX_USB_DEVICE_Init+0x50>)
 8007020:	4812      	ldr	r0, [pc, #72]	; (800706c <MX_USB_DEVICE_Init+0x54>)
 8007022:	f7fe fe63 	bl	8005cec <USBD_Init>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800702c:	f7f9 fb26 	bl	800067c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8007030:	490f      	ldr	r1, [pc, #60]	; (8007070 <MX_USB_DEVICE_Init+0x58>)
 8007032:	480e      	ldr	r0, [pc, #56]	; (800706c <MX_USB_DEVICE_Init+0x54>)
 8007034:	f7fe fe8a 	bl	8005d4c <USBD_RegisterClass>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800703e:	f7f9 fb1d 	bl	800067c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8007042:	490c      	ldr	r1, [pc, #48]	; (8007074 <MX_USB_DEVICE_Init+0x5c>)
 8007044:	4809      	ldr	r0, [pc, #36]	; (800706c <MX_USB_DEVICE_Init+0x54>)
 8007046:	f7fe facf 	bl	80055e8 <USBD_DFU_RegisterMedia>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007050:	f7f9 fb14 	bl	800067c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007054:	4805      	ldr	r0, [pc, #20]	; (800706c <MX_USB_DEVICE_Init+0x54>)
 8007056:	f7fe fea0 	bl	8005d9a <USBD_Start>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007060:	f7f9 fb0c 	bl	800067c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007064:	bf00      	nop
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000094 	.word	0x20000094
 800706c:	20000264 	.word	0x20000264
 8007070:	20000030 	.word	0x20000030
 8007074:	200000e4 	.word	0x200000e4

08007078 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2212      	movs	r2, #18
 8007088:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800708a:	4b03      	ldr	r3, [pc, #12]	; (8007098 <USBD_FS_DeviceDescriptor+0x20>)
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	200000b0 	.word	0x200000b0

0800709c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	6039      	str	r1, [r7, #0]
 80070a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2204      	movs	r2, #4
 80070ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070ae:	4b03      	ldr	r3, [pc, #12]	; (80070bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	200000c4 	.word	0x200000c4

080070c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d105      	bne.n	80070de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	4907      	ldr	r1, [pc, #28]	; (80070f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80070d6:	4808      	ldr	r0, [pc, #32]	; (80070f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80070d8:	f7ff febd 	bl	8006e56 <USBD_GetString>
 80070dc:	e004      	b.n	80070e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	4904      	ldr	r1, [pc, #16]	; (80070f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80070e2:	4805      	ldr	r0, [pc, #20]	; (80070f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80070e4:	f7ff feb7 	bl	8006e56 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e8:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000534 	.word	0x20000534
 80070f8:	08007a18 	.word	0x08007a18

080070fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	4904      	ldr	r1, [pc, #16]	; (800711c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800710c:	4804      	ldr	r0, [pc, #16]	; (8007120 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800710e:	f7ff fea2 	bl	8006e56 <USBD_GetString>
  return USBD_StrDesc;
 8007112:	4b02      	ldr	r3, [pc, #8]	; (800711c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007114:	4618      	mov	r0, r3
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20000534 	.word	0x20000534
 8007120:	08007a38 	.word	0x08007a38

08007124 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	6039      	str	r1, [r7, #0]
 800712e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	221a      	movs	r2, #26
 8007134:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007136:	f000 f843 	bl	80071c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800713a:	4b02      	ldr	r3, [pc, #8]	; (8007144 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	200000c8 	.word	0x200000c8

08007148 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4907      	ldr	r1, [pc, #28]	; (800717c <USBD_FS_ConfigStrDescriptor+0x34>)
 800715e:	4808      	ldr	r0, [pc, #32]	; (8007180 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007160:	f7ff fe79 	bl	8006e56 <USBD_GetString>
 8007164:	e004      	b.n	8007170 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	4904      	ldr	r1, [pc, #16]	; (800717c <USBD_FS_ConfigStrDescriptor+0x34>)
 800716a:	4805      	ldr	r0, [pc, #20]	; (8007180 <USBD_FS_ConfigStrDescriptor+0x38>)
 800716c:	f7ff fe73 	bl	8006e56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007170:	4b02      	ldr	r3, [pc, #8]	; (800717c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20000534 	.word	0x20000534
 8007180:	08007a4c 	.word	0x08007a4c

08007184 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	4907      	ldr	r1, [pc, #28]	; (80071b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800719a:	4808      	ldr	r0, [pc, #32]	; (80071bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800719c:	f7ff fe5b 	bl	8006e56 <USBD_GetString>
 80071a0:	e004      	b.n	80071ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	4904      	ldr	r1, [pc, #16]	; (80071b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071a6:	4805      	ldr	r0, [pc, #20]	; (80071bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071a8:	f7ff fe55 	bl	8006e56 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071ac:	4b02      	ldr	r3, [pc, #8]	; (80071b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20000534 	.word	0x20000534
 80071bc:	08007a58 	.word	0x08007a58

080071c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071c6:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <Get_SerialNum+0x44>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071cc:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <Get_SerialNum+0x48>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071d2:	4b0e      	ldr	r3, [pc, #56]	; (800720c <Get_SerialNum+0x4c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4413      	add	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071e6:	2208      	movs	r2, #8
 80071e8:	4909      	ldr	r1, [pc, #36]	; (8007210 <Get_SerialNum+0x50>)
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f814 	bl	8007218 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071f0:	2204      	movs	r2, #4
 80071f2:	4908      	ldr	r1, [pc, #32]	; (8007214 <Get_SerialNum+0x54>)
 80071f4:	68b8      	ldr	r0, [r7, #8]
 80071f6:	f000 f80f 	bl	8007218 <IntToUnicode>
  }
}
 80071fa:	bf00      	nop
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	1fff7a10 	.word	0x1fff7a10
 8007208:	1fff7a14 	.word	0x1fff7a14
 800720c:	1fff7a18 	.word	0x1fff7a18
 8007210:	200000ca 	.word	0x200000ca
 8007214:	200000da 	.word	0x200000da

08007218 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800722a:	2300      	movs	r3, #0
 800722c:	75fb      	strb	r3, [r7, #23]
 800722e:	e027      	b.n	8007280 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	0f1b      	lsrs	r3, r3, #28
 8007234:	2b09      	cmp	r3, #9
 8007236:	d80b      	bhi.n	8007250 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	0f1b      	lsrs	r3, r3, #28
 800723c:	b2da      	uxtb	r2, r3
 800723e:	7dfb      	ldrb	r3, [r7, #23]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	4619      	mov	r1, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	440b      	add	r3, r1
 8007248:	3230      	adds	r2, #48	; 0x30
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	e00a      	b.n	8007266 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	0f1b      	lsrs	r3, r3, #28
 8007254:	b2da      	uxtb	r2, r3
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	4619      	mov	r1, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	440b      	add	r3, r1
 8007260:	3237      	adds	r2, #55	; 0x37
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	011b      	lsls	r3, r3, #4
 800726a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	3301      	adds	r3, #1
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	4413      	add	r3, r2
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	3301      	adds	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
 8007280:	7dfa      	ldrb	r2, [r7, #23]
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	429a      	cmp	r2, r3
 8007286:	d3d3      	bcc.n	8007230 <IntToUnicode+0x18>
  }
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8007296:	b480      	push	{r7}
 8007298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800729a:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800729c:	4618      	mov	r0, r3
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 80072a6:	b480      	push	{r7}
 80072a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80072aa:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */
  if(flashErase(Add, 1024) != true)
 80072be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7f9 fa84 	bl	80007d0 <flashErase>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f083 0301 	eor.w	r3, r3, #1
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <MEM_If_Erase_FS+0x22>
  {
    return 1;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <MEM_If_Erase_FS+0x24>
  }
  return (USBD_OK);
 80072d8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  if(flashWrite((uint32_t) dest, src, Len) != true)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7f9 fac7 	bl	8000888 <flashWrite>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f083 0301 	eor.w	r3, r3, #1
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <MEM_If_Write_FS+0x28>
  {
    return 1;
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <MEM_If_Write_FS+0x2a>
  }
  return (USBD_OK);
 800730a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  for(int i=0; i<Len; i++)
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	e00a      	b.n	800733c <MEM_If_Read_FS+0x28>
  {
    dest[i] = src[i];
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	441a      	add	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	440b      	add	r3, r1
 8007332:	7812      	ldrb	r2, [r2, #0]
 8007334:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<Len; i++)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	3301      	adds	r3, #1
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d8f0      	bhi.n	8007326 <MEM_If_Read_FS+0x12>
  }
  return (uint8_t*)(dest);
 8007344:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE END 4 */
}
 8007346:	4618      	mov	r0, r3
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	460b      	mov	r3, r1
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d10c      	bne.n	8007380 <MEM_If_GetStatus_FS+0x2e>
  {
    case DFU_MEDIA_PROGRAM:
      buffer[1] = (50 >> 0);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3301      	adds	r3, #1
 800736a:	2232      	movs	r2, #50	; 0x32
 800736c:	701a      	strb	r2, [r3, #0]
      buffer[2] = (50 >> 8);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3302      	adds	r3, #2
 8007372:	2200      	movs	r2, #0
 8007374:	701a      	strb	r2, [r3, #0]
      buffer[3] = 0;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3303      	adds	r3, #3
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
    break;
 800737e:	e00c      	b.n	800739a <MEM_If_GetStatus_FS+0x48>

    case DFU_MEDIA_ERASE:
    default:
      buffer[1] = (50 >> 0);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3301      	adds	r3, #1
 8007384:	2232      	movs	r2, #50	; 0x32
 8007386:	701a      	strb	r2, [r3, #0]
      buffer[2] = (50 >> 8);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3302      	adds	r3, #2
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
      buffer[3] = 0;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3303      	adds	r3, #3
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]
    break;
 8007398:	bf00      	nop
  }
  return (USBD_OK);
 800739a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08a      	sub	sp, #40	; 0x28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073b0:	f107 0314 	add.w	r3, r7, #20
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	605a      	str	r2, [r3, #4]
 80073ba:	609a      	str	r2, [r3, #8]
 80073bc:	60da      	str	r2, [r3, #12]
 80073be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073c8:	d13a      	bne.n	8007440 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073ca:	2300      	movs	r3, #0
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	4b1e      	ldr	r3, [pc, #120]	; (8007448 <HAL_PCD_MspInit+0xa0>)
 80073d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d2:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <HAL_PCD_MspInit+0xa0>)
 80073d4:	f043 0301 	orr.w	r3, r3, #1
 80073d8:	6313      	str	r3, [r2, #48]	; 0x30
 80073da:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <HAL_PCD_MspInit+0xa0>)
 80073dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80073e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ec:	2302      	movs	r3, #2
 80073ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073f4:	2303      	movs	r3, #3
 80073f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073f8:	230a      	movs	r3, #10
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073fc:	f107 0314 	add.w	r3, r7, #20
 8007400:	4619      	mov	r1, r3
 8007402:	4812      	ldr	r0, [pc, #72]	; (800744c <HAL_PCD_MspInit+0xa4>)
 8007404:	f7fa f968 	bl	80016d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007408:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <HAL_PCD_MspInit+0xa0>)
 800740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740c:	4a0e      	ldr	r2, [pc, #56]	; (8007448 <HAL_PCD_MspInit+0xa0>)
 800740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007412:	6353      	str	r3, [r2, #52]	; 0x34
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <HAL_PCD_MspInit+0xa0>)
 800741a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741c:	4a0a      	ldr	r2, [pc, #40]	; (8007448 <HAL_PCD_MspInit+0xa0>)
 800741e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007422:	6453      	str	r3, [r2, #68]	; 0x44
 8007424:	4b08      	ldr	r3, [pc, #32]	; (8007448 <HAL_PCD_MspInit+0xa0>)
 8007426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007430:	2200      	movs	r2, #0
 8007432:	2100      	movs	r1, #0
 8007434:	2043      	movs	r0, #67	; 0x43
 8007436:	f7f9 fe30 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800743a:	2043      	movs	r0, #67	; 0x43
 800743c:	f7f9 fe49 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007440:	bf00      	nop
 8007442:	3728      	adds	r7, #40	; 0x28
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40023800 	.word	0x40023800
 800744c:	40020000 	.word	0x40020000

08007450 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f7fe fcfd 	bl	8005e66 <USBD_LL_SetupStage>
}
 800746c:	bf00      	nop
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007486:	78fa      	ldrb	r2, [r7, #3]
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	1a9b      	subs	r3, r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	440b      	add	r3, r1
 8007494:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	4619      	mov	r1, r3
 800749e:	f7fe fd37 	bl	8005f10 <USBD_LL_DataOutStage>
}
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80074bc:	78fa      	ldrb	r2, [r7, #3]
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	3348      	adds	r3, #72	; 0x48
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	4619      	mov	r1, r3
 80074d2:	f7fe fd80 	bl	8005fd6 <USBD_LL_DataInStage>
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe fe94 	bl	800621a <USBD_LL_SOF>
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007502:	2301      	movs	r3, #1
 8007504:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	2b02      	cmp	r3, #2
 800750c:	d001      	beq.n	8007512 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800750e:	f7f9 f8b5 	bl	800067c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007518:	7bfa      	ldrb	r2, [r7, #15]
 800751a:	4611      	mov	r1, r2
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe fe3e 	bl	800619e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007528:	4618      	mov	r0, r3
 800752a:	f7fe fdea 	bl	8006102 <USBD_LL_Reset>
}
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe fe39 	bl	80061be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800756c:	4b04      	ldr	r3, [pc, #16]	; (8007580 <HAL_PCD_SuspendCallback+0x48>)
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	4a03      	ldr	r2, [pc, #12]	; (8007580 <HAL_PCD_SuspendCallback+0x48>)
 8007572:	f043 0306 	orr.w	r3, r3, #6
 8007576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	e000ed00 	.word	0xe000ed00

08007584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fe29 	bl	80061ea <USBD_LL_Resume>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fe77 	bl	80062aa <USBD_LL_IsoOUTIncomplete>
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe fe3f 	bl	800625e <USBD_LL_IsoINIncomplete>
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fe7d 	bl	80062f6 <USBD_LL_DevConnected>
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fe7a 	bl	800630c <USBD_LL_DevDisconnected>
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d13c      	bne.n	80076aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007630:	4a20      	ldr	r2, [pc, #128]	; (80076b4 <USBD_LL_Init+0x94>)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a1e      	ldr	r2, [pc, #120]	; (80076b4 <USBD_LL_Init+0x94>)
 800763c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007640:	4b1c      	ldr	r3, [pc, #112]	; (80076b4 <USBD_LL_Init+0x94>)
 8007642:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007646:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007648:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <USBD_LL_Init+0x94>)
 800764a:	2204      	movs	r2, #4
 800764c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800764e:	4b19      	ldr	r3, [pc, #100]	; (80076b4 <USBD_LL_Init+0x94>)
 8007650:	2202      	movs	r2, #2
 8007652:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007654:	4b17      	ldr	r3, [pc, #92]	; (80076b4 <USBD_LL_Init+0x94>)
 8007656:	2200      	movs	r2, #0
 8007658:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800765a:	4b16      	ldr	r3, [pc, #88]	; (80076b4 <USBD_LL_Init+0x94>)
 800765c:	2202      	movs	r2, #2
 800765e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007660:	4b14      	ldr	r3, [pc, #80]	; (80076b4 <USBD_LL_Init+0x94>)
 8007662:	2200      	movs	r2, #0
 8007664:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007666:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <USBD_LL_Init+0x94>)
 8007668:	2200      	movs	r2, #0
 800766a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800766c:	4b11      	ldr	r3, [pc, #68]	; (80076b4 <USBD_LL_Init+0x94>)
 800766e:	2200      	movs	r2, #0
 8007670:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007672:	4b10      	ldr	r3, [pc, #64]	; (80076b4 <USBD_LL_Init+0x94>)
 8007674:	2200      	movs	r2, #0
 8007676:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007678:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <USBD_LL_Init+0x94>)
 800767a:	2200      	movs	r2, #0
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800767e:	480d      	ldr	r0, [pc, #52]	; (80076b4 <USBD_LL_Init+0x94>)
 8007680:	f7fa f9e1 	bl	8001a46 <HAL_PCD_Init>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800768a:	f7f8 fff7 	bl	800067c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800768e:	2180      	movs	r1, #128	; 0x80
 8007690:	4808      	ldr	r0, [pc, #32]	; (80076b4 <USBD_LL_Init+0x94>)
 8007692:	f7fb fb16 	bl	8002cc2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007696:	2240      	movs	r2, #64	; 0x40
 8007698:	2100      	movs	r1, #0
 800769a:	4806      	ldr	r0, [pc, #24]	; (80076b4 <USBD_LL_Init+0x94>)
 800769c:	f7fb faca 	bl	8002c34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80076a0:	2280      	movs	r2, #128	; 0x80
 80076a2:	2101      	movs	r1, #1
 80076a4:	4803      	ldr	r0, [pc, #12]	; (80076b4 <USBD_LL_Init+0x94>)
 80076a6:	f7fb fac5 	bl	8002c34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20000734 	.word	0x20000734

080076b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fa fad6 	bl	8001c80 <HAL_PCD_Start>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 f92c 	bl	8007938 <USBD_Get_USB_Status>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007704:	4618      	mov	r0, r3
 8007706:	f7fa faee 	bl	8001ce6 <HAL_PCD_Stop>
 800770a:	4603      	mov	r3, r0
 800770c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	4618      	mov	r0, r3
 8007712:	f000 f911 	bl	8007938 <USBD_Get_USB_Status>
 8007716:	4603      	mov	r3, r0
 8007718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800771a:	7bbb      	ldrb	r3, [r7, #14]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	4608      	mov	r0, r1
 800772e:	4611      	mov	r1, r2
 8007730:	461a      	mov	r2, r3
 8007732:	4603      	mov	r3, r0
 8007734:	70fb      	strb	r3, [r7, #3]
 8007736:	460b      	mov	r3, r1
 8007738:	70bb      	strb	r3, [r7, #2]
 800773a:	4613      	mov	r3, r2
 800773c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800774c:	78bb      	ldrb	r3, [r7, #2]
 800774e:	883a      	ldrh	r2, [r7, #0]
 8007750:	78f9      	ldrb	r1, [r7, #3]
 8007752:	f7fa fed8 	bl	8002506 <HAL_PCD_EP_Open>
 8007756:	4603      	mov	r3, r0
 8007758:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	4618      	mov	r0, r3
 800775e:	f000 f8eb 	bl	8007938 <USBD_Get_USB_Status>
 8007762:	4603      	mov	r3, r0
 8007764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007766:	7bbb      	ldrb	r3, [r7, #14]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f7fa ffb6 	bl	8002700 <HAL_PCD_EP_SetStall>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 f8cc 	bl	8007938 <USBD_Get_USB_Status>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	460b      	mov	r3, r1
 80077b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077c8:	78fa      	ldrb	r2, [r7, #3]
 80077ca:	4611      	mov	r1, r2
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fa fffb 	bl	80027c8 <HAL_PCD_EP_ClrStall>
 80077d2:	4603      	mov	r3, r0
 80077d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 f8ad 	bl	8007938 <USBD_Get_USB_Status>
 80077de:	4603      	mov	r3, r0
 80077e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007804:	2b00      	cmp	r3, #0
 8007806:	da0b      	bge.n	8007820 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800780e:	68f9      	ldr	r1, [r7, #12]
 8007810:	4613      	mov	r3, r2
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	1a9b      	subs	r3, r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	440b      	add	r3, r1
 800781a:	333e      	adds	r3, #62	; 0x3e
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	e00b      	b.n	8007838 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	4613      	mov	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007836:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7fa fe2a 	bl	80024bc <HAL_PCD_SetAddress>
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f862 	bl	8007938 <USBD_Get_USB_Status>
 8007874:	4603      	mov	r3, r0
 8007876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007878:	7bbb      	ldrb	r3, [r7, #14]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b086      	sub	sp, #24
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	603b      	str	r3, [r7, #0]
 800788e:	460b      	mov	r3, r1
 8007890:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80078a0:	7af9      	ldrb	r1, [r7, #11]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	f7fa fee1 	bl	800266c <HAL_PCD_EP_Transmit>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f841 	bl	8007938 <USBD_Get_USB_Status>
 80078b6:	4603      	mov	r3, r0
 80078b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	460b      	mov	r3, r1
 80078d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80078e2:	7af9      	ldrb	r1, [r7, #11]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	f7fa fe75 	bl	80025d6 <HAL_PCD_EP_Receive>
 80078ec:	4603      	mov	r3, r0
 80078ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 f820 	bl	8007938 <USBD_Get_USB_Status>
 80078f8:	4603      	mov	r3, r0
 80078fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007910:	4b03      	ldr	r3, [pc, #12]	; (8007920 <USBD_static_malloc+0x18>)
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20000b3c 	.word	0x20000b3c

08007924 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]

}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d817      	bhi.n	800797c <USBD_Get_USB_Status+0x44>
 800794c:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <USBD_Get_USB_Status+0x1c>)
 800794e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007952:	bf00      	nop
 8007954:	08007965 	.word	0x08007965
 8007958:	0800796b 	.word	0x0800796b
 800795c:	08007971 	.word	0x08007971
 8007960:	08007977 	.word	0x08007977
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]
    break;
 8007968:	e00b      	b.n	8007982 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	73fb      	strb	r3, [r7, #15]
    break;
 800796e:	e008      	b.n	8007982 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007970:	2301      	movs	r3, #1
 8007972:	73fb      	strb	r3, [r7, #15]
    break;
 8007974:	e005      	b.n	8007982 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007976:	2303      	movs	r3, #3
 8007978:	73fb      	strb	r3, [r7, #15]
    break;
 800797a:	e002      	b.n	8007982 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800797c:	2303      	movs	r3, #3
 800797e:	73fb      	strb	r3, [r7, #15]
    break;
 8007980:	bf00      	nop
  }
  return usb_status;
 8007982:	7bfb      	ldrb	r3, [r7, #15]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <main>:
 */

#include "main.h"

int main(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0

	hwInit();
 8007994:	f7f9 f9cc 	bl	8000d30 <hwInit>
	apInit();
 8007998:	f7f8 fda0 	bl	80004dc <apInit>

	apMain();
 800799c:	f7f8 fda5 	bl	80004ea <apMain>
	return 0;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <__libc_init_array>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	4d0d      	ldr	r5, [pc, #52]	; (80079e0 <__libc_init_array+0x38>)
 80079ac:	4c0d      	ldr	r4, [pc, #52]	; (80079e4 <__libc_init_array+0x3c>)
 80079ae:	1b64      	subs	r4, r4, r5
 80079b0:	10a4      	asrs	r4, r4, #2
 80079b2:	2600      	movs	r6, #0
 80079b4:	42a6      	cmp	r6, r4
 80079b6:	d109      	bne.n	80079cc <__libc_init_array+0x24>
 80079b8:	4d0b      	ldr	r5, [pc, #44]	; (80079e8 <__libc_init_array+0x40>)
 80079ba:	4c0c      	ldr	r4, [pc, #48]	; (80079ec <__libc_init_array+0x44>)
 80079bc:	f000 f820 	bl	8007a00 <_init>
 80079c0:	1b64      	subs	r4, r4, r5
 80079c2:	10a4      	asrs	r4, r4, #2
 80079c4:	2600      	movs	r6, #0
 80079c6:	42a6      	cmp	r6, r4
 80079c8:	d105      	bne.n	80079d6 <__libc_init_array+0x2e>
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d0:	4798      	blx	r3
 80079d2:	3601      	adds	r6, #1
 80079d4:	e7ee      	b.n	80079b4 <__libc_init_array+0xc>
 80079d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079da:	4798      	blx	r3
 80079dc:	3601      	adds	r6, #1
 80079de:	e7f2      	b.n	80079c6 <__libc_init_array+0x1e>
 80079e0:	08007b24 	.word	0x08007b24
 80079e4:	08007b24 	.word	0x08007b24
 80079e8:	08007b24 	.word	0x08007b24
 80079ec:	08007b28 	.word	0x08007b28

080079f0 <memset>:
 80079f0:	4402      	add	r2, r0
 80079f2:	4603      	mov	r3, r0
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d100      	bne.n	80079fa <memset+0xa>
 80079f8:	4770      	bx	lr
 80079fa:	f803 1b01 	strb.w	r1, [r3], #1
 80079fe:	e7f9      	b.n	80079f4 <memset+0x4>

08007a00 <_init>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	bf00      	nop
 8007a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a06:	bc08      	pop	{r3}
 8007a08:	469e      	mov	lr, r3
 8007a0a:	4770      	bx	lr

08007a0c <_fini>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	bf00      	nop
 8007a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a12:	bc08      	pop	{r3}
 8007a14:	469e      	mov	lr, r3
 8007a16:	4770      	bx	lr
