
cube_F411CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eb8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008050  08008050  00018050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080b8  080080b8  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  080080b8  080080b8  000180b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080c0  080080c0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c0  080080c0  000180c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080080c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f0  20000184  0800824c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  0800824c  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140cc  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003819  00000000  00000000  00034280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00037aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00038a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e60  00000000  00000000  00039838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fe6  00000000  00000000  00053698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2bd  00000000  00000000  0006967e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f893b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de8  00000000  00000000  000f898c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000184 	.word	0x20000184
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008038 	.word	0x08008038

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000188 	.word	0x20000188
 80001d4:	08008038 	.word	0x08008038

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_DMA_Init+0x3c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <MX_DMA_Init+0x3c>)
 80004ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_DMA_Init+0x3c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	203a      	movs	r0, #58	; 0x3a
 8000504:	f000 fbfb 	bl	8000cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000508:	203a      	movs	r0, #58	; 0x3a
 800050a:	f000 fc14 	bl	8000d36 <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <MX_GPIO_Init+0x9c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a1f      	ldr	r2, [pc, #124]	; (80005b8 <MX_GPIO_Init+0x9c>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <MX_GPIO_Init+0x9c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_GPIO_Init+0x9c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <MX_GPIO_Init+0x9c>)
 8000558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_GPIO_Init+0x9c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_GPIO_Init+0x9c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <MX_GPIO_Init+0x9c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_GPIO_Init+0x9c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <MX_GPIO_Init+0xa0>)
 800058e:	f001 f8ed 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 8000592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	4619      	mov	r1, r3
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <MX_GPIO_Init+0xa0>)
 80005ac:	f000 ff5a 	bl	8001464 <HAL_GPIO_Init>

}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40020800 	.word	0x40020800

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fa2a 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f80c 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f7ff ffa6 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f7ff ff84 	bl	80004dc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80005d4:	f006 ff80 	bl	80074d8 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80005d8:	f000 f874 	bl	80006c4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005dc:	f000 f946 	bl	800086c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <main+0x20>
	...

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 fd18 	bl	8008028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <SystemClock_Config+0xcc>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xd0>)
 800062e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000640:	2305      	movs	r3, #5
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800064a:	2301      	movs	r3, #1
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000658:	2319      	movs	r3, #25
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800065c:	23c0      	movs	r3, #192	; 0xc0
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fa19 	bl	8002aa4 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000678:	f000 f81e 	bl	80006b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2103      	movs	r1, #3
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fc7b 	bl	8002f94 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a4:	f000 f808 	bl	80006b8 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>
	...

080006c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_RTC_Init+0x44>)
 80006ca:	4a10      	ldr	r2, [pc, #64]	; (800070c <MX_RTC_Init+0x48>)
 80006cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_RTC_Init+0x44>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_RTC_Init+0x44>)
 80006d6:	227f      	movs	r2, #127	; 0x7f
 80006d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_RTC_Init+0x44>)
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_RTC_Init+0x44>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_RTC_Init+0x44>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_RTC_Init+0x44>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_RTC_Init+0x44>)
 80006f4:	f002 ff1e 	bl	8003534 <HAL_RTC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80006fe:	f7ff ffdb 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200001a0 	.word	0x200001a0
 800070c:	40002800 	.word	0x40002800

08000710 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <HAL_RTC_MspInit+0x50>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d111      	bne.n	8000758 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000734:	2302      	movs	r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fe06 	bl	8003354 <HAL_RCCEx_PeriphCLKConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800074e:	f7ff ffb3 	bl	80006b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <HAL_RTC_MspInit+0x54>)
 8000754:	2201      	movs	r2, #1
 8000756:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40002800 	.word	0x40002800
 8000764:	42470e3c 	.word	0x42470e3c

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <HAL_MspInit+0x4c>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x4c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f95c 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <USART1_IRQHandler+0x10>)
 8000812:	f002 ffc1 	bl	8003798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200001c0 	.word	0x200001c0

08000820 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <DMA2_Stream2_IRQHandler+0x10>)
 8000826:	f000 fbe1 	bl	8000fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000204 	.word	0x20000204

08000834 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <OTG_FS_IRQHandler+0x10>)
 800083a:	f001 f900 	bl	8001a3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000104c 	.word	0x2000104c

08000848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <SystemInit+0x20>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <SystemInit+0x20>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART1_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 80008a4:	f002 ff2b 	bl	80036fe <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f7ff ff03 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001c0 	.word	0x200001c0
 80008bc:	40011000 	.word	0x40011000

080008c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a35      	ldr	r2, [pc, #212]	; (80009b4 <HAL_UART_MspInit+0xf4>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d163      	bne.n	80009aa <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <HAL_UART_MspInit+0xf8>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <HAL_UART_MspInit+0xf8>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <HAL_UART_MspInit+0xf8>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <HAL_UART_MspInit+0xf8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2c      	ldr	r2, [pc, #176]	; (80009b8 <HAL_UART_MspInit+0xf8>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <HAL_UART_MspInit+0xf8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800091a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800092c:	2307      	movs	r3, #7
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4821      	ldr	r0, [pc, #132]	; (80009bc <HAL_UART_MspInit+0xfc>)
 8000938:	f000 fd94 	bl	8001464 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <HAL_UART_MspInit+0x100>)
 800093e:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <HAL_UART_MspInit+0x104>)
 8000940:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <HAL_UART_MspInit+0x100>)
 8000944:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000948:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_UART_MspInit+0x100>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_UART_MspInit+0x100>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <HAL_UART_MspInit+0x100>)
 8000958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800095c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <HAL_UART_MspInit+0x100>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_UART_MspInit+0x100>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_UART_MspInit+0x100>)
 800096c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000970:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_UART_MspInit+0x100>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_UART_MspInit+0x100>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800097e:	4810      	ldr	r0, [pc, #64]	; (80009c0 <HAL_UART_MspInit+0x100>)
 8000980:	f000 f9f4 	bl	8000d6c <HAL_DMA_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800098a:	f7ff fe95 	bl	80006b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <HAL_UART_MspInit+0x100>)
 8000992:	639a      	str	r2, [r3, #56]	; 0x38
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_UART_MspInit+0x100>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2025      	movs	r0, #37	; 0x25
 80009a0:	f000 f9ad 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009a4:	2025      	movs	r0, #37	; 0x25
 80009a6:	f000 f9c6 	bl	8000d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40011000 	.word	0x40011000
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	20000204 	.word	0x20000204
 80009c4:	40026440 	.word	0x40026440

080009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ce:	490e      	ldr	r1, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009f2:	f7ff ff29 	bl	8000848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f6:	f007 faf3 	bl	8007fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fa:	f7ff fde1 	bl	80005c0 <main>
  bx  lr    
 80009fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000a0c:	080080c8 	.word	0x080080c8
  ldr r2, =_sbss
 8000a10:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000a14:	20001674 	.word	0x20001674

08000a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <HAL_Init+0x40>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_Init+0x40>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x40>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f94f 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fe8a 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f967 	bl	8000d52 <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f92f 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000264 	.word	0x20000264

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000264 	.word	0x20000264

08000b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b08:	f7ff ffee 	bl	8000ae8 <HAL_GetTick>
 8000b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b18:	d005      	beq.n	8000b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_Delay+0x44>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4413      	add	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b26:	bf00      	nop
 8000b28:	f7ff ffde 	bl	8000ae8 <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d8f7      	bhi.n	8000b28 <HAL_Delay+0x28>
  {
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <__NVIC_EnableIRQ+0x38>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff29 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff3e 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff31 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffa2 	bl	8000ca4 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff feb6 	bl	8000ae8 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e099      	b.n	8000ebc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0201 	bic.w	r2, r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da8:	e00f      	b.n	8000dca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000daa:	f7ff fe9d 	bl	8000ae8 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b05      	cmp	r3, #5
 8000db6:	d908      	bls.n	8000dca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2220      	movs	r2, #32
 8000dbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e078      	b.n	8000ebc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1e8      	bne.n	8000daa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <HAL_DMA_Init+0x158>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d107      	bne.n	8000e34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f023 0307 	bic.w	r3, r3, #7
 8000e4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d117      	bne.n	8000e8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00e      	beq.n	8000e8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 fa7b 	bl	800136c <DMA_CheckFifoParam>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d008      	beq.n	8000e8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2240      	movs	r2, #64	; 0x40
 8000e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e016      	b.n	8000ebc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 fa32 	bl	8001300 <DMA_CalcBaseAndBitshift>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea4:	223f      	movs	r2, #63	; 0x3f
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	f010803f 	.word	0xf010803f

08000ec8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ed6:	f7ff fe07 	bl	8000ae8 <HAL_GetTick>
 8000eda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d008      	beq.n	8000efa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e052      	b.n	8000fa0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0216 	bic.w	r2, r2, #22
 8000f08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d103      	bne.n	8000f2a <HAL_DMA_Abort+0x62>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d007      	beq.n	8000f3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0208 	bic.w	r2, r2, #8
 8000f38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0201 	bic.w	r2, r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4a:	e013      	b.n	8000f74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4c:	f7ff fdcc 	bl	8000ae8 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	d90c      	bls.n	8000f74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2203      	movs	r2, #3
 8000f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e015      	b.n	8000fa0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1e4      	bne.n	8000f4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f86:	223f      	movs	r2, #63	; 0x3f
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d004      	beq.n	8000fc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00c      	b.n	8000fe0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2205      	movs	r2, #5
 8000fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0201 	bic.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ff8:	4b8e      	ldr	r3, [pc, #568]	; (8001234 <HAL_DMA_IRQHandler+0x248>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a8e      	ldr	r2, [pc, #568]	; (8001238 <HAL_DMA_IRQHandler+0x24c>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0a9b      	lsrs	r3, r3, #10
 8001004:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001016:	2208      	movs	r2, #8
 8001018:	409a      	lsls	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4013      	ands	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d01a      	beq.n	8001058 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0204 	bic.w	r2, r2, #4
 800103e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001044:	2208      	movs	r2, #8
 8001046:	409a      	lsls	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001050:	f043 0201 	orr.w	r2, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105c:	2201      	movs	r2, #1
 800105e:	409a      	lsls	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d012      	beq.n	800108e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107a:	2201      	movs	r2, #1
 800107c:	409a      	lsls	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001092:	2204      	movs	r2, #4
 8001094:	409a      	lsls	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d012      	beq.n	80010c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00b      	beq.n	80010c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	2204      	movs	r2, #4
 80010b2:	409a      	lsls	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010bc:	f043 0204 	orr.w	r2, r3, #4
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c8:	2210      	movs	r2, #16
 80010ca:	409a      	lsls	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d043      	beq.n	800115c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d03c      	beq.n	800115c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e6:	2210      	movs	r2, #16
 80010e8:	409a      	lsls	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d018      	beq.n	800112e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d108      	bne.n	800111c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	2b00      	cmp	r3, #0
 8001110:	d024      	beq.n	800115c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	4798      	blx	r3
 800111a:	e01f      	b.n	800115c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001120:	2b00      	cmp	r3, #0
 8001122:	d01b      	beq.n	800115c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	4798      	blx	r3
 800112c:	e016      	b.n	800115c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d107      	bne.n	800114c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0208 	bic.w	r2, r2, #8
 800114a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001160:	2220      	movs	r2, #32
 8001162:	409a      	lsls	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 808f 	beq.w	800128c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 8087 	beq.w	800128c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001182:	2220      	movs	r2, #32
 8001184:	409a      	lsls	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b05      	cmp	r3, #5
 8001194:	d136      	bne.n	8001204 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0216 	bic.w	r2, r2, #22
 80011a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d103      	bne.n	80011c6 <HAL_DMA_IRQHandler+0x1da>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0208 	bic.w	r2, r2, #8
 80011d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	223f      	movs	r2, #63	; 0x3f
 80011dc:	409a      	lsls	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d07e      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	4798      	blx	r3
        }
        return;
 8001202:	e079      	b.n	80012f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d01d      	beq.n	800124e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10d      	bne.n	800123c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	2b00      	cmp	r3, #0
 8001226:	d031      	beq.n	800128c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	4798      	blx	r3
 8001230:	e02c      	b.n	800128c <HAL_DMA_IRQHandler+0x2a0>
 8001232:	bf00      	nop
 8001234:	20000000 	.word	0x20000000
 8001238:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001240:	2b00      	cmp	r3, #0
 8001242:	d023      	beq.n	800128c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	4798      	blx	r3
 800124c:	e01e      	b.n	800128c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10f      	bne.n	800127c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0210 	bic.w	r2, r2, #16
 800126a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001290:	2b00      	cmp	r3, #0
 8001292:	d032      	beq.n	80012fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d022      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2205      	movs	r2, #5
 80012a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d307      	bcc.n	80012d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f2      	bne.n	80012b8 <HAL_DMA_IRQHandler+0x2cc>
 80012d2:	e000      	b.n	80012d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80012d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	4798      	blx	r3
 80012f6:	e000      	b.n	80012fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80012f8:	bf00      	nop
    }
  }
}
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3b10      	subs	r3, #16
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <DMA_CalcBaseAndBitshift+0x64>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800131a:	4a13      	ldr	r2, [pc, #76]	; (8001368 <DMA_CalcBaseAndBitshift+0x68>)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d909      	bls.n	8001342 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001336:	f023 0303 	bic.w	r3, r3, #3
 800133a:	1d1a      	adds	r2, r3, #4
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	659a      	str	r2, [r3, #88]	; 0x58
 8001340:	e007      	b.n	8001352 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800134a:	f023 0303 	bic.w	r3, r3, #3
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	aaaaaaab 	.word	0xaaaaaaab
 8001368:	080080b0 	.word	0x080080b0

0800136c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d11f      	bne.n	80013c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d856      	bhi.n	800143a <DMA_CheckFifoParam+0xce>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <DMA_CheckFifoParam+0x28>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013a5 	.word	0x080013a5
 8001398:	080013b7 	.word	0x080013b7
 800139c:	080013a5 	.word	0x080013a5
 80013a0:	0800143b 	.word	0x0800143b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d046      	beq.n	800143e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013b4:	e043      	b.n	800143e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013be:	d140      	bne.n	8001442 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013c4:	e03d      	b.n	8001442 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ce:	d121      	bne.n	8001414 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d837      	bhi.n	8001446 <DMA_CheckFifoParam+0xda>
 80013d6:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <DMA_CheckFifoParam+0x70>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	080013ed 	.word	0x080013ed
 80013e0:	080013f3 	.word	0x080013f3
 80013e4:	080013ed 	.word	0x080013ed
 80013e8:	08001405 	.word	0x08001405
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
      break;
 80013f0:	e030      	b.n	8001454 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d025      	beq.n	800144a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001402:	e022      	b.n	800144a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800140c:	d11f      	bne.n	800144e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001412:	e01c      	b.n	800144e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d903      	bls.n	8001422 <DMA_CheckFifoParam+0xb6>
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d003      	beq.n	8001428 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001420:	e018      	b.n	8001454 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
      break;
 8001426:	e015      	b.n	8001454 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00e      	beq.n	8001452 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
      break;
 8001438:	e00b      	b.n	8001452 <DMA_CheckFifoParam+0xe6>
      break;
 800143a:	bf00      	nop
 800143c:	e00a      	b.n	8001454 <DMA_CheckFifoParam+0xe8>
      break;
 800143e:	bf00      	nop
 8001440:	e008      	b.n	8001454 <DMA_CheckFifoParam+0xe8>
      break;
 8001442:	bf00      	nop
 8001444:	e006      	b.n	8001454 <DMA_CheckFifoParam+0xe8>
      break;
 8001446:	bf00      	nop
 8001448:	e004      	b.n	8001454 <DMA_CheckFifoParam+0xe8>
      break;
 800144a:	bf00      	nop
 800144c:	e002      	b.n	8001454 <DMA_CheckFifoParam+0xe8>
      break;   
 800144e:	bf00      	nop
 8001450:	e000      	b.n	8001454 <DMA_CheckFifoParam+0xe8>
      break;
 8001452:	bf00      	nop
    }
  } 
  
  return status; 
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	e159      	b.n	8001734 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001480:	2201      	movs	r2, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	429a      	cmp	r2, r3
 800149a:	f040 8148 	bne.w	800172e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d005      	beq.n	80014b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d130      	bne.n	8001518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f003 0201 	and.w	r2, r3, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b03      	cmp	r3, #3
 8001522:	d017      	beq.n	8001554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	2203      	movs	r2, #3
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d123      	bne.n	80015a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	220f      	movs	r2, #15
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3208      	adds	r2, #8
 80015a2:	69b9      	ldr	r1, [r7, #24]
 80015a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0203 	and.w	r2, r3, #3
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a2 	beq.w	800172e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b57      	ldr	r3, [pc, #348]	; (800174c <HAL_GPIO_Init+0x2e8>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a56      	ldr	r2, [pc, #344]	; (800174c <HAL_GPIO_Init+0x2e8>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b54      	ldr	r3, [pc, #336]	; (800174c <HAL_GPIO_Init+0x2e8>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001606:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_GPIO_Init+0x2ec>)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a49      	ldr	r2, [pc, #292]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x202>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a48      	ldr	r2, [pc, #288]	; (8001758 <HAL_GPIO_Init+0x2f4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x1fe>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a47      	ldr	r2, [pc, #284]	; (800175c <HAL_GPIO_Init+0x2f8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x1fa>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a46      	ldr	r2, [pc, #280]	; (8001760 <HAL_GPIO_Init+0x2fc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x1f6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a45      	ldr	r2, [pc, #276]	; (8001764 <HAL_GPIO_Init+0x300>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x1f2>
 8001652:	2304      	movs	r3, #4
 8001654:	e008      	b.n	8001668 <HAL_GPIO_Init+0x204>
 8001656:	2307      	movs	r3, #7
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x204>
 800165a:	2303      	movs	r3, #3
 800165c:	e004      	b.n	8001668 <HAL_GPIO_Init+0x204>
 800165e:	2302      	movs	r3, #2
 8001660:	e002      	b.n	8001668 <HAL_GPIO_Init+0x204>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_GPIO_Init+0x204>
 8001666:	2300      	movs	r3, #0
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	f002 0203 	and.w	r2, r2, #3
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	4093      	lsls	r3, r2
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001678:	4935      	ldr	r1, [pc, #212]	; (8001750 <HAL_GPIO_Init+0x2ec>)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <HAL_GPIO_Init+0x304>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016aa:	4a2f      	ldr	r2, [pc, #188]	; (8001768 <HAL_GPIO_Init+0x304>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_GPIO_Init+0x304>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d4:	4a24      	ldr	r2, [pc, #144]	; (8001768 <HAL_GPIO_Init+0x304>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <HAL_GPIO_Init+0x304>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fe:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_GPIO_Init+0x304>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_GPIO_Init+0x304>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <HAL_GPIO_Init+0x304>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3301      	adds	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	f67f aea2 	bls.w	8001480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40013800 	.word	0x40013800
 8001754:	40020000 	.word	0x40020000
 8001758:	40020400 	.word	0x40020400
 800175c:	40020800 	.word	0x40020800
 8001760:	40020c00 	.word	0x40020c00
 8001764:	40021000 	.word	0x40021000
 8001768:	40013c00 	.word	0x40013c00

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800179e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a0:	b08f      	sub	sp, #60	; 0x3c
 80017a2:	af0a      	add	r7, sp, #40	; 0x28
 80017a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e10f      	b.n	80019d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f006 f8fe 	bl	80079cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2203      	movs	r2, #3
 80017d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 ffad 	bl	800474e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	687e      	ldr	r6, [r7, #4]
 80017fc:	466d      	mov	r5, sp
 80017fe:	f106 0410 	add.w	r4, r6, #16
 8001802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800180e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001812:	1d33      	adds	r3, r6, #4
 8001814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001816:	6838      	ldr	r0, [r7, #0]
 8001818:	f002 fe84 	bl	8004524 <USB_CoreInit>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2202      	movs	r2, #2
 8001826:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0d0      	b.n	80019d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f002 ff9b 	bl	8004770 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e04a      	b.n	80018d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	333d      	adds	r3, #61	; 0x3d
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	333c      	adds	r3, #60	; 0x3c
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	b298      	uxth	r0, r3
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3342      	adds	r3, #66	; 0x42
 800187c:	4602      	mov	r2, r0
 800187e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	333f      	adds	r3, #63	; 0x3f
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	3344      	adds	r3, #68	; 0x44
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	3348      	adds	r3, #72	; 0x48
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3350      	adds	r3, #80	; 0x50
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	3301      	adds	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3af      	bcc.n	8001840 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e044      	b.n	8001970 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	3301      	adds	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	d3b5      	bcc.n	80018e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	687e      	ldr	r6, [r7, #4]
 8001982:	466d      	mov	r5, sp
 8001984:	f106 0410 	add.w	r4, r6, #16
 8001988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001990:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001994:	e885 0003 	stmia.w	r5, {r0, r1}
 8001998:	1d33      	adds	r3, r6, #4
 800199a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800199c:	6838      	ldr	r0, [r7, #0]
 800199e:	f002 ff33 	bl	8004808 <USB_DevInit>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e00d      	b.n	80019d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 ffaf 	bl	800592c <USB_DevDisconnect>

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_PCD_Start+0x1c>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e020      	b.n	8001a36 <HAL_PCD_Start+0x5e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d109      	bne.n	8001a18 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d005      	beq.n	8001a18 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fe85 	bl	800472c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 ff5f 	bl	80058ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a3e:	b590      	push	{r4, r7, lr}
 8001a40:	b08d      	sub	sp, #52	; 0x34
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f004 f81d 	bl	8005a94 <USB_GetMode>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 839d 	bne.w	800219c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 ff81 	bl	800596e <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8393 	beq.w	800219a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 ff78 	bl	800596e <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d107      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f002 0202 	and.w	r2, r2, #2
 8001a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 ff66 	bl	800596e <USB_ReadInterrupts>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	d161      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699a      	ldr	r2, [r3, #24]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0210 	bic.w	r2, r2, #16
 8001aba:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	f003 020f 	and.w	r2, r3, #15
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3304      	adds	r3, #4
 8001ada:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	0c5b      	lsrs	r3, r3, #17
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d124      	bne.n	8001b32 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d035      	beq.n	8001b60 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	6a38      	ldr	r0, [r7, #32]
 8001b08:	f003 fd9d 	bl	8005646 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b18:	441a      	add	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b2a:	441a      	add	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	619a      	str	r2, [r3, #24]
 8001b30:	e016      	b.n	8001b60 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	0c5b      	lsrs	r3, r3, #17
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d110      	bne.n	8001b60 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b44:	2208      	movs	r2, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	6a38      	ldr	r0, [r7, #32]
 8001b4a:	f003 fd7c 	bl	8005646 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b5a:	441a      	add	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0210 	orr.w	r2, r2, #16
 8001b6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fefa 	bl	800596e <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b84:	d16e      	bne.n	8001c64 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 ff00 	bl	8005994 <USB_ReadDevAllOutEpInterrupt>
 8001b94:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b96:	e062      	b.n	8001c5e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d057      	beq.n	8001c52 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 ff25 	bl	80059fc <USB_ReadDevOutEPInterrupt>
 8001bb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00c      	beq.n	8001bd8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	015a      	lsls	r2, r3, #5
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2301      	movs	r3, #1
 8001bce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fdb0 	bl	8002738 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00c      	beq.n	8001bfc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 feaa 	bl	8002950 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c12:	461a      	mov	r2, r3
 8001c14:	2310      	movs	r3, #16
 8001c16:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d008      	beq.n	8001c34 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2320      	movs	r3, #32
 8001c32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	015a      	lsls	r2, r3, #5
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c50:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	3301      	adds	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d199      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fe80 	bl	800596e <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c78:	f040 80c0 	bne.w	8001dfc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fea1 	bl	80059c8 <USB_ReadDevAllInEpInterrupt>
 8001c86:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c8c:	e0b2      	b.n	8001df4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a7 	beq.w	8001de8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 fec7 	bl	8005a38 <USB_ReadDevInEPInterrupt>
 8001caa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d057      	beq.n	8001d66 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69f9      	ldr	r1, [r7, #28]
 8001cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2301      	movs	r3, #1
 8001cea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d132      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	3348      	adds	r3, #72	; 0x48
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4403      	add	r3, r0
 8001d14:	3344      	adds	r3, #68	; 0x44
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4419      	add	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4403      	add	r3, r0
 8001d28:	3348      	adds	r3, #72	; 0x48
 8001d2a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d113      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x31c>
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3350      	adds	r3, #80	; 0x50
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d108      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d52:	461a      	mov	r2, r3
 8001d54:	2101      	movs	r1, #1
 8001d56:	f003 fecf 	bl	8005af8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f005 feb4 	bl	8007ace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2308      	movs	r3, #8
 8001d80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db4:	461a      	mov	r2, r3
 8001db6:	2340      	movs	r3, #64	; 0x40
 8001db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fc1b 	bl	800261e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	3301      	adds	r3, #1
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f47f af49 	bne.w	8001c8e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 fdb4 	bl	800596e <USB_ReadInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e10:	d122      	bne.n	8001e58 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fe26 	bl	8002a8c <HAL_PCDEx_LPM_Callback>
 8001e40:	e002      	b.n	8001e48 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f005 feb0 	bl	8007ba8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fd86 	bl	800596e <USB_ReadInterrupts>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e6c:	d112      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d102      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f005 fe6c 	bl	8007b5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e92:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 fd68 	bl	800596e <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea8:	f040 80c7 	bne.w	800203a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fe02 	bl	8004ad0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed0:	e056      	b.n	8001f80 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ee4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef6:	0151      	lsls	r1, r2, #5
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	440a      	add	r2, r1
 8001efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f04:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f16:	0151      	lsls	r1, r2, #5
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	440a      	add	r2, r1
 8001f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f32:	461a      	mov	r2, r3
 8001f34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f38:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f4a:	0151      	lsls	r1, r2, #5
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	440a      	add	r2, r1
 8001f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6a:	0151      	lsls	r1, r2, #5
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	440a      	add	r2, r1
 8001f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f78:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3a3      	bcc.n	8001ed2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f98:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f9c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d016      	beq.n	8001fd4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb6:	f043 030b 	orr.w	r3, r3, #11
 8001fba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fcc:	f043 030b 	orr.w	r3, r3, #11
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	e015      	b.n	8002000 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fe6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001fea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ffa:	f043 030b 	orr.w	r3, r3, #11
 8001ffe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002012:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002024:	461a      	mov	r2, r3
 8002026:	f003 fd67 	bl	8005af8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fc95 	bl	800596e <USB_ReadInterrupts>
 8002044:	4603      	mov	r3, r0
 8002046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800204a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800204e:	d124      	bne.n	800209a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fd2b 	bl	8005ab0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f002 fd93 	bl	8004b8a <USB_GetDevSpeed>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681c      	ldr	r4, [r3, #0]
 8002070:	f001 f93c 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8002074:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	4620      	mov	r0, r4
 8002080:	f002 fab2 	bl	80045e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f005 fd4a 	bl	8007b1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002098:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fc65 	bl	800596e <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d10a      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f005 fd27 	bl	8007b02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f002 0208 	and.w	r2, r2, #8
 80020c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 fc50 	bl	800596e <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020d8:	d10f      	bne.n	80020fa <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f005 fd7f 	bl	8007be8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80020f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 fc35 	bl	800596e <USB_ReadInterrupts>
 8002104:	4603      	mov	r3, r0
 8002106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800210e:	d10f      	bne.n	8002130 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	b2db      	uxtb	r3, r3
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f005 fd52 	bl	8007bc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800212e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f003 fc1a 	bl	800596e <USB_ReadInterrupts>
 800213a:	4603      	mov	r3, r0
 800213c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002144:	d10a      	bne.n	800215c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f005 fd60 	bl	8007c0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800215a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f003 fc04 	bl	800596e <USB_ReadInterrupts>
 8002166:	4603      	mov	r3, r0
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b04      	cmp	r3, #4
 800216e:	d115      	bne.n	800219c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f005 fd50 	bl	8007c28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	e000      	b.n	800219c <HAL_PCD_IRQHandler+0x75e>
      return;
 800219a:	bf00      	nop
    }
  }
}
 800219c:	3734      	adds	r7, #52	; 0x34
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}

080021a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_PCD_SetAddress+0x1a>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e013      	b.n	80021e4 <HAL_PCD_SetAddress+0x42>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fb62 	bl	800589e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	70fb      	strb	r3, [r7, #3]
 80021fe:	460b      	mov	r3, r1
 8002200:	803b      	strh	r3, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800220a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220e:	2b00      	cmp	r3, #0
 8002210:	da0f      	bge.n	8002232 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	f003 020f 	and.w	r2, r3, #15
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	3338      	adds	r3, #56	; 0x38
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	3304      	adds	r3, #4
 8002228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	705a      	strb	r2, [r3, #1]
 8002230:	e00f      	b.n	8002252 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 020f 	and.w	r2, r3, #15
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	3304      	adds	r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	b2da      	uxtb	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800225e:	883a      	ldrh	r2, [r7, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	78ba      	ldrb	r2, [r7, #2]
 8002268:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	785b      	ldrb	r3, [r3, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800227c:	78bb      	ldrb	r3, [r7, #2]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d102      	bne.n	8002288 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_PCD_EP_Open+0xaa>
 8002292:	2302      	movs	r3, #2
 8002294:	e00e      	b.n	80022b4 <HAL_PCD_EP_Open+0xc8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68f9      	ldr	r1, [r7, #12]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fc95 	bl	8004bd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022b2:	7afb      	ldrb	r3, [r7, #11]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da0f      	bge.n	80022f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f003 020f 	and.w	r2, r3, #15
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	3338      	adds	r3, #56	; 0x38
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	705a      	strb	r2, [r3, #1]
 80022ee:	e00f      	b.n	8002310 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 020f 	and.w	r2, r3, #15
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	3304      	adds	r3, #4
 8002308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	b2da      	uxtb	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_PCD_EP_Close+0x6e>
 8002326:	2302      	movs	r3, #2
 8002328:	e00e      	b.n	8002348 <HAL_PCD_EP_Close+0x8c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	4618      	mov	r0, r3
 800233a:	f002 fcd3 	bl	8004ce4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	460b      	mov	r3, r1
 800235e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002360:	7afb      	ldrb	r3, [r7, #11]
 8002362:	f003 020f 	and.w	r2, r3, #15
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	3304      	adds	r3, #4
 8002378:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2200      	movs	r2, #0
 8002390:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	b2da      	uxtb	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d102      	bne.n	80023ac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023ac:	7afb      	ldrb	r3, [r7, #11]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	6979      	ldr	r1, [r7, #20]
 80023c4:	f002 ffae 	bl	8005324 <USB_EP0StartXfer>
 80023c8:	e008      	b.n	80023dc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	6979      	ldr	r1, [r7, #20]
 80023d8:	f002 fd60 	bl	8004e9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002408:	681b      	ldr	r3, [r3, #0]
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	460b      	mov	r3, r1
 8002424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	3338      	adds	r3, #56	; 0x38
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	3304      	adds	r3, #4
 800243c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2201      	movs	r2, #1
 8002454:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002456:	7afb      	ldrb	r3, [r7, #11]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	b2da      	uxtb	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002470:	7afb      	ldrb	r3, [r7, #11]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	6979      	ldr	r1, [r7, #20]
 8002488:	f002 ff4c 	bl	8005324 <USB_EP0StartXfer>
 800248c:	e008      	b.n	80024a0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	6979      	ldr	r1, [r7, #20]
 800249c:	f002 fcfe 	bl	8004e9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	f003 020f 	and.w	r2, r3, #15
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d901      	bls.n	80024c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e050      	b.n	800256a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	da0f      	bge.n	80024f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	f003 020f 	and.w	r2, r3, #15
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	3338      	adds	r3, #56	; 0x38
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	3304      	adds	r3, #4
 80024e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	705a      	strb	r2, [r3, #1]
 80024ee:	e00d      	b.n	800250c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	3304      	adds	r3, #4
 8002504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	b2da      	uxtb	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_PCD_EP_SetStall+0x82>
 8002528:	2302      	movs	r3, #2
 800252a:	e01e      	b.n	800256a <HAL_PCD_EP_SetStall+0xc0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 f8db 	bl	80056f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	b2d9      	uxtb	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800255a:	461a      	mov	r2, r3
 800255c:	f003 facc 	bl	8005af8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	d901      	bls.n	8002590 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e042      	b.n	8002616 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002594:	2b00      	cmp	r3, #0
 8002596:	da0f      	bge.n	80025b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 020f 	and.w	r2, r3, #15
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	3338      	adds	r3, #56	; 0x38
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	705a      	strb	r2, [r3, #1]
 80025b6:	e00f      	b.n	80025d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	f003 020f 	and.w	r2, r3, #15
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	3304      	adds	r3, #4
 80025d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_PCD_EP_ClrStall+0x86>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e00e      	b.n	8002616 <HAL_PCD_EP_ClrStall+0xa4>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68f9      	ldr	r1, [r7, #12]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 f8e3 	bl	80057d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b08a      	sub	sp, #40	; 0x28
 8002622:	af02      	add	r7, sp, #8
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	3338      	adds	r3, #56	; 0x38
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	3304      	adds	r3, #4
 8002644:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	429a      	cmp	r2, r3
 8002650:	d901      	bls.n	8002656 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e06c      	b.n	8002730 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	429a      	cmp	r2, r3
 800266a:	d902      	bls.n	8002672 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3303      	adds	r3, #3
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800267a:	e02b      	b.n	80026d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	429a      	cmp	r2, r3
 8002690:	d902      	bls.n	8002698 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	3303      	adds	r3, #3
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	68d9      	ldr	r1, [r3, #12]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4603      	mov	r3, r0
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f002 ff87 	bl	80055ca <USB_WritePacket>

    ep->xfer_buff  += len;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	441a      	add	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	441a      	add	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d809      	bhi.n	80026fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d203      	bcs.n	80026fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1be      	bne.n	800267c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	429a      	cmp	r2, r3
 8002708:	d811      	bhi.n	800272e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	2201      	movs	r2, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	43db      	mvns	r3, r3
 8002724:	6939      	ldr	r1, [r7, #16]
 8002726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800272a:	4013      	ands	r3, r2
 800272c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	333c      	adds	r3, #60	; 0x3c
 8002750:	3304      	adds	r3, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b01      	cmp	r3, #1
 800276c:	f040 80a0 	bne.w	80028b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d015      	beq.n	80027a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4a72      	ldr	r2, [pc, #456]	; (8002948 <PCD_EP_OutXfrComplete_int+0x210>)
 800277e:	4293      	cmp	r3, r2
 8002780:	f240 80dd 	bls.w	800293e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80d7 	beq.w	800293e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279c:	461a      	mov	r2, r3
 800279e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a2:	6093      	str	r3, [r2, #8]
 80027a4:	e0cb      	b.n	800293e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027bc:	461a      	mov	r2, r3
 80027be:	2320      	movs	r3, #32
 80027c0:	6093      	str	r3, [r2, #8]
 80027c2:	e0bc      	b.n	800293e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 80b7 	bne.w	800293e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a5d      	ldr	r2, [pc, #372]	; (8002948 <PCD_EP_OutXfrComplete_int+0x210>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d90f      	bls.n	80027f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ee:	461a      	mov	r2, r3
 80027f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f4:	6093      	str	r3, [r2, #8]
 80027f6:	e0a2      	b.n	800293e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800280a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	0159      	lsls	r1, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	440b      	add	r3, r1
 8002814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800281e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4403      	add	r3, r0
 800282e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002832:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002846:	6819      	ldr	r1, [r3, #0]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4403      	add	r3, r0
 8002856:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4419      	add	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4403      	add	r3, r0
 800286c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002870:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d114      	bne.n	80028a2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d108      	bne.n	80028a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800289a:	461a      	mov	r2, r3
 800289c:	2101      	movs	r1, #1
 800289e:	f003 f92b 	bl	8005af8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f005 f8f5 	bl	8007a98 <HAL_PCD_DataOutStageCallback>
 80028ae:	e046      	b.n	800293e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a26      	ldr	r2, [pc, #152]	; (800294c <PCD_EP_OutXfrComplete_int+0x214>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d124      	bne.n	8002902 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ce:	461a      	mov	r2, r3
 80028d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d4:	6093      	str	r3, [r2, #8]
 80028d6:	e032      	b.n	800293e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ee:	461a      	mov	r2, r3
 80028f0:	2320      	movs	r3, #32
 80028f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f005 f8cc 	bl	8007a98 <HAL_PCD_DataOutStageCallback>
 8002900:	e01d      	b.n	800293e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d114      	bne.n	8002932 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d108      	bne.n	8002932 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800292a:	461a      	mov	r2, r3
 800292c:	2100      	movs	r1, #0
 800292e:	f003 f8e3 	bl	8005af8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f005 f8ad 	bl	8007a98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	4f54300a 	.word	0x4f54300a
 800294c:	4f54310a 	.word	0x4f54310a

08002950 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	333c      	adds	r3, #60	; 0x3c
 8002968:	3304      	adds	r3, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d90e      	bls.n	80029a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299c:	461a      	mov	r2, r3
 800299e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f005 f865 	bl	8007a74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d90c      	bls.n	80029cc <PCD_EP_OutSetupPacket_int+0x7c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d108      	bne.n	80029cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029c4:	461a      	mov	r2, r3
 80029c6:	2101      	movs	r1, #1
 80029c8:	f003 f896 	bl	8005af8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	4f54300a 	.word	0x4f54300a

080029dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
 80029e8:	4613      	mov	r3, r2
 80029ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d107      	bne.n	8002a0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029fa:	883b      	ldrh	r3, [r7, #0]
 80029fc:	0419      	lsls	r1, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
 8002a08:	e028      	b.n	8002a5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4413      	add	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e00d      	b.n	8002a3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	3340      	adds	r3, #64	; 0x40
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	4413      	add	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	3301      	adds	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3ec      	bcc.n	8002a1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a44:	883b      	ldrh	r3, [r7, #0]
 8002a46:	0418      	lsls	r0, r3, #16
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	4302      	orrs	r2, r0
 8002a54:	3340      	adds	r3, #64	; 0x40
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e267      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d075      	beq.n	8002bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ac2:	4b88      	ldr	r3, [pc, #544]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d00c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ace:	4b85      	ldr	r3, [pc, #532]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d112      	bne.n	8002b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ada:	4b82      	ldr	r3, [pc, #520]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae6:	d10b      	bne.n	8002b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae8:	4b7e      	ldr	r3, [pc, #504]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d05b      	beq.n	8002bac <HAL_RCC_OscConfig+0x108>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d157      	bne.n	8002bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e242      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d106      	bne.n	8002b18 <HAL_RCC_OscConfig+0x74>
 8002b0a:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a75      	ldr	r2, [pc, #468]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e01d      	b.n	8002b54 <HAL_RCC_OscConfig+0xb0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x98>
 8002b22:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a6f      	ldr	r2, [pc, #444]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a6c      	ldr	r2, [pc, #432]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCC_OscConfig+0xb0>
 8002b3c:	4b69      	ldr	r3, [pc, #420]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a68      	ldr	r2, [pc, #416]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b66      	ldr	r3, [pc, #408]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a65      	ldr	r2, [pc, #404]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fd ffc4 	bl	8000ae8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fd ffc0 	bl	8000ae8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e207      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b5b      	ldr	r3, [pc, #364]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0xc0>
 8002b82:	e014      	b.n	8002bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fd ffb0 	bl	8000ae8 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fd ffac 	bl	8000ae8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e1f3      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	4b51      	ldr	r3, [pc, #324]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0xe8>
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d063      	beq.n	8002c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bba:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc6:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d11c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd2:	4b44      	ldr	r3, [pc, #272]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d116      	bne.n	8002c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bde:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x152>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e1c7      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4937      	ldr	r1, [pc, #220]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0a:	e03a      	b.n	8002c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c14:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_RCC_OscConfig+0x244>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fd ff65 	bl	8000ae8 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c22:	f7fd ff61 	bl	8000ae8 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e1a8      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c34:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c40:	4b28      	ldr	r3, [pc, #160]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4925      	ldr	r1, [pc, #148]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	600b      	str	r3, [r1, #0]
 8002c54:	e015      	b.n	8002c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCC_OscConfig+0x244>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fd ff44 	bl	8000ae8 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c64:	f7fd ff40 	bl	8000ae8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e187      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d036      	beq.n	8002cfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d016      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_RCC_OscConfig+0x248>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fd ff24 	bl	8000ae8 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca4:	f7fd ff20 	bl	8000ae8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e167      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x200>
 8002cc2:	e01b      	b.n	8002cfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_OscConfig+0x248>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cca:	f7fd ff0d 	bl	8000ae8 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	e00e      	b.n	8002cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7fd ff09 	bl	8000ae8 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d907      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e150      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	42470000 	.word	0x42470000
 8002cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf0:	4b88      	ldr	r3, [pc, #544]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ea      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8097 	beq.w	8002e38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0e:	4b81      	ldr	r3, [pc, #516]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	4b7d      	ldr	r3, [pc, #500]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a7c      	ldr	r2, [pc, #496]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b7a      	ldr	r3, [pc, #488]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3a:	4b77      	ldr	r3, [pc, #476]	; (8002f18 <HAL_RCC_OscConfig+0x474>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d118      	bne.n	8002d78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d46:	4b74      	ldr	r3, [pc, #464]	; (8002f18 <HAL_RCC_OscConfig+0x474>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a73      	ldr	r2, [pc, #460]	; (8002f18 <HAL_RCC_OscConfig+0x474>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d52:	f7fd fec9 	bl	8000ae8 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5a:	f7fd fec5 	bl	8000ae8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e10c      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6c:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCC_OscConfig+0x474>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCC_OscConfig+0x2ea>
 8002d80:	4b64      	ldr	r3, [pc, #400]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	4a63      	ldr	r2, [pc, #396]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8c:	e01c      	b.n	8002dc8 <HAL_RCC_OscConfig+0x324>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x30c>
 8002d96:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	4a5e      	ldr	r2, [pc, #376]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70
 8002da2:	4b5c      	ldr	r3, [pc, #368]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	4a5b      	ldr	r2, [pc, #364]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6713      	str	r3, [r2, #112]	; 0x70
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCC_OscConfig+0x324>
 8002db0:	4b58      	ldr	r3, [pc, #352]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	4a57      	ldr	r2, [pc, #348]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbc:	4b55      	ldr	r3, [pc, #340]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	4a54      	ldr	r2, [pc, #336]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	f023 0304 	bic.w	r3, r3, #4
 8002dc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d015      	beq.n	8002dfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fd fe8a 	bl	8000ae8 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fd fe86 	bl	8000ae8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0cb      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dee:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0ee      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x334>
 8002dfa:	e014      	b.n	8002e26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7fd fe74 	bl	8000ae8 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7fd fe70 	bl	8000ae8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e0b5      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ee      	bne.n	8002e04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2c:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	4a38      	ldr	r2, [pc, #224]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80a1 	beq.w	8002f84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e42:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d05c      	beq.n	8002f08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d141      	bne.n	8002eda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e56:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_RCC_OscConfig+0x478>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fd fe44 	bl	8000ae8 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fd fe40 	bl	8000ae8 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e087      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69da      	ldr	r2, [r3, #28]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	019b      	lsls	r3, r3, #6
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	061b      	lsls	r3, r3, #24
 8002ea6:	491b      	ldr	r1, [pc, #108]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eac:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x478>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fd fe19 	bl	8000ae8 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fd fe15 	bl	8000ae8 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e05c      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ecc:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x416>
 8002ed8:	e054      	b.n	8002f84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_RCC_OscConfig+0x478>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fd fe02 	bl	8000ae8 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fd fdfe 	bl	8000ae8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e045      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_OscConfig+0x470>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x444>
 8002f06:	e03d      	b.n	8002f84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e038      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <HAL_RCC_OscConfig+0x4ec>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d028      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d121      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d11a      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f50:	4013      	ands	r3, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d111      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800

08002f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0cc      	b.n	8003142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b68      	ldr	r3, [pc, #416]	; (800314c <HAL_RCC_ClockConfig+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d90c      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b65      	ldr	r3, [pc, #404]	; (800314c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b63      	ldr	r3, [pc, #396]	; (800314c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0b8      	b.n	8003142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe8:	4b59      	ldr	r3, [pc, #356]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	4a58      	ldr	r2, [pc, #352]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003000:	4b53      	ldr	r3, [pc, #332]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800300a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300c:	4b50      	ldr	r3, [pc, #320]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	494d      	ldr	r1, [pc, #308]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d044      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	4b47      	ldr	r3, [pc, #284]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d119      	bne.n	8003072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e07f      	b.n	8003142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d003      	beq.n	8003052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304e:	2b03      	cmp	r3, #3
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e06f      	b.n	8003142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003062:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e067      	b.n	8003142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003072:	4b37      	ldr	r3, [pc, #220]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f023 0203 	bic.w	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4934      	ldr	r1, [pc, #208]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	4313      	orrs	r3, r2
 8003082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003084:	f7fd fd30 	bl	8000ae8 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308c:	f7fd fd2c 	bl	8000ae8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e04f      	b.n	8003142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 020c 	and.w	r2, r3, #12
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d1eb      	bne.n	800308c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b4:	4b25      	ldr	r3, [pc, #148]	; (800314c <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d20c      	bcs.n	80030dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b22      	ldr	r3, [pc, #136]	; (800314c <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b20      	ldr	r3, [pc, #128]	; (800314c <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e032      	b.n	8003142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e8:	4b19      	ldr	r3, [pc, #100]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4916      	ldr	r1, [pc, #88]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003106:	4b12      	ldr	r3, [pc, #72]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	490e      	ldr	r1, [pc, #56]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800311a:	f000 f821 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 800311e:	4602      	mov	r2, r0
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	490a      	ldr	r1, [pc, #40]	; (8003154 <HAL_RCC_ClockConfig+0x1c0>)
 800312c:	5ccb      	ldrb	r3, [r1, r3]
 800312e:	fa22 f303 	lsr.w	r3, r2, r3
 8003132:	4a09      	ldr	r2, [pc, #36]	; (8003158 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCC_ClockConfig+0x1c8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fc90 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023c00 	.word	0x40023c00
 8003150:	40023800 	.word	0x40023800
 8003154:	08008098 	.word	0x08008098
 8003158:	20000000 	.word	0x20000000
 800315c:	20000004 	.word	0x20000004

08003160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003164:	b090      	sub	sp, #64	; 0x40
 8003166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
 800316c:	2300      	movs	r3, #0
 800316e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003170:	2300      	movs	r3, #0
 8003172:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003178:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 030c 	and.w	r3, r3, #12
 8003180:	2b08      	cmp	r3, #8
 8003182:	d00d      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003184:	2b08      	cmp	r3, #8
 8003186:	f200 80a1 	bhi.w	80032cc <HAL_RCC_GetSysClockFreq+0x16c>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x34>
 800318e:	2b04      	cmp	r3, #4
 8003190:	d003      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x3a>
 8003192:	e09b      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003198:	e09b      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800319a:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800319e:	e098      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a0:	4b4f      	ldr	r3, [pc, #316]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031aa:	4b4d      	ldr	r3, [pc, #308]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d028      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b6:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	099b      	lsrs	r3, r3, #6
 80031bc:	2200      	movs	r2, #0
 80031be:	623b      	str	r3, [r7, #32]
 80031c0:	627a      	str	r2, [r7, #36]	; 0x24
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031c8:	2100      	movs	r1, #0
 80031ca:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031cc:	fb03 f201 	mul.w	r2, r3, r1
 80031d0:	2300      	movs	r3, #0
 80031d2:	fb00 f303 	mul.w	r3, r0, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	4a43      	ldr	r2, [pc, #268]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031da:	fba0 1202 	umull	r1, r2, r0, r2
 80031de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031e0:	460a      	mov	r2, r1
 80031e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80031e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e6:	4413      	add	r3, r2
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ec:	2200      	movs	r2, #0
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	61fa      	str	r2, [r7, #28]
 80031f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031fa:	f7fc ffed 	bl	80001d8 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4613      	mov	r3, r2
 8003204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003206:	e053      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003208:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	2200      	movs	r2, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	617a      	str	r2, [r7, #20]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800321a:	f04f 0b00 	mov.w	fp, #0
 800321e:	4652      	mov	r2, sl
 8003220:	465b      	mov	r3, fp
 8003222:	f04f 0000 	mov.w	r0, #0
 8003226:	f04f 0100 	mov.w	r1, #0
 800322a:	0159      	lsls	r1, r3, #5
 800322c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003230:	0150      	lsls	r0, r2, #5
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	ebb2 080a 	subs.w	r8, r2, sl
 800323a:	eb63 090b 	sbc.w	r9, r3, fp
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800324a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800324e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003252:	ebb2 0408 	subs.w	r4, r2, r8
 8003256:	eb63 0509 	sbc.w	r5, r3, r9
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	00eb      	lsls	r3, r5, #3
 8003264:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003268:	00e2      	lsls	r2, r4, #3
 800326a:	4614      	mov	r4, r2
 800326c:	461d      	mov	r5, r3
 800326e:	eb14 030a 	adds.w	r3, r4, sl
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	eb45 030b 	adc.w	r3, r5, fp
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003286:	4629      	mov	r1, r5
 8003288:	028b      	lsls	r3, r1, #10
 800328a:	4621      	mov	r1, r4
 800328c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003290:	4621      	mov	r1, r4
 8003292:	028a      	lsls	r2, r1, #10
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329a:	2200      	movs	r2, #0
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	60fa      	str	r2, [r7, #12]
 80032a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032a4:	f7fc ff98 	bl	80001d8 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	3301      	adds	r3, #1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80032c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032ca:	e002      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3740      	adds	r7, #64	; 0x40
 80032d8:	46bd      	mov	sp, r7
 80032da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	00f42400 	.word	0x00f42400
 80032e8:	017d7840 	.word	0x017d7840

080032ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000000 	.word	0x20000000

08003304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003308:	f7ff fff0 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 800330c:	4602      	mov	r2, r0
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	0a9b      	lsrs	r3, r3, #10
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	4903      	ldr	r1, [pc, #12]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800331a:	5ccb      	ldrb	r3, [r1, r3]
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40023800 	.word	0x40023800
 8003328:	080080a8 	.word	0x080080a8

0800332c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003330:	f7ff ffdc 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	0b5b      	lsrs	r3, r3, #13
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	; (8003350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40023800 	.word	0x40023800
 8003350:	080080a8 	.word	0x080080a8

08003354 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003378:	2b00      	cmp	r3, #0
 800337a:	d038      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800337c:	4b68      	ldr	r3, [pc, #416]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003382:	f7fd fbb1 	bl	8000ae8 <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003388:	e008      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800338a:	f7fd fbad 	bl	8000ae8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e0bd      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800339c:	4b61      	ldr	r3, [pc, #388]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	019b      	lsls	r3, r3, #6
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	071b      	lsls	r3, r3, #28
 80033ba:	495a      	ldr	r1, [pc, #360]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033c2:	4b57      	ldr	r3, [pc, #348]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033c8:	f7fd fb8e 	bl	8000ae8 <HAL_GetTick>
 80033cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033d0:	f7fd fb8a 	bl	8000ae8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e09a      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033e2:	4b50      	ldr	r3, [pc, #320]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8083 	beq.w	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	4b48      	ldr	r3, [pc, #288]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	4a47      	ldr	r2, [pc, #284]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340a:	6413      	str	r3, [r2, #64]	; 0x40
 800340c:	4b45      	ldr	r3, [pc, #276]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003418:	4b43      	ldr	r3, [pc, #268]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a42      	ldr	r2, [pc, #264]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003424:	f7fd fb60 	bl	8000ae8 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800342c:	f7fd fb5c 	bl	8000ae8 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e06c      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800344a:	4b36      	ldr	r3, [pc, #216]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003452:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d02f      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	429a      	cmp	r2, r3
 8003466:	d028      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003470:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003472:	4b2e      	ldr	r3, [pc, #184]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003478:	4b2c      	ldr	r3, [pc, #176]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800347e:	4a29      	ldr	r2, [pc, #164]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d114      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003490:	f7fd fb2a 	bl	8000ae8 <HAL_GetTick>
 8003494:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003496:	e00a      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fd fb26 	bl	8000ae8 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e034      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0ee      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c6:	d10d      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80034c8:	4b16      	ldr	r3, [pc, #88]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034dc:	4911      	ldr	r1, [pc, #68]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
 80034e2:	e005      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a0e      	ldr	r2, [pc, #56]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034ee:	6093      	str	r3, [r2, #8]
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fc:	4909      	ldr	r1, [pc, #36]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	7d1a      	ldrb	r2, [r3, #20]
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003514:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	42470068 	.word	0x42470068
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000
 800352c:	42470e40 	.word	0x42470e40
 8003530:	424711e0 	.word	0x424711e0

08003534 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e083      	b.n	800364e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	7f5b      	ldrb	r3, [r3, #29]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd f8da 	bl	8000710 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	22ca      	movs	r2, #202	; 0xca
 8003568:	625a      	str	r2, [r3, #36]	; 0x24
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2253      	movs	r2, #83	; 0x53
 8003570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f897 	bl	80036a6 <RTC_EnterInitMode>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	22ff      	movs	r2, #255	; 0xff
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2204      	movs	r2, #4
 800358a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e05e      	b.n	800364e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800359e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6899      	ldr	r1, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6919      	ldr	r1, [r3, #16]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	041a      	lsls	r2, r3, #16
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10e      	bne.n	800361c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f829 	bl	8003656 <HAL_RTC_WaitForSynchro>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	22ff      	movs	r2, #255	; 0xff
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2204      	movs	r2, #4
 8003616:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e018      	b.n	800364e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	22ff      	movs	r2, #255	; 0xff
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003670:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003672:	f7fd fa39 	bl	8000ae8 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003678:	e009      	b.n	800368e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800367a:	f7fd fa35 	bl	8000ae8 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003688:	d901      	bls.n	800368e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e007      	b.n	800369e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ee      	beq.n	800367a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d119      	bne.n	80036f4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295
 80036c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ca:	f7fd fa0d 	bl	8000ae8 <HAL_GetTick>
 80036ce:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036d0:	e009      	b.n	80036e6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036d2:	f7fd fa09 	bl	8000ae8 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036e0:	d901      	bls.n	80036e6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e007      	b.n	80036f6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ee      	beq.n	80036d2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e03f      	b.n	8003790 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7fd f8cb 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2224      	movs	r2, #36	; 0x24
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003740:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fc7a 	bl	800403c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003756:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003766:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003776:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b0ba      	sub	sp, #232	; 0xe8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_UART_IRQHandler+0x66>
 80037ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fb65 	bl	8003ec6 <UART_Receive_IT>
      return;
 80037fc:	e256      	b.n	8003cac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80de 	beq.w	80039c4 <HAL_UART_IRQHandler+0x22c>
 8003808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003818:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80d1 	beq.w	80039c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_UART_IRQHandler+0xae>
 800382e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_UART_IRQHandler+0xd2>
 8003852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f043 0202 	orr.w	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <HAL_UART_IRQHandler+0xf6>
 8003876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f043 0204 	orr.w	r2, r3, #4
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d011      	beq.n	80038be <HAL_UART_IRQHandler+0x126>
 800389a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f043 0208 	orr.w	r2, r3, #8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 81ed 	beq.w	8003ca2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_UART_IRQHandler+0x14e>
 80038d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 faf0 	bl	8003ec6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <HAL_UART_IRQHandler+0x17a>
 800390a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d04f      	beq.n	80039b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9f8 	bl	8003d08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d141      	bne.n	80039aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3314      	adds	r3, #20
 800392c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800393c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3314      	adds	r3, #20
 800394e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003952:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800395e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800396a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1d9      	bne.n	8003926 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	2b00      	cmp	r3, #0
 8003978:	d013      	beq.n	80039a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	4a7d      	ldr	r2, [pc, #500]	; (8003b74 <HAL_UART_IRQHandler+0x3dc>)
 8003980:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd fb0e 	bl	8000fa8 <HAL_DMA_Abort_IT>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d016      	beq.n	80039c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800399c:	4610      	mov	r0, r2
 800399e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	e00e      	b.n	80039c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f99a 	bl	8003cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	e00a      	b.n	80039c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f996 	bl	8003cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	e006      	b.n	80039c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f992 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039be:	e170      	b.n	8003ca2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	bf00      	nop
    return;
 80039c2:	e16e      	b.n	8003ca2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	f040 814a 	bne.w	8003c62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8143 	beq.w	8003c62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 813c 	beq.w	8003c62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	f040 80b4 	bne.w	8003b78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8140 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	f080 8139 	bcs.w	8003ca6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a46:	f000 8088 	beq.w	8003b5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1d9      	bne.n	8003a4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003aba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003abe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e1      	bne.n	8003a96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3314      	adds	r3, #20
 8003ad8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3314      	adds	r3, #20
 8003af2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003af6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003af8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003afc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e3      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b2a:	f023 0310 	bic.w	r3, r3, #16
 8003b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e3      	bne.n	8003b18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fd f9b7 	bl	8000ec8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4619      	mov	r1, r3
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8c0 	bl	8003cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b70:	e099      	b.n	8003ca6 <HAL_UART_IRQHandler+0x50e>
 8003b72:	bf00      	nop
 8003b74:	08003dcf 	.word	0x08003dcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 808b 	beq.w	8003caa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003b94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8086 	beq.w	8003caa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bc2:	647a      	str	r2, [r7, #68]	; 0x44
 8003bc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e3      	bne.n	8003b9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3314      	adds	r3, #20
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	623b      	str	r3, [r7, #32]
   return(result);
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bfa:	633a      	str	r2, [r7, #48]	; 0x30
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e3      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0310 	bic.w	r3, r3, #16
 8003c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c40:	61fa      	str	r2, [r7, #28]
 8003c42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e3      	bne.n	8003c1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c58:	4619      	mov	r1, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f848 	bl	8003cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c60:	e023      	b.n	8003caa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d009      	beq.n	8003c82 <HAL_UART_IRQHandler+0x4ea>
 8003c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f8bb 	bl	8003df6 <UART_Transmit_IT>
    return;
 8003c80:	e014      	b.n	8003cac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00e      	beq.n	8003cac <HAL_UART_IRQHandler+0x514>
 8003c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f8fb 	bl	8003e96 <UART_EndTransmit_IT>
    return;
 8003ca0:	e004      	b.n	8003cac <HAL_UART_IRQHandler+0x514>
    return;
 8003ca2:	bf00      	nop
 8003ca4:	e002      	b.n	8003cac <HAL_UART_IRQHandler+0x514>
      return;
 8003ca6:	bf00      	nop
 8003ca8:	e000      	b.n	8003cac <HAL_UART_IRQHandler+0x514>
      return;
 8003caa:	bf00      	nop
  }
}
 8003cac:	37e8      	adds	r7, #232	; 0xe8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop

08003cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b095      	sub	sp, #84	; 0x54
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d30:	643a      	str	r2, [r7, #64]	; 0x40
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e5      	bne.n	8003d10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3314      	adds	r3, #20
 8003d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e5      	bne.n	8003d44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d119      	bne.n	8003db4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f023 0310 	bic.w	r3, r3, #16
 8003d96:	647b      	str	r3, [r7, #68]	; 0x44
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003da0:	61ba      	str	r2, [r7, #24]
 8003da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6979      	ldr	r1, [r7, #20]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	613b      	str	r3, [r7, #16]
   return(result);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e5      	bne.n	8003d80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dc2:	bf00      	nop
 8003dc4:	3754      	adds	r7, #84	; 0x54
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff ff77 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b21      	cmp	r3, #33	; 0x21
 8003e08:	d13e      	bne.n	8003e88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e12:	d114      	bne.n	8003e3e <UART_Transmit_IT+0x48>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d110      	bne.n	8003e3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	1c9a      	adds	r2, r3, #2
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	621a      	str	r2, [r3, #32]
 8003e3c:	e008      	b.n	8003e50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	1c59      	adds	r1, r3, #1
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6211      	str	r1, [r2, #32]
 8003e48:	781a      	ldrb	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10f      	bne.n	8003e84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fefc 	bl	8003cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08c      	sub	sp, #48	; 0x30
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b22      	cmp	r3, #34	; 0x22
 8003ed8:	f040 80ab 	bne.w	8004032 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee4:	d117      	bne.n	8003f16 <UART_Receive_IT+0x50>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d113      	bne.n	8003f16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	1c9a      	adds	r2, r3, #2
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
 8003f14:	e026      	b.n	8003f64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f28:	d007      	beq.n	8003f3a <UART_Receive_IT+0x74>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <UART_Receive_IT+0x82>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e008      	b.n	8003f5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	4619      	mov	r1, r3
 8003f72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d15a      	bne.n	800402e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0220 	bic.w	r2, r2, #32
 8003f86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d135      	bne.n	8004024 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f023 0310 	bic.w	r3, r3, #16
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fde:	623a      	str	r2, [r7, #32]
 8003fe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	69f9      	ldr	r1, [r7, #28]
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e5      	bne.n	8003fbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	d10a      	bne.n	8004016 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff fe67 	bl	8003cf0 <HAL_UARTEx_RxEventCallback>
 8004022:	e002      	b.n	800402a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fe4f 	bl	8003cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	e002      	b.n	8004034 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e000      	b.n	8004034 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004032:	2302      	movs	r3, #2
  }
}
 8004034:	4618      	mov	r0, r3
 8004036:	3730      	adds	r7, #48	; 0x30
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800403c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004040:	b0c0      	sub	sp, #256	; 0x100
 8004042:	af00      	add	r7, sp, #0
 8004044:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	68d9      	ldr	r1, [r3, #12]
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	ea40 0301 	orr.w	r3, r0, r1
 8004064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	431a      	orrs	r2, r3
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	431a      	orrs	r2, r3
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004094:	f021 010c 	bic.w	r1, r1, #12
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040a2:	430b      	orrs	r3, r1
 80040a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b6:	6999      	ldr	r1, [r3, #24]
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	ea40 0301 	orr.w	r3, r0, r1
 80040c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4b8f      	ldr	r3, [pc, #572]	; (8004308 <UART_SetConfig+0x2cc>)
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d005      	beq.n	80040dc <UART_SetConfig+0xa0>
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b8d      	ldr	r3, [pc, #564]	; (800430c <UART_SetConfig+0x2d0>)
 80040d8:	429a      	cmp	r2, r3
 80040da:	d104      	bne.n	80040e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7ff f926 	bl	800332c <HAL_RCC_GetPCLK2Freq>
 80040e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040e4:	e003      	b.n	80040ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040e6:	f7ff f90d 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 80040ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f8:	f040 810c 	bne.w	8004314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004100:	2200      	movs	r2, #0
 8004102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004106:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800410a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800410e:	4622      	mov	r2, r4
 8004110:	462b      	mov	r3, r5
 8004112:	1891      	adds	r1, r2, r2
 8004114:	65b9      	str	r1, [r7, #88]	; 0x58
 8004116:	415b      	adcs	r3, r3
 8004118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800411a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800411e:	4621      	mov	r1, r4
 8004120:	eb12 0801 	adds.w	r8, r2, r1
 8004124:	4629      	mov	r1, r5
 8004126:	eb43 0901 	adc.w	r9, r3, r1
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800413a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413e:	4690      	mov	r8, r2
 8004140:	4699      	mov	r9, r3
 8004142:	4623      	mov	r3, r4
 8004144:	eb18 0303 	adds.w	r3, r8, r3
 8004148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800414c:	462b      	mov	r3, r5
 800414e:	eb49 0303 	adc.w	r3, r9, r3
 8004152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004162:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800416a:	460b      	mov	r3, r1
 800416c:	18db      	adds	r3, r3, r3
 800416e:	653b      	str	r3, [r7, #80]	; 0x50
 8004170:	4613      	mov	r3, r2
 8004172:	eb42 0303 	adc.w	r3, r2, r3
 8004176:	657b      	str	r3, [r7, #84]	; 0x54
 8004178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800417c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004180:	f7fc f82a 	bl	80001d8 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4b61      	ldr	r3, [pc, #388]	; (8004310 <UART_SetConfig+0x2d4>)
 800418a:	fba3 2302 	umull	r2, r3, r3, r2
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	011c      	lsls	r4, r3, #4
 8004192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004196:	2200      	movs	r2, #0
 8004198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800419c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041a4:	4642      	mov	r2, r8
 80041a6:	464b      	mov	r3, r9
 80041a8:	1891      	adds	r1, r2, r2
 80041aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80041ac:	415b      	adcs	r3, r3
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041b4:	4641      	mov	r1, r8
 80041b6:	eb12 0a01 	adds.w	sl, r2, r1
 80041ba:	4649      	mov	r1, r9
 80041bc:	eb43 0b01 	adc.w	fp, r3, r1
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d4:	4692      	mov	sl, r2
 80041d6:	469b      	mov	fp, r3
 80041d8:	4643      	mov	r3, r8
 80041da:	eb1a 0303 	adds.w	r3, sl, r3
 80041de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041e2:	464b      	mov	r3, r9
 80041e4:	eb4b 0303 	adc.w	r3, fp, r3
 80041e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004200:	460b      	mov	r3, r1
 8004202:	18db      	adds	r3, r3, r3
 8004204:	643b      	str	r3, [r7, #64]	; 0x40
 8004206:	4613      	mov	r3, r2
 8004208:	eb42 0303 	adc.w	r3, r2, r3
 800420c:	647b      	str	r3, [r7, #68]	; 0x44
 800420e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004216:	f7fb ffdf 	bl	80001d8 <__aeabi_uldivmod>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4611      	mov	r1, r2
 8004220:	4b3b      	ldr	r3, [pc, #236]	; (8004310 <UART_SetConfig+0x2d4>)
 8004222:	fba3 2301 	umull	r2, r3, r3, r1
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2264      	movs	r2, #100	; 0x64
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	1acb      	subs	r3, r1, r3
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <UART_SetConfig+0x2d4>)
 8004238:	fba3 2302 	umull	r2, r3, r3, r2
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004244:	441c      	add	r4, r3
 8004246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800424a:	2200      	movs	r2, #0
 800424c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004250:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004258:	4642      	mov	r2, r8
 800425a:	464b      	mov	r3, r9
 800425c:	1891      	adds	r1, r2, r2
 800425e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004260:	415b      	adcs	r3, r3
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004268:	4641      	mov	r1, r8
 800426a:	1851      	adds	r1, r2, r1
 800426c:	6339      	str	r1, [r7, #48]	; 0x30
 800426e:	4649      	mov	r1, r9
 8004270:	414b      	adcs	r3, r1
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004280:	4659      	mov	r1, fp
 8004282:	00cb      	lsls	r3, r1, #3
 8004284:	4651      	mov	r1, sl
 8004286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428a:	4651      	mov	r1, sl
 800428c:	00ca      	lsls	r2, r1, #3
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	4603      	mov	r3, r0
 8004294:	4642      	mov	r2, r8
 8004296:	189b      	adds	r3, r3, r2
 8004298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800429c:	464b      	mov	r3, r9
 800429e:	460a      	mov	r2, r1
 80042a0:	eb42 0303 	adc.w	r3, r2, r3
 80042a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042bc:	460b      	mov	r3, r1
 80042be:	18db      	adds	r3, r3, r3
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c2:	4613      	mov	r3, r2
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042d2:	f7fb ff81 	bl	80001d8 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <UART_SetConfig+0x2d4>)
 80042dc:	fba3 1302 	umull	r1, r3, r3, r2
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	2164      	movs	r1, #100	; 0x64
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	3332      	adds	r3, #50	; 0x32
 80042ee:	4a08      	ldr	r2, [pc, #32]	; (8004310 <UART_SetConfig+0x2d4>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	f003 0207 	and.w	r2, r3, #7
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4422      	add	r2, r4
 8004302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004304:	e105      	b.n	8004512 <UART_SetConfig+0x4d6>
 8004306:	bf00      	nop
 8004308:	40011000 	.word	0x40011000
 800430c:	40011400 	.word	0x40011400
 8004310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004318:	2200      	movs	r2, #0
 800431a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800431e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004326:	4642      	mov	r2, r8
 8004328:	464b      	mov	r3, r9
 800432a:	1891      	adds	r1, r2, r2
 800432c:	6239      	str	r1, [r7, #32]
 800432e:	415b      	adcs	r3, r3
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
 8004332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004336:	4641      	mov	r1, r8
 8004338:	1854      	adds	r4, r2, r1
 800433a:	4649      	mov	r1, r9
 800433c:	eb43 0501 	adc.w	r5, r3, r1
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	00eb      	lsls	r3, r5, #3
 800434a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800434e:	00e2      	lsls	r2, r4, #3
 8004350:	4614      	mov	r4, r2
 8004352:	461d      	mov	r5, r3
 8004354:	4643      	mov	r3, r8
 8004356:	18e3      	adds	r3, r4, r3
 8004358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800435c:	464b      	mov	r3, r9
 800435e:	eb45 0303 	adc.w	r3, r5, r3
 8004362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004382:	4629      	mov	r1, r5
 8004384:	008b      	lsls	r3, r1, #2
 8004386:	4621      	mov	r1, r4
 8004388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800438c:	4621      	mov	r1, r4
 800438e:	008a      	lsls	r2, r1, #2
 8004390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004394:	f7fb ff20 	bl	80001d8 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4b60      	ldr	r3, [pc, #384]	; (8004520 <UART_SetConfig+0x4e4>)
 800439e:	fba3 2302 	umull	r2, r3, r3, r2
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	011c      	lsls	r4, r3, #4
 80043a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	1891      	adds	r1, r2, r2
 80043be:	61b9      	str	r1, [r7, #24]
 80043c0:	415b      	adcs	r3, r3
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c8:	4641      	mov	r1, r8
 80043ca:	1851      	adds	r1, r2, r1
 80043cc:	6139      	str	r1, [r7, #16]
 80043ce:	4649      	mov	r1, r9
 80043d0:	414b      	adcs	r3, r1
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e0:	4659      	mov	r1, fp
 80043e2:	00cb      	lsls	r3, r1, #3
 80043e4:	4651      	mov	r1, sl
 80043e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ea:	4651      	mov	r1, sl
 80043ec:	00ca      	lsls	r2, r1, #3
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	4642      	mov	r2, r8
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043fc:	464b      	mov	r3, r9
 80043fe:	460a      	mov	r2, r1
 8004400:	eb42 0303 	adc.w	r3, r2, r3
 8004404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	67bb      	str	r3, [r7, #120]	; 0x78
 8004412:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004420:	4649      	mov	r1, r9
 8004422:	008b      	lsls	r3, r1, #2
 8004424:	4641      	mov	r1, r8
 8004426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800442a:	4641      	mov	r1, r8
 800442c:	008a      	lsls	r2, r1, #2
 800442e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004432:	f7fb fed1 	bl	80001d8 <__aeabi_uldivmod>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4b39      	ldr	r3, [pc, #228]	; (8004520 <UART_SetConfig+0x4e4>)
 800443c:	fba3 1302 	umull	r1, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	2164      	movs	r1, #100	; 0x64
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	3332      	adds	r3, #50	; 0x32
 800444e:	4a34      	ldr	r2, [pc, #208]	; (8004520 <UART_SetConfig+0x4e4>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800445a:	441c      	add	r4, r3
 800445c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004460:	2200      	movs	r2, #0
 8004462:	673b      	str	r3, [r7, #112]	; 0x70
 8004464:	677a      	str	r2, [r7, #116]	; 0x74
 8004466:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800446a:	4642      	mov	r2, r8
 800446c:	464b      	mov	r3, r9
 800446e:	1891      	adds	r1, r2, r2
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	415b      	adcs	r3, r3
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800447a:	4641      	mov	r1, r8
 800447c:	1851      	adds	r1, r2, r1
 800447e:	6039      	str	r1, [r7, #0]
 8004480:	4649      	mov	r1, r9
 8004482:	414b      	adcs	r3, r1
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004492:	4659      	mov	r1, fp
 8004494:	00cb      	lsls	r3, r1, #3
 8004496:	4651      	mov	r1, sl
 8004498:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449c:	4651      	mov	r1, sl
 800449e:	00ca      	lsls	r2, r1, #3
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	4603      	mov	r3, r0
 80044a6:	4642      	mov	r2, r8
 80044a8:	189b      	adds	r3, r3, r2
 80044aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80044ac:	464b      	mov	r3, r9
 80044ae:	460a      	mov	r2, r1
 80044b0:	eb42 0303 	adc.w	r3, r2, r3
 80044b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	663b      	str	r3, [r7, #96]	; 0x60
 80044c0:	667a      	str	r2, [r7, #100]	; 0x64
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044ce:	4649      	mov	r1, r9
 80044d0:	008b      	lsls	r3, r1, #2
 80044d2:	4641      	mov	r1, r8
 80044d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d8:	4641      	mov	r1, r8
 80044da:	008a      	lsls	r2, r1, #2
 80044dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044e0:	f7fb fe7a 	bl	80001d8 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <UART_SetConfig+0x4e4>)
 80044ea:	fba3 1302 	umull	r1, r3, r3, r2
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	2164      	movs	r1, #100	; 0x64
 80044f2:	fb01 f303 	mul.w	r3, r1, r3
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	3332      	adds	r3, #50	; 0x32
 80044fc:	4a08      	ldr	r2, [pc, #32]	; (8004520 <UART_SetConfig+0x4e4>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4422      	add	r2, r4
 8004510:	609a      	str	r2, [r3, #8]
}
 8004512:	bf00      	nop
 8004514:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004518:	46bd      	mov	sp, r7
 800451a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451e:	bf00      	nop
 8004520:	51eb851f 	.word	0x51eb851f

08004524 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004524:	b084      	sub	sp, #16
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	f107 001c 	add.w	r0, r7, #28
 8004532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2b01      	cmp	r3, #1
 800453a:	d122      	bne.n	8004582 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d105      	bne.n	8004576 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f001 fb1c 	bl	8005bb4 <USB_CoreReset>
 800457c:	4603      	mov	r3, r0
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e01a      	b.n	80045b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 fb10 	bl	8005bb4 <USB_CoreReset>
 8004594:	4603      	mov	r3, r0
 8004596:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
 80045aa:	e005      	b.n	80045b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10b      	bne.n	80045d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f043 0206 	orr.w	r2, r3, #6
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f043 0220 	orr.w	r2, r3, #32
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045e2:	b004      	add	sp, #16
 80045e4:	4770      	bx	lr
	...

080045e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	4613      	mov	r3, r2
 80045f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d165      	bne.n	80046c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4a41      	ldr	r2, [pc, #260]	; (8004704 <USB_SetTurnaroundTime+0x11c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d906      	bls.n	8004612 <USB_SetTurnaroundTime+0x2a>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4a40      	ldr	r2, [pc, #256]	; (8004708 <USB_SetTurnaroundTime+0x120>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d202      	bcs.n	8004612 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800460c:	230f      	movs	r3, #15
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e062      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4a3c      	ldr	r2, [pc, #240]	; (8004708 <USB_SetTurnaroundTime+0x120>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d306      	bcc.n	8004628 <USB_SetTurnaroundTime+0x40>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4a3b      	ldr	r2, [pc, #236]	; (800470c <USB_SetTurnaroundTime+0x124>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d202      	bcs.n	8004628 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004622:	230e      	movs	r3, #14
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e057      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4a38      	ldr	r2, [pc, #224]	; (800470c <USB_SetTurnaroundTime+0x124>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d306      	bcc.n	800463e <USB_SetTurnaroundTime+0x56>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4a37      	ldr	r2, [pc, #220]	; (8004710 <USB_SetTurnaroundTime+0x128>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d202      	bcs.n	800463e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004638:	230d      	movs	r3, #13
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e04c      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4a33      	ldr	r2, [pc, #204]	; (8004710 <USB_SetTurnaroundTime+0x128>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d306      	bcc.n	8004654 <USB_SetTurnaroundTime+0x6c>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4a32      	ldr	r2, [pc, #200]	; (8004714 <USB_SetTurnaroundTime+0x12c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d802      	bhi.n	8004654 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800464e:	230c      	movs	r3, #12
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e041      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4a2f      	ldr	r2, [pc, #188]	; (8004714 <USB_SetTurnaroundTime+0x12c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d906      	bls.n	800466a <USB_SetTurnaroundTime+0x82>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4a2e      	ldr	r2, [pc, #184]	; (8004718 <USB_SetTurnaroundTime+0x130>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d802      	bhi.n	800466a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004664:	230b      	movs	r3, #11
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e036      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4a2a      	ldr	r2, [pc, #168]	; (8004718 <USB_SetTurnaroundTime+0x130>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d906      	bls.n	8004680 <USB_SetTurnaroundTime+0x98>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4a29      	ldr	r2, [pc, #164]	; (800471c <USB_SetTurnaroundTime+0x134>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d802      	bhi.n	8004680 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800467a:	230a      	movs	r3, #10
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e02b      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4a26      	ldr	r2, [pc, #152]	; (800471c <USB_SetTurnaroundTime+0x134>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d906      	bls.n	8004696 <USB_SetTurnaroundTime+0xae>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4a25      	ldr	r2, [pc, #148]	; (8004720 <USB_SetTurnaroundTime+0x138>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d202      	bcs.n	8004696 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004690:	2309      	movs	r3, #9
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e020      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4a21      	ldr	r2, [pc, #132]	; (8004720 <USB_SetTurnaroundTime+0x138>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d306      	bcc.n	80046ac <USB_SetTurnaroundTime+0xc4>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4a20      	ldr	r2, [pc, #128]	; (8004724 <USB_SetTurnaroundTime+0x13c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d802      	bhi.n	80046ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046a6:	2308      	movs	r3, #8
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	e015      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <USB_SetTurnaroundTime+0x13c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d906      	bls.n	80046c2 <USB_SetTurnaroundTime+0xda>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <USB_SetTurnaroundTime+0x140>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d202      	bcs.n	80046c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046bc:	2307      	movs	r3, #7
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e00a      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046c2:	2306      	movs	r3, #6
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e007      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046ce:	2309      	movs	r3, #9
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e001      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046d4:	2309      	movs	r3, #9
 80046d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	029b      	lsls	r3, r3, #10
 80046ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	00d8acbf 	.word	0x00d8acbf
 8004708:	00e4e1c0 	.word	0x00e4e1c0
 800470c:	00f42400 	.word	0x00f42400
 8004710:	01067380 	.word	0x01067380
 8004714:	011a499f 	.word	0x011a499f
 8004718:	01312cff 	.word	0x01312cff
 800471c:	014ca43f 	.word	0x014ca43f
 8004720:	016e3600 	.word	0x016e3600
 8004724:	01a6ab1f 	.word	0x01a6ab1f
 8004728:	01e84800 	.word	0x01e84800

0800472c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f043 0201 	orr.w	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d115      	bne.n	80047be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800479e:	2001      	movs	r0, #1
 80047a0:	f7fc f9ae 	bl	8000b00 <HAL_Delay>
      ms++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3301      	adds	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f001 f972 	bl	8005a94 <USB_GetMode>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d01e      	beq.n	80047f4 <USB_SetCurrentMode+0x84>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b31      	cmp	r3, #49	; 0x31
 80047ba:	d9f0      	bls.n	800479e <USB_SetCurrentMode+0x2e>
 80047bc:	e01a      	b.n	80047f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d115      	bne.n	80047f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7fc f995 	bl	8000b00 <HAL_Delay>
      ms++;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3301      	adds	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f001 f959 	bl	8005a94 <USB_GetMode>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <USB_SetCurrentMode+0x84>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b31      	cmp	r3, #49	; 0x31
 80047ec:	d9f0      	bls.n	80047d0 <USB_SetCurrentMode+0x60>
 80047ee:	e001      	b.n	80047f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e005      	b.n	8004800 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b32      	cmp	r3, #50	; 0x32
 80047f8:	d101      	bne.n	80047fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004808:	b084      	sub	sp, #16
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	e009      	b.n	800483c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3340      	adds	r3, #64	; 0x40
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	2200      	movs	r2, #0
 8004834:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3301      	adds	r3, #1
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b0e      	cmp	r3, #14
 8004840:	d9f2      	bls.n	8004828 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d11c      	bne.n	8004882 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004856:	f043 0302 	orr.w	r3, r3, #2
 800485a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
 8004880:	e00b      	b.n	800489a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048a0:	461a      	mov	r2, r3
 80048a2:	2300      	movs	r3, #0
 80048a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ac:	4619      	mov	r1, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b4:	461a      	mov	r2, r3
 80048b6:	680b      	ldr	r3, [r1, #0]
 80048b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d10c      	bne.n	80048da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048c6:	2100      	movs	r1, #0
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f945 	bl	8004b58 <USB_SetDevSpeed>
 80048ce:	e008      	b.n	80048e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048d0:	2101      	movs	r1, #1
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f940 	bl	8004b58 <USB_SetDevSpeed>
 80048d8:	e003      	b.n	80048e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048da:	2103      	movs	r1, #3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f93b 	bl	8004b58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048e2:	2110      	movs	r1, #16
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8f3 	bl	8004ad0 <USB_FlushTxFifo>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f90f 	bl	8004b18 <USB_FlushRxFifo>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	461a      	mov	r2, r3
 800490c:	2300      	movs	r3, #0
 800490e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	461a      	mov	r2, r3
 8004918:	2300      	movs	r3, #0
 800491a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	461a      	mov	r2, r3
 8004924:	2300      	movs	r3, #0
 8004926:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	e043      	b.n	80049b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004944:	d118      	bne.n	8004978 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	461a      	mov	r2, r3
 800495a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e013      	b.n	800498a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	461a      	mov	r2, r3
 8004970:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	e008      	b.n	800498a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	461a      	mov	r2, r3
 8004986:	2300      	movs	r3, #0
 8004988:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004996:	461a      	mov	r2, r3
 8004998:	2300      	movs	r3, #0
 800499a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	461a      	mov	r2, r3
 80049aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	3301      	adds	r3, #1
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d3b7      	bcc.n	800492e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e043      	b.n	8004a4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049da:	d118      	bne.n	8004a0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e013      	b.n	8004a20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	461a      	mov	r2, r3
 8004a06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	e008      	b.n	8004a20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d3b7      	bcc.n	80049c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d105      	bne.n	8004a88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f043 0210 	orr.w	r2, r3, #16
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <USB_DevInit+0x2c4>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f043 0208 	orr.w	r2, r3, #8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ab4:	f043 0304 	orr.w	r3, r3, #4
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ac8:	b004      	add	sp, #16
 8004aca:	4770      	bx	lr
 8004acc:	803c3800 	.word	0x803c3800

08004ad0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3301      	adds	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <USB_FlushTxFifo+0x44>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e006      	b.n	8004b08 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d0f1      	beq.n	8004aea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	00030d40 	.word	0x00030d40

08004b18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2210      	movs	r2, #16
 8004b28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <USB_FlushRxFifo+0x3c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e006      	b.n	8004b48 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d0f1      	beq.n	8004b2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	00030d40 	.word	0x00030d40

08004b58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	68f9      	ldr	r1, [r7, #12]
 8004b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b087      	sub	sp, #28
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0306 	and.w	r3, r3, #6
 8004ba2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004baa:	2300      	movs	r3, #0
 8004bac:	75fb      	strb	r3, [r7, #23]
 8004bae:	e00a      	b.n	8004bc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d002      	beq.n	8004bbc <USB_GetDevSpeed+0x32>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b06      	cmp	r3, #6
 8004bba:	d102      	bne.n	8004bc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	75fb      	strb	r3, [r7, #23]
 8004bc0:	e001      	b.n	8004bc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bc2:	230f      	movs	r3, #15
 8004bc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	785b      	ldrb	r3, [r3, #1]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d13a      	bne.n	8004c66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f303 	lsl.w	r3, r1, r3
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	68f9      	ldr	r1, [r7, #12]
 8004c0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d155      	bne.n	8004cd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	78db      	ldrb	r3, [r3, #3]
 8004c42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	059b      	lsls	r3, r3, #22
 8004c4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	e036      	b.n	8004cd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	2101      	movs	r1, #1
 8004c78:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d11a      	bne.n	8004cd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	78db      	ldrb	r3, [r3, #3]
 8004cb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d161      	bne.n	8004dc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d16:	d11f      	bne.n	8004d58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	2101      	movs	r1, #1
 8004d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	68f9      	ldr	r1, [r7, #12]
 8004d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d78:	4013      	ands	r3, r2
 8004d7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	68f9      	ldr	r1, [r7, #12]
 8004d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	0159      	lsls	r1, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	440b      	add	r3, r1
 8004db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4b35      	ldr	r3, [pc, #212]	; (8004e94 <USB_DeactivateEndpoint+0x1b0>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]
 8004dc2:	e060      	b.n	8004e86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dda:	d11f      	bne.n	8004e1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	43db      	mvns	r3, r3
 8004e36:	68f9      	ldr	r1, [r7, #12]
 8004e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	2101      	movs	r1, #1
 8004e52:	fa01 f303 	lsl.w	r3, r1, r3
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e60:	4013      	ands	r3, r2
 8004e62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	0159      	lsls	r1, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	440b      	add	r3, r1
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <USB_DeactivateEndpoint+0x1b4>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	ec337800 	.word	0xec337800
 8004e98:	eff37800 	.word	0xeff37800

08004e9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	f040 815c 	bne.w	8005176 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d132      	bne.n	8004f2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ee4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f24:	0cdb      	lsrs	r3, r3, #19
 8004f26:	04db      	lsls	r3, r3, #19
 8004f28:	6113      	str	r3, [r2, #16]
 8004f2a:	e074      	b.n	8005016 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f46:	0cdb      	lsrs	r3, r3, #19
 8004f48:	04db      	lsls	r3, r3, #19
 8004f4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	6959      	ldr	r1, [r3, #20]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	440b      	add	r3, r1
 8004f88:	1e59      	subs	r1, r3, #1
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f94:	4b9d      	ldr	r3, [pc, #628]	; (800520c <USB_EPStartXfer+0x370>)
 8004f96:	400b      	ands	r3, r1
 8004f98:	69b9      	ldr	r1, [r7, #24]
 8004f9a:	0148      	lsls	r0, r1, #5
 8004f9c:	69f9      	ldr	r1, [r7, #28]
 8004f9e:	4401      	add	r1, r0
 8004fa0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fbe:	69b9      	ldr	r1, [r7, #24]
 8004fc0:	0148      	lsls	r0, r1, #5
 8004fc2:	69f9      	ldr	r1, [r7, #28]
 8004fc4:	4401      	add	r1, r0
 8004fc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	78db      	ldrb	r3, [r3, #3]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d11f      	bne.n	8005016 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ff4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005010:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005014:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d14b      	bne.n	80050b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	461a      	mov	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d128      	bne.n	8005092 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504c:	2b00      	cmp	r3, #0
 800504e:	d110      	bne.n	8005072 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	440a      	add	r2, r1
 8005066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e00f      	b.n	8005092 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005090:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e12f      	b.n	8005314 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	78db      	ldrb	r3, [r3, #3]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d015      	beq.n	8005108 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8117 	beq.w	8005314 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	2101      	movs	r1, #1
 80050f8:	fa01 f303 	lsl.w	r3, r1, r3
 80050fc:	69f9      	ldr	r1, [r7, #28]
 80050fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005102:	4313      	orrs	r3, r2
 8005104:	634b      	str	r3, [r1, #52]	; 0x34
 8005106:	e105      	b.n	8005314 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d110      	bne.n	800513a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e00f      	b.n	800515a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005158:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	68d9      	ldr	r1, [r3, #12]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	781a      	ldrb	r2, [r3, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	b298      	uxth	r0, r3
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	4603      	mov	r3, r0
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fa2b 	bl	80055ca <USB_WritePacket>
 8005174:	e0ce      	b.n	8005314 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005190:	0cdb      	lsrs	r3, r3, #19
 8005192:	04db      	lsls	r3, r3, #19
 8005194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d126      	bne.n	8005210 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d8:	69b9      	ldr	r1, [r7, #24]
 80051da:	0148      	lsls	r0, r1, #5
 80051dc:	69f9      	ldr	r1, [r7, #28]
 80051de:	4401      	add	r1, r0
 80051e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051e4:	4313      	orrs	r3, r2
 80051e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005206:	6113      	str	r3, [r2, #16]
 8005208:	e036      	b.n	8005278 <USB_EPStartXfer+0x3dc>
 800520a:	bf00      	nop
 800520c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	4413      	add	r3, r2
 800521a:	1e5a      	subs	r2, r3, #1
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	8afb      	ldrh	r3, [r7, #22]
 8005236:	04d9      	lsls	r1, r3, #19
 8005238:	4b39      	ldr	r3, [pc, #228]	; (8005320 <USB_EPStartXfer+0x484>)
 800523a:	400b      	ands	r3, r1
 800523c:	69b9      	ldr	r1, [r7, #24]
 800523e:	0148      	lsls	r0, r1, #5
 8005240:	69f9      	ldr	r1, [r7, #28]
 8005242:	4401      	add	r1, r0
 8005244:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005248:	4313      	orrs	r3, r2
 800524a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	8af9      	ldrh	r1, [r7, #22]
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005268:	69b9      	ldr	r1, [r7, #24]
 800526a:	0148      	lsls	r0, r1, #5
 800526c:	69f9      	ldr	r1, [r7, #28]
 800526e:	4401      	add	r1, r0
 8005270:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005274:	4313      	orrs	r3, r2
 8005276:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10d      	bne.n	800529a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	68d9      	ldr	r1, [r3, #12]
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	460a      	mov	r2, r1
 8005298:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	78db      	ldrb	r3, [r3, #3]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d128      	bne.n	80052f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d110      	bne.n	80052d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e00f      	b.n	80052f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	440a      	add	r2, r1
 800530a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005312:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	1ff80000 	.word	0x1ff80000

08005324 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b01      	cmp	r3, #1
 8005342:	f040 80cd 	bne.w	80054e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d132      	bne.n	80053b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005368:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800536c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005370:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	0151      	lsls	r1, r2, #5
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	440a      	add	r2, r1
 8005388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ac:	0cdb      	lsrs	r3, r3, #19
 80053ae:	04db      	lsls	r3, r3, #19
 80053b0:	6113      	str	r3, [r2, #16]
 80053b2:	e04e      	b.n	8005452 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ce:	0cdb      	lsrs	r3, r3, #19
 80053d0:	04db      	lsls	r3, r3, #19
 80053d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	0151      	lsls	r1, r2, #5
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	440a      	add	r2, r1
 80053ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	695a      	ldr	r2, [r3, #20]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	429a      	cmp	r2, r3
 8005402:	d903      	bls.n	800540c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800542a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005442:	6939      	ldr	r1, [r7, #16]
 8005444:	0148      	lsls	r0, r1, #5
 8005446:	6979      	ldr	r1, [r7, #20]
 8005448:	4401      	add	r1, r0
 800544a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800544e:	4313      	orrs	r3, r2
 8005450:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d11e      	bne.n	8005496 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	e092      	b.n	80055bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d07e      	beq.n	80055bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	2101      	movs	r1, #1
 80054d0:	fa01 f303 	lsl.w	r3, r1, r3
 80054d4:	6979      	ldr	r1, [r7, #20]
 80054d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054da:	4313      	orrs	r3, r2
 80054dc:	634b      	str	r3, [r1, #52]	; 0x34
 80054de:	e06d      	b.n	80055bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	0cdb      	lsrs	r3, r3, #19
 80054fc:	04db      	lsls	r3, r3, #19
 80054fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800551e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005522:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005552:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800556a:	6939      	ldr	r1, [r7, #16]
 800556c:	0148      	lsls	r0, r1, #5
 800556e:	6979      	ldr	r1, [r7, #20]
 8005570:	4401      	add	r1, r0
 8005572:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005576:	4313      	orrs	r3, r2
 8005578:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10d      	bne.n	800559c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	68d9      	ldr	r1, [r3, #12]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	460a      	mov	r2, r1
 800559a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b089      	sub	sp, #36	; 0x24
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	4611      	mov	r1, r2
 80055d6:	461a      	mov	r2, r3
 80055d8:	460b      	mov	r3, r1
 80055da:	71fb      	strb	r3, [r7, #7]
 80055dc:	4613      	mov	r3, r2
 80055de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d123      	bne.n	8005638 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055f0:	88bb      	ldrh	r3, [r7, #4]
 80055f2:	3303      	adds	r3, #3
 80055f4:	089b      	lsrs	r3, r3, #2
 80055f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055f8:	2300      	movs	r3, #0
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	e018      	b.n	8005630 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	031a      	lsls	r2, r3, #12
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	4413      	add	r3, r2
 8005606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560a:	461a      	mov	r2, r3
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3301      	adds	r3, #1
 8005616:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	3301      	adds	r3, #1
 8005622:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	3301      	adds	r3, #1
 8005628:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	3301      	adds	r3, #1
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	429a      	cmp	r2, r3
 8005636:	d3e2      	bcc.n	80055fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3724      	adds	r7, #36	; 0x24
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005646:	b480      	push	{r7}
 8005648:	b08b      	sub	sp, #44	; 0x2c
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	4613      	mov	r3, r2
 8005652:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	b29b      	uxth	r3, r3
 8005662:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800566c:	2300      	movs	r3, #0
 800566e:	623b      	str	r3, [r7, #32]
 8005670:	e014      	b.n	800569c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	601a      	str	r2, [r3, #0]
    pDest++;
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	3301      	adds	r3, #1
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	3301      	adds	r3, #1
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	3301      	adds	r3, #1
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	3301      	adds	r3, #1
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	3301      	adds	r3, #1
 800569a:	623b      	str	r3, [r7, #32]
 800569c:	6a3a      	ldr	r2, [r7, #32]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d3e6      	bcc.n	8005672 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056a4:	8bfb      	ldrh	r3, [r7, #30]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d01e      	beq.n	80056e8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b4:	461a      	mov	r2, r3
 80056b6:	f107 0310 	add.w	r3, r7, #16
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	701a      	strb	r2, [r3, #0]
      i++;
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	3301      	adds	r3, #1
 80056d4:	623b      	str	r3, [r7, #32]
      pDest++;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	3301      	adds	r3, #1
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056dc:	8bfb      	ldrh	r3, [r7, #30]
 80056de:	3b01      	subs	r3, #1
 80056e0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056e2:	8bfb      	ldrh	r3, [r7, #30]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1ea      	bne.n	80056be <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	372c      	adds	r7, #44	; 0x2c
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d12c      	bne.n	800576c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	db12      	blt.n	800574a <USB_EPSetStall+0x54>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00f      	beq.n	800574a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005744:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005748:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e02b      	b.n	80057c4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	db12      	blt.n	80057a4 <USB_EPSetStall+0xae>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00f      	beq.n	80057a4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057a2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d128      	bne.n	8005840 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	440a      	add	r2, r1
 8005804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005808:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800580c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	78db      	ldrb	r3, [r3, #3]
 8005812:	2b03      	cmp	r3, #3
 8005814:	d003      	beq.n	800581e <USB_EPClearStall+0x4c>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	78db      	ldrb	r3, [r3, #3]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d138      	bne.n	8005890 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e027      	b.n	8005890 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800585a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800585e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	78db      	ldrb	r3, [r3, #3]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d003      	beq.n	8005870 <USB_EPClearStall+0x9e>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	78db      	ldrb	r3, [r3, #3]
 800586c:	2b02      	cmp	r3, #2
 800586e:	d10f      	bne.n	8005890 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80058c0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d8:	4313      	orrs	r3, r2
 80058da:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b085      	sub	sp, #20
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005904:	f023 0303 	bic.w	r3, r3, #3
 8005908:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005918:	f023 0302 	bic.w	r3, r3, #2
 800591c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005946:	f023 0303 	bic.w	r3, r3, #3
 800594a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800595a:	f043 0302 	orr.w	r3, r3, #2
 800595e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4013      	ands	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005986:	68fb      	ldr	r3, [r7, #12]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	4013      	ands	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	0c1b      	lsrs	r3, r3, #16
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	4013      	ands	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	b29b      	uxth	r3, r3
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
 8005a68:	01db      	lsls	r3, r3, #7
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4013      	ands	r3, r2
 8005a84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a86:	68bb      	ldr	r3, [r7, #8]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ace:	f023 0307 	bic.w	r3, r3, #7
 8005ad2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
	...

08005af8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	460b      	mov	r3, r1
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	333c      	adds	r3, #60	; 0x3c
 8005b0e:	3304      	adds	r3, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <USB_EP0_OutStart+0xb8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d90a      	bls.n	8005b32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b2c:	d101      	bne.n	8005b32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e037      	b.n	8005ba2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b60:	f043 0318 	orr.w	r3, r3, #24
 8005b64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b7a:	7afb      	ldrb	r3, [r7, #11]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d10f      	bne.n	8005ba0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b86:	461a      	mov	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	4f54300a 	.word	0x4f54300a

08005bb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <USB_CoreReset+0x60>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e01a      	b.n	8005c06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	daf3      	bge.n	8005bc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f043 0201 	orr.w	r2, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3301      	adds	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <USB_CoreReset+0x60>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d901      	bls.n	8005bf8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e006      	b.n	8005c06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d0f1      	beq.n	8005be8 <USB_CoreReset+0x34>

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	00030d40 	.word	0x00030d40

08005c18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c28:	f002 f996 	bl	8007f58 <USBD_static_malloc>
 8005c2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d105      	bne.n	8005c40 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e066      	b.n	8005d0e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	7c1b      	ldrb	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d119      	bne.n	8005c84 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c54:	2202      	movs	r2, #2
 8005c56:	2181      	movs	r1, #129	; 0x81
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f002 f85a 	bl	8007d12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c68:	2202      	movs	r2, #2
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f002 f850 	bl	8007d12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2210      	movs	r2, #16
 8005c7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005c82:	e016      	b.n	8005cb2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c84:	2340      	movs	r3, #64	; 0x40
 8005c86:	2202      	movs	r2, #2
 8005c88:	2181      	movs	r1, #129	; 0x81
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f002 f841 	bl	8007d12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c96:	2340      	movs	r3, #64	; 0x40
 8005c98:	2202      	movs	r2, #2
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f002 f838 	bl	8007d12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2210      	movs	r2, #16
 8005cae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	2182      	movs	r1, #130	; 0x82
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f002 f82a 	bl	8007d12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7c1b      	ldrb	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f002 f8fb 	bl	8007ef0 <USBD_LL_PrepareReceive>
 8005cfa:	e007      	b.n	8005d0c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d02:	2340      	movs	r3, #64	; 0x40
 8005d04:	2101      	movs	r1, #1
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f002 f8f2 	bl	8007ef0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d22:	2181      	movs	r1, #129	; 0x81
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f002 f81a 	bl	8007d5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d30:	2101      	movs	r1, #1
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f002 f813 	bl	8007d5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d40:	2182      	movs	r1, #130	; 0x82
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f002 f80b 	bl	8007d5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d72:	4618      	mov	r0, r3
 8005d74:	f002 f8fe 	bl	8007f74 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e0af      	b.n	8005f14 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d03f      	beq.n	8005e40 <USBD_CDC_Setup+0xb4>
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	f040 809f 	bne.w	8005f04 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	88db      	ldrh	r3, [r3, #6]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d02e      	beq.n	8005e2c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b25b      	sxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da16      	bge.n	8005e06 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005de4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	88d2      	ldrh	r2, [r2, #6]
 8005dea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	88db      	ldrh	r3, [r3, #6]
 8005df0:	2b07      	cmp	r3, #7
 8005df2:	bf28      	it	cs
 8005df4:	2307      	movcs	r3, #7
 8005df6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	89fa      	ldrh	r2, [r7, #14]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 fae9 	bl	80073d6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005e04:	e085      	b.n	8005f12 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	785a      	ldrb	r2, [r3, #1]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	88db      	ldrh	r3, [r3, #6]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005e1c:	6939      	ldr	r1, [r7, #16]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	88db      	ldrh	r3, [r3, #6]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 fb02 	bl	800742e <USBD_CtlPrepareRx>
      break;
 8005e2a:	e072      	b.n	8005f12 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	7850      	ldrb	r0, [r2, #1]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	4798      	blx	r3
      break;
 8005e3e:	e068      	b.n	8005f12 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b0b      	cmp	r3, #11
 8005e46:	d852      	bhi.n	8005eee <USBD_CDC_Setup+0x162>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <USBD_CDC_Setup+0xc4>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e81 	.word	0x08005e81
 8005e54:	08005efd 	.word	0x08005efd
 8005e58:	08005eef 	.word	0x08005eef
 8005e5c:	08005eef 	.word	0x08005eef
 8005e60:	08005eef 	.word	0x08005eef
 8005e64:	08005eef 	.word	0x08005eef
 8005e68:	08005eef 	.word	0x08005eef
 8005e6c:	08005eef 	.word	0x08005eef
 8005e70:	08005eef 	.word	0x08005eef
 8005e74:	08005eef 	.word	0x08005eef
 8005e78:	08005eab 	.word	0x08005eab
 8005e7c:	08005ed5 	.word	0x08005ed5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d107      	bne.n	8005e9c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e8c:	f107 030a 	add.w	r3, r7, #10
 8005e90:	2202      	movs	r2, #2
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 fa9e 	bl	80073d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e9a:	e032      	b.n	8005f02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 fa28 	bl	80072f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	75fb      	strb	r3, [r7, #23]
          break;
 8005ea8:	e02b      	b.n	8005f02 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d107      	bne.n	8005ec6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005eb6:	f107 030d 	add.w	r3, r7, #13
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f001 fa89 	bl	80073d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ec4:	e01d      	b.n	8005f02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 fa13 	bl	80072f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ed2:	e016      	b.n	8005f02 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d00f      	beq.n	8005f00 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 fa06 	bl	80072f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005eec:	e008      	b.n	8005f00 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 f9ff 	bl	80072f4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8005efa:	e002      	b.n	8005f02 <USBD_CDC_Setup+0x176>
          break;
 8005efc:	bf00      	nop
 8005efe:	e008      	b.n	8005f12 <USBD_CDC_Setup+0x186>
          break;
 8005f00:	bf00      	nop
      }
      break;
 8005f02:	e006      	b.n	8005f12 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 f9f4 	bl	80072f4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f10:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e04f      	b.n	8005fde <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	3318      	adds	r3, #24
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d029      	beq.n	8005fb0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f5c:	78fa      	ldrb	r2, [r7, #3]
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	3318      	adds	r3, #24
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	78f9      	ldrb	r1, [r7, #3]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	460b      	mov	r3, r1
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	1a5b      	subs	r3, r3, r1
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4403      	add	r3, r0
 8005f7c:	3344      	adds	r3, #68	; 0x44
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d110      	bne.n	8005fb0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005f8e:	78fa      	ldrb	r2, [r7, #3]
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	3318      	adds	r3, #24
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005fa2:	78f9      	ldrb	r1, [r7, #3]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 ff80 	bl	8007eae <USBD_LL_Transmit>
 8005fae:	e015      	b.n	8005fdc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005fd8:	78fa      	ldrb	r2, [r7, #3]
 8005fda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ff8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006004:	2303      	movs	r3, #3
 8006006:	e015      	b.n	8006034 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 ff90 	bl	8007f32 <USBD_LL_GetRxDataSize>
 8006012:	4602      	mov	r2, r0
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800602e:	4611      	mov	r1, r2
 8006030:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800604a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006052:	2303      	movs	r3, #3
 8006054:	e01b      	b.n	800608e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <USBD_CDC_EP0_RxReady+0x50>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006066:	2bff      	cmp	r3, #255	; 0xff
 8006068:	d010      	beq.n	800608c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006078:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006080:	b292      	uxth	r2, r2
 8006082:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	22ff      	movs	r2, #255	; 0xff
 8006088:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2243      	movs	r2, #67	; 0x43
 80060a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80060a6:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20000094 	.word	0x20000094

080060b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2243      	movs	r2, #67	; 0x43
 80060c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80060c6:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	20000050 	.word	0x20000050

080060d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2243      	movs	r2, #67	; 0x43
 80060e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80060e6:	4b03      	ldr	r3, [pc, #12]	; (80060f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	200000d8 	.word	0x200000d8

080060f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	220a      	movs	r2, #10
 8006104:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006106:	4b03      	ldr	r3, [pc, #12]	; (8006114 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	2000000c 	.word	0x2000000c

08006118 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006128:	2303      	movs	r3, #3
 800612a:	e004      	b.n	8006136 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006154:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	e008      	b.n	8006172 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800618e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006196:	2303      	movs	r3, #3
 8006198:	e004      	b.n	80061a4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e016      	b.n	80061fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	7c1b      	ldrb	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061e0:	2101      	movs	r1, #1
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fe84 	bl	8007ef0 <USBD_LL_PrepareReceive>
 80061e8:	e007      	b.n	80061fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061f0:	2340      	movs	r3, #64	; 0x40
 80061f2:	2101      	movs	r1, #1
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fe7b 	bl	8007ef0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006218:	2303      	movs	r3, #3
 800621a:	e01f      	b.n	800625c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	79fa      	ldrb	r2, [r7, #7]
 800624e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f001 fcf7 	bl	8007c44 <USBD_LL_Init>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]

  return ret;
 800625a:	7dfb      	ldrb	r3, [r7, #23]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006278:	2303      	movs	r3, #3
 800627a:	e016      	b.n	80062aa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	f107 020e 	add.w	r2, r7, #14
 800629c:	4610      	mov	r0, r2
 800629e:	4798      	blx	r3
 80062a0:	4602      	mov	r2, r0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 fd0e 	bl	8007cdc <USBD_LL_Start>
 80062c0:	4603      	mov	r3, r0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062ec:	2303      	movs	r3, #3
 80062ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	78fa      	ldrb	r2, [r7, #3]
 8006304:	4611      	mov	r1, r2
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	78fa      	ldrb	r2, [r7, #3]
 8006338:	4611      	mov	r1, r2
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
  }

  return USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 ff90 	bl	8007280 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800636e:	461a      	mov	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	2b02      	cmp	r3, #2
 8006382:	d01a      	beq.n	80063ba <USBD_LL_SetupStage+0x72>
 8006384:	2b02      	cmp	r3, #2
 8006386:	d822      	bhi.n	80063ce <USBD_LL_SetupStage+0x86>
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <USBD_LL_SetupStage+0x4a>
 800638c:	2b01      	cmp	r3, #1
 800638e:	d00a      	beq.n	80063a6 <USBD_LL_SetupStage+0x5e>
 8006390:	e01d      	b.n	80063ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa62 	bl	8006864 <USBD_StdDevReq>
 80063a0:	4603      	mov	r3, r0
 80063a2:	73fb      	strb	r3, [r7, #15]
      break;
 80063a4:	e020      	b.n	80063e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fac6 	bl	8006940 <USBD_StdItfReq>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]
      break;
 80063b8:	e016      	b.n	80063e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fb05 	bl	80069d2 <USBD_StdEPReq>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
      break;
 80063cc:	e00c      	b.n	80063e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 fcdd 	bl	8007d9c <USBD_LL_StallEP>
 80063e2:	4603      	mov	r3, r0
 80063e4:	73fb      	strb	r3, [r7, #15]
      break;
 80063e6:	bf00      	nop
  }

  return ret;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b086      	sub	sp, #24
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	460b      	mov	r3, r1
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006400:	7afb      	ldrb	r3, [r7, #11]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d138      	bne.n	8006478 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800640c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006414:	2b03      	cmp	r3, #3
 8006416:	d14a      	bne.n	80064ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	429a      	cmp	r2, r3
 8006422:	d913      	bls.n	800644c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	1ad2      	subs	r2, r2, r3
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	4293      	cmp	r3, r2
 800643c:	bf28      	it	cs
 800643e:	4613      	movcs	r3, r2
 8006440:	461a      	mov	r2, r3
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f001 f80f 	bl	8007468 <USBD_CtlContinueRx>
 800644a:	e030      	b.n	80064ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b03      	cmp	r3, #3
 8006456:	d10b      	bne.n	8006470 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f001 f80a 	bl	800748a <USBD_CtlSendStatus>
 8006476:	e01a      	b.n	80064ae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b03      	cmp	r3, #3
 8006482:	d114      	bne.n	80064ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00e      	beq.n	80064ae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	7afa      	ldrb	r2, [r7, #11]
 800649a:	4611      	mov	r1, r2
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	4798      	blx	r3
 80064a0:	4603      	mov	r3, r0
 80064a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	e000      	b.n	80064b0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	460b      	mov	r3, r1
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d16b      	bne.n	80065a4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3314      	adds	r3, #20
 80064d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d156      	bne.n	800658a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d914      	bls.n	8006512 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	461a      	mov	r2, r3
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 ff84 	bl	800740c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006504:	2300      	movs	r3, #0
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f001 fcf0 	bl	8007ef0 <USBD_LL_PrepareReceive>
 8006510:	e03b      	b.n	800658a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	429a      	cmp	r2, r3
 800651c:	d11c      	bne.n	8006558 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006526:	429a      	cmp	r2, r3
 8006528:	d316      	bcc.n	8006558 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006534:	429a      	cmp	r2, r3
 8006536:	d20f      	bcs.n	8006558 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006538:	2200      	movs	r2, #0
 800653a:	2100      	movs	r1, #0
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 ff65 	bl	800740c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800654a:	2300      	movs	r3, #0
 800654c:	2200      	movs	r2, #0
 800654e:	2100      	movs	r1, #0
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f001 fccd 	bl	8007ef0 <USBD_LL_PrepareReceive>
 8006556:	e018      	b.n	800658a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b03      	cmp	r3, #3
 8006562:	d10b      	bne.n	800657c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800657c:	2180      	movs	r1, #128	; 0x80
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f001 fc0c 	bl	8007d9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 ff93 	bl	80074b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d122      	bne.n	80065da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7ff fe98 	bl	80062ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065a2:	e01a      	b.n	80065da <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d114      	bne.n	80065da <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00e      	beq.n	80065da <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	7afa      	ldrb	r2, [r7, #11]
 80065c6:	4611      	mov	r1, r2
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	4798      	blx	r3
 80065cc:	4603      	mov	r3, r0
 80065ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	e000      	b.n	80065dc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006614:	2303      	movs	r3, #3
 8006616:	e02f      	b.n	8006678 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6852      	ldr	r2, [r2, #4]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	4611      	mov	r1, r2
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006642:	2340      	movs	r3, #64	; 0x40
 8006644:	2200      	movs	r2, #0
 8006646:	2100      	movs	r1, #0
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fb62 	bl	8007d12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2240      	movs	r2, #64	; 0x40
 800665a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800665e:	2340      	movs	r3, #64	; 0x40
 8006660:	2200      	movs	r2, #0
 8006662:	2180      	movs	r1, #128	; 0x80
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 fb54 	bl	8007d12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2240      	movs	r2, #64	; 0x40
 8006674:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2204      	movs	r2, #4
 80066ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d106      	bne.n	80066ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800670e:	2303      	movs	r3, #3
 8006710:	e012      	b.n	8006738 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b03      	cmp	r3, #3
 800671c:	d10b      	bne.n	8006736 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006756:	2303      	movs	r3, #3
 8006758:	e014      	b.n	8006784 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d10d      	bne.n	8006782 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	4611      	mov	r1, r2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e014      	b.n	80067d0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d10d      	bne.n	80067ce <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	78fa      	ldrb	r2, [r7, #3]
 80067c8:	4611      	mov	r1, r2
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d009      	beq.n	800681c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6852      	ldr	r2, [r2, #4]
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	4611      	mov	r1, r2
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4798      	blx	r3
  }

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006826:	b480      	push	{r7}
 8006828:	b087      	sub	sp, #28
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	3301      	adds	r3, #1
 800683c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006844:	8a3b      	ldrh	r3, [r7, #16]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	b21a      	sxth	r2, r3
 800684a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800684e:	4313      	orrs	r3, r2
 8006850:	b21b      	sxth	r3, r3
 8006852:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006854:	89fb      	ldrh	r3, [r7, #14]
}
 8006856:	4618      	mov	r0, r3
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d005      	beq.n	800688a <USBD_StdDevReq+0x26>
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d853      	bhi.n	800692a <USBD_StdDevReq+0xc6>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00b      	beq.n	800689e <USBD_StdDevReq+0x3a>
 8006886:	2b20      	cmp	r3, #32
 8006888:	d14f      	bne.n	800692a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
 8006898:	4603      	mov	r3, r0
 800689a:	73fb      	strb	r3, [r7, #15]
      break;
 800689c:	e04a      	b.n	8006934 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b09      	cmp	r3, #9
 80068a4:	d83b      	bhi.n	800691e <USBD_StdDevReq+0xba>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <USBD_StdDevReq+0x48>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	08006901 	.word	0x08006901
 80068b0:	08006915 	.word	0x08006915
 80068b4:	0800691f 	.word	0x0800691f
 80068b8:	0800690b 	.word	0x0800690b
 80068bc:	0800691f 	.word	0x0800691f
 80068c0:	080068df 	.word	0x080068df
 80068c4:	080068d5 	.word	0x080068d5
 80068c8:	0800691f 	.word	0x0800691f
 80068cc:	080068f7 	.word	0x080068f7
 80068d0:	080068e9 	.word	0x080068e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f9de 	bl	8006c98 <USBD_GetDescriptor>
          break;
 80068dc:	e024      	b.n	8006928 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fb43 	bl	8006f6c <USBD_SetAddress>
          break;
 80068e6:	e01f      	b.n	8006928 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fb82 	bl	8006ff4 <USBD_SetConfig>
 80068f0:	4603      	mov	r3, r0
 80068f2:	73fb      	strb	r3, [r7, #15]
          break;
 80068f4:	e018      	b.n	8006928 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fc21 	bl	8007140 <USBD_GetConfig>
          break;
 80068fe:	e013      	b.n	8006928 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fc52 	bl	80071ac <USBD_GetStatus>
          break;
 8006908:	e00e      	b.n	8006928 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fc81 	bl	8007214 <USBD_SetFeature>
          break;
 8006912:	e009      	b.n	8006928 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fc90 	bl	800723c <USBD_ClrFeature>
          break;
 800691c:	e004      	b.n	8006928 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fce7 	bl	80072f4 <USBD_CtlError>
          break;
 8006926:	bf00      	nop
      }
      break;
 8006928:	e004      	b.n	8006934 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fce1 	bl	80072f4 <USBD_CtlError>
      break;
 8006932:	bf00      	nop
  }

  return ret;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop

08006940 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d005      	beq.n	8006966 <USBD_StdItfReq+0x26>
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d82f      	bhi.n	80069be <USBD_StdItfReq+0x7e>
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <USBD_StdItfReq+0x26>
 8006962:	2b20      	cmp	r3, #32
 8006964:	d12b      	bne.n	80069be <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696c:	b2db      	uxtb	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	2b02      	cmp	r3, #2
 8006972:	d81d      	bhi.n	80069b0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	889b      	ldrh	r3, [r3, #4]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b01      	cmp	r3, #1
 800697c:	d813      	bhi.n	80069a6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	88db      	ldrh	r3, [r3, #6]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d110      	bne.n	80069ba <USBD_StdItfReq+0x7a>
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10d      	bne.n	80069ba <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fd73 	bl	800748a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069a4:	e009      	b.n	80069ba <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fca3 	bl	80072f4 <USBD_CtlError>
          break;
 80069ae:	e004      	b.n	80069ba <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fc9e 	bl	80072f4 <USBD_CtlError>
          break;
 80069b8:	e000      	b.n	80069bc <USBD_StdItfReq+0x7c>
          break;
 80069ba:	bf00      	nop
      }
      break;
 80069bc:	e004      	b.n	80069c8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fc97 	bl	80072f4 <USBD_CtlError>
      break;
 80069c6:	bf00      	nop
  }

  return ret;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	889b      	ldrh	r3, [r3, #4]
 80069e4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d007      	beq.n	8006a02 <USBD_StdEPReq+0x30>
 80069f2:	2b40      	cmp	r3, #64	; 0x40
 80069f4:	f200 8145 	bhi.w	8006c82 <USBD_StdEPReq+0x2b0>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00c      	beq.n	8006a16 <USBD_StdEPReq+0x44>
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	f040 8140 	bne.w	8006c82 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]
      break;
 8006a14:	e13a      	b.n	8006c8c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d007      	beq.n	8006a2e <USBD_StdEPReq+0x5c>
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	f300 8129 	bgt.w	8006c76 <USBD_StdEPReq+0x2a4>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d07f      	beq.n	8006b28 <USBD_StdEPReq+0x156>
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d03c      	beq.n	8006aa6 <USBD_StdEPReq+0xd4>
 8006a2c:	e123      	b.n	8006c76 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d002      	beq.n	8006a40 <USBD_StdEPReq+0x6e>
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d016      	beq.n	8006a6c <USBD_StdEPReq+0x9a>
 8006a3e:	e02c      	b.n	8006a9a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00d      	beq.n	8006a62 <USBD_StdEPReq+0x90>
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	2b80      	cmp	r3, #128	; 0x80
 8006a4a:	d00a      	beq.n	8006a62 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 f9a3 	bl	8007d9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a56:	2180      	movs	r1, #128	; 0x80
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 f99f 	bl	8007d9c <USBD_LL_StallEP>
 8006a5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a60:	e020      	b.n	8006aa4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fc45 	bl	80072f4 <USBD_CtlError>
              break;
 8006a6a:	e01b      	b.n	8006aa4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	885b      	ldrh	r3, [r3, #2]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10e      	bne.n	8006a92 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00b      	beq.n	8006a92 <USBD_StdEPReq+0xc0>
 8006a7a:	7bbb      	ldrb	r3, [r7, #14]
 8006a7c:	2b80      	cmp	r3, #128	; 0x80
 8006a7e:	d008      	beq.n	8006a92 <USBD_StdEPReq+0xc0>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	88db      	ldrh	r3, [r3, #6]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d104      	bne.n	8006a92 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f985 	bl	8007d9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fcf9 	bl	800748a <USBD_CtlSendStatus>

              break;
 8006a98:	e004      	b.n	8006aa4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fc29 	bl	80072f4 <USBD_CtlError>
              break;
 8006aa2:	bf00      	nop
          }
          break;
 8006aa4:	e0ec      	b.n	8006c80 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d002      	beq.n	8006ab8 <USBD_StdEPReq+0xe6>
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d016      	beq.n	8006ae4 <USBD_StdEPReq+0x112>
 8006ab6:	e030      	b.n	8006b1a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00d      	beq.n	8006ada <USBD_StdEPReq+0x108>
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	2b80      	cmp	r3, #128	; 0x80
 8006ac2:	d00a      	beq.n	8006ada <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ac4:	7bbb      	ldrb	r3, [r7, #14]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 f967 	bl	8007d9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ace:	2180      	movs	r1, #128	; 0x80
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 f963 	bl	8007d9c <USBD_LL_StallEP>
 8006ad6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ad8:	e025      	b.n	8006b26 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fc09 	bl	80072f4 <USBD_CtlError>
              break;
 8006ae2:	e020      	b.n	8006b26 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	885b      	ldrh	r3, [r3, #2]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d11b      	bne.n	8006b24 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 f96d 	bl	8007dda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fcc2 	bl	800748a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006b18:	e004      	b.n	8006b24 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fbe9 	bl	80072f4 <USBD_CtlError>
              break;
 8006b22:	e000      	b.n	8006b26 <USBD_StdEPReq+0x154>
              break;
 8006b24:	bf00      	nop
          }
          break;
 8006b26:	e0ab      	b.n	8006c80 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d002      	beq.n	8006b3a <USBD_StdEPReq+0x168>
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d032      	beq.n	8006b9e <USBD_StdEPReq+0x1cc>
 8006b38:	e097      	b.n	8006c6a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <USBD_StdEPReq+0x17e>
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d004      	beq.n	8006b50 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fbd3 	bl	80072f4 <USBD_CtlError>
                break;
 8006b4e:	e091      	b.n	8006c74 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	da0b      	bge.n	8006b70 <USBD_StdEPReq+0x19e>
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	3310      	adds	r3, #16
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	e00b      	b.n	8006b88 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4413      	add	r3, r2
 8006b86:	3304      	adds	r3, #4
 8006b88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2202      	movs	r2, #2
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fc1d 	bl	80073d6 <USBD_CtlSendData>
              break;
 8006b9c:	e06a      	b.n	8006c74 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	da11      	bge.n	8006bca <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	f003 020f 	and.w	r2, r3, #15
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3324      	adds	r3, #36	; 0x24
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d117      	bne.n	8006bf0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fb96 	bl	80072f4 <USBD_CtlError>
                  break;
 8006bc8:	e054      	b.n	8006c74 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	f003 020f 	and.w	r2, r3, #15
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fb83 	bl	80072f4 <USBD_CtlError>
                  break;
 8006bee:	e041      	b.n	8006c74 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	da0b      	bge.n	8006c10 <USBD_StdEPReq+0x23e>
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	3310      	adds	r3, #16
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	e00b      	b.n	8006c28 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	4413      	add	r3, r2
 8006c26:	3304      	adds	r3, #4
 8006c28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <USBD_StdEPReq+0x264>
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	2b80      	cmp	r3, #128	; 0x80
 8006c34:	d103      	bne.n	8006c3e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	e00e      	b.n	8006c5c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 f8e8 	bl	8007e18 <USBD_LL_IsStallEP>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2201      	movs	r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e002      	b.n	8006c5c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fbb7 	bl	80073d6 <USBD_CtlSendData>
              break;
 8006c68:	e004      	b.n	8006c74 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fb41 	bl	80072f4 <USBD_CtlError>
              break;
 8006c72:	bf00      	nop
          }
          break;
 8006c74:	e004      	b.n	8006c80 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fb3b 	bl	80072f4 <USBD_CtlError>
          break;
 8006c7e:	bf00      	nop
      }
      break;
 8006c80:	e004      	b.n	8006c8c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fb35 	bl	80072f4 <USBD_CtlError>
      break;
 8006c8a:	bf00      	nop
  }

  return ret;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	885b      	ldrh	r3, [r3, #2]
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	2b06      	cmp	r3, #6
 8006cba:	f200 8128 	bhi.w	8006f0e <USBD_GetDescriptor+0x276>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <USBD_GetDescriptor+0x2c>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006ce1 	.word	0x08006ce1
 8006cc8:	08006cf9 	.word	0x08006cf9
 8006ccc:	08006d39 	.word	0x08006d39
 8006cd0:	08006f0f 	.word	0x08006f0f
 8006cd4:	08006f0f 	.word	0x08006f0f
 8006cd8:	08006eaf 	.word	0x08006eaf
 8006cdc:	08006edb 	.word	0x08006edb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	7c12      	ldrb	r2, [r2, #16]
 8006cec:	f107 0108 	add.w	r1, r7, #8
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
 8006cf4:	60f8      	str	r0, [r7, #12]
      break;
 8006cf6:	e112      	b.n	8006f1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7c1b      	ldrb	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10d      	bne.n	8006d1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	f107 0208 	add.w	r2, r7, #8
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
 8006d10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3301      	adds	r3, #1
 8006d16:	2202      	movs	r2, #2
 8006d18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d1a:	e100      	b.n	8006f1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	f107 0208 	add.w	r2, r7, #8
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
 8006d2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3301      	adds	r3, #1
 8006d32:	2202      	movs	r2, #2
 8006d34:	701a      	strb	r2, [r3, #0]
      break;
 8006d36:	e0f2      	b.n	8006f1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	885b      	ldrh	r3, [r3, #2]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b05      	cmp	r3, #5
 8006d40:	f200 80ac 	bhi.w	8006e9c <USBD_GetDescriptor+0x204>
 8006d44:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <USBD_GetDescriptor+0xb4>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d65 	.word	0x08006d65
 8006d50:	08006d99 	.word	0x08006d99
 8006d54:	08006dcd 	.word	0x08006dcd
 8006d58:	08006e01 	.word	0x08006e01
 8006d5c:	08006e35 	.word	0x08006e35
 8006d60:	08006e69 	.word	0x08006e69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7c12      	ldrb	r2, [r2, #16]
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d86:	e091      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fab2 	bl	80072f4 <USBD_CtlError>
            err++;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	3301      	adds	r3, #1
 8006d94:	72fb      	strb	r3, [r7, #11]
          break;
 8006d96:	e089      	b.n	8006eac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7c12      	ldrb	r2, [r2, #16]
 8006db0:	f107 0108 	add.w	r1, r7, #8
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
 8006db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dba:	e077      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa98 	bl	80072f4 <USBD_CtlError>
            err++;
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dca:	e06f      	b.n	8006eac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	7c12      	ldrb	r2, [r2, #16]
 8006de4:	f107 0108 	add.w	r1, r7, #8
 8006de8:	4610      	mov	r0, r2
 8006dea:	4798      	blx	r3
 8006dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dee:	e05d      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa7e 	bl	80072f4 <USBD_CtlError>
            err++;
 8006df8:	7afb      	ldrb	r3, [r7, #11]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dfe:	e055      	b.n	8006eac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7c12      	ldrb	r2, [r2, #16]
 8006e18:	f107 0108 	add.w	r1, r7, #8
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
 8006e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e22:	e043      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa64 	bl	80072f4 <USBD_CtlError>
            err++;
 8006e2c:	7afb      	ldrb	r3, [r7, #11]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	72fb      	strb	r3, [r7, #11]
          break;
 8006e32:	e03b      	b.n	8006eac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	7c12      	ldrb	r2, [r2, #16]
 8006e4c:	f107 0108 	add.w	r1, r7, #8
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e56:	e029      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa4a 	bl	80072f4 <USBD_CtlError>
            err++;
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	3301      	adds	r3, #1
 8006e64:	72fb      	strb	r3, [r7, #11]
          break;
 8006e66:	e021      	b.n	8006eac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	7c12      	ldrb	r2, [r2, #16]
 8006e80:	f107 0108 	add.w	r1, r7, #8
 8006e84:	4610      	mov	r0, r2
 8006e86:	4798      	blx	r3
 8006e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e8a:	e00f      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fa30 	bl	80072f4 <USBD_CtlError>
            err++;
 8006e94:	7afb      	ldrb	r3, [r7, #11]
 8006e96:	3301      	adds	r3, #1
 8006e98:	72fb      	strb	r3, [r7, #11]
          break;
 8006e9a:	e007      	b.n	8006eac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa28 	bl	80072f4 <USBD_CtlError>
          err++;
 8006ea4:	7afb      	ldrb	r3, [r7, #11]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006eaa:	bf00      	nop
      }
      break;
 8006eac:	e037      	b.n	8006f1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7c1b      	ldrb	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebe:	f107 0208 	add.w	r2, r7, #8
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4798      	blx	r3
 8006ec6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ec8:	e029      	b.n	8006f1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa11 	bl	80072f4 <USBD_CtlError>
        err++;
 8006ed2:	7afb      	ldrb	r3, [r7, #11]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ed8:	e021      	b.n	8006f1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	7c1b      	ldrb	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	f107 0208 	add.w	r2, r7, #8
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4798      	blx	r3
 8006ef2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	2207      	movs	r2, #7
 8006efa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006efc:	e00f      	b.n	8006f1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f9f7 	bl	80072f4 <USBD_CtlError>
        err++;
 8006f06:	7afb      	ldrb	r3, [r7, #11]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f0c:	e007      	b.n	8006f1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f9ef 	bl	80072f4 <USBD_CtlError>
      err++;
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f1c:	bf00      	nop
  }

  if (err != 0U)
 8006f1e:	7afb      	ldrb	r3, [r7, #11]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d11e      	bne.n	8006f62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	88db      	ldrh	r3, [r3, #6]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d016      	beq.n	8006f5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f2c:	893b      	ldrh	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00e      	beq.n	8006f50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	88da      	ldrh	r2, [r3, #6]
 8006f36:	893b      	ldrh	r3, [r7, #8]
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	bf28      	it	cs
 8006f3c:	4613      	movcs	r3, r2
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f42:	893b      	ldrh	r3, [r7, #8]
 8006f44:	461a      	mov	r2, r3
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa44 	bl	80073d6 <USBD_CtlSendData>
 8006f4e:	e009      	b.n	8006f64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f9ce 	bl	80072f4 <USBD_CtlError>
 8006f58:	e004      	b.n	8006f64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa95 	bl	800748a <USBD_CtlSendStatus>
 8006f60:	e000      	b.n	8006f64 <USBD_GetDescriptor+0x2cc>
    return;
 8006f62:	bf00      	nop
  }
}
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop

08006f6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	889b      	ldrh	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d131      	bne.n	8006fe2 <USBD_SetAddress+0x76>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	88db      	ldrh	r3, [r3, #6]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d12d      	bne.n	8006fe2 <USBD_SetAddress+0x76>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	885b      	ldrh	r3, [r3, #2]
 8006f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f8c:	d829      	bhi.n	8006fe2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	885b      	ldrh	r3, [r3, #2]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d104      	bne.n	8006fb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f9a3 	bl	80072f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fae:	e01d      	b.n	8006fec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	7bfa      	ldrb	r2, [r7, #15]
 8006fb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 ff57 	bl	8007e70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa61 	bl	800748a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd6:	e009      	b.n	8006fec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe0:	e004      	b.n	8006fec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f985 	bl	80072f4 <USBD_CtlError>
  }
}
 8006fea:	bf00      	nop
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	885b      	ldrh	r3, [r3, #2]
 8007006:	b2da      	uxtb	r2, r3
 8007008:	4b4c      	ldr	r3, [pc, #304]	; (800713c <USBD_SetConfig+0x148>)
 800700a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800700c:	4b4b      	ldr	r3, [pc, #300]	; (800713c <USBD_SetConfig+0x148>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d905      	bls.n	8007020 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f96c 	bl	80072f4 <USBD_CtlError>
    return USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	e088      	b.n	8007132 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d002      	beq.n	8007032 <USBD_SetConfig+0x3e>
 800702c:	2b03      	cmp	r3, #3
 800702e:	d025      	beq.n	800707c <USBD_SetConfig+0x88>
 8007030:	e071      	b.n	8007116 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007032:	4b42      	ldr	r3, [pc, #264]	; (800713c <USBD_SetConfig+0x148>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d01c      	beq.n	8007074 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800703a:	4b40      	ldr	r3, [pc, #256]	; (800713c <USBD_SetConfig+0x148>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007044:	4b3d      	ldr	r3, [pc, #244]	; (800713c <USBD_SetConfig+0x148>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff f948 	bl	80062e0 <USBD_SetClassConfig>
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f949 	bl	80072f4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007062:	e065      	b.n	8007130 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa10 	bl	800748a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2203      	movs	r2, #3
 800706e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007072:	e05d      	b.n	8007130 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fa08 	bl	800748a <USBD_CtlSendStatus>
      break;
 800707a:	e059      	b.n	8007130 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800707c:	4b2f      	ldr	r3, [pc, #188]	; (800713c <USBD_SetConfig+0x148>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d112      	bne.n	80070aa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800708c:	4b2b      	ldr	r3, [pc, #172]	; (800713c <USBD_SetConfig+0x148>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	461a      	mov	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007096:	4b29      	ldr	r3, [pc, #164]	; (800713c <USBD_SetConfig+0x148>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff f93b 	bl	8006318 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f9f1 	bl	800748a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070a8:	e042      	b.n	8007130 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80070aa:	4b24      	ldr	r3, [pc, #144]	; (800713c <USBD_SetConfig+0x148>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d02a      	beq.n	800710e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff f929 	bl	8006318 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070c6:	4b1d      	ldr	r3, [pc, #116]	; (800713c <USBD_SetConfig+0x148>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070d0:	4b1a      	ldr	r3, [pc, #104]	; (800713c <USBD_SetConfig+0x148>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff f902 	bl	80062e0 <USBD_SetClassConfig>
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00f      	beq.n	8007106 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f903 	bl	80072f4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff f90e 	bl	8006318 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007104:	e014      	b.n	8007130 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f9bf 	bl	800748a <USBD_CtlSendStatus>
      break;
 800710c:	e010      	b.n	8007130 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9bb 	bl	800748a <USBD_CtlSendStatus>
      break;
 8007114:	e00c      	b.n	8007130 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f8eb 	bl	80072f4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800711e:	4b07      	ldr	r3, [pc, #28]	; (800713c <USBD_SetConfig+0x148>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff f8f7 	bl	8006318 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800712a:	2303      	movs	r3, #3
 800712c:	73fb      	strb	r3, [r7, #15]
      break;
 800712e:	bf00      	nop
  }

  return ret;
 8007130:	7bfb      	ldrb	r3, [r7, #15]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20000268 	.word	0x20000268

08007140 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	88db      	ldrh	r3, [r3, #6]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d004      	beq.n	800715c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f8cd 	bl	80072f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800715a:	e023      	b.n	80071a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	dc02      	bgt.n	800716e <USBD_GetConfig+0x2e>
 8007168:	2b00      	cmp	r3, #0
 800716a:	dc03      	bgt.n	8007174 <USBD_GetConfig+0x34>
 800716c:	e015      	b.n	800719a <USBD_GetConfig+0x5a>
 800716e:	2b03      	cmp	r3, #3
 8007170:	d00b      	beq.n	800718a <USBD_GetConfig+0x4a>
 8007172:	e012      	b.n	800719a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3308      	adds	r3, #8
 800717e:	2201      	movs	r2, #1
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f927 	bl	80073d6 <USBD_CtlSendData>
        break;
 8007188:	e00c      	b.n	80071a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3304      	adds	r3, #4
 800718e:	2201      	movs	r2, #1
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f91f 	bl	80073d6 <USBD_CtlSendData>
        break;
 8007198:	e004      	b.n	80071a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f8a9 	bl	80072f4 <USBD_CtlError>
        break;
 80071a2:	bf00      	nop
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d81e      	bhi.n	8007202 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	88db      	ldrh	r3, [r3, #6]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d004      	beq.n	80071d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f890 	bl	80072f4 <USBD_CtlError>
        break;
 80071d4:	e01a      	b.n	800720c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f043 0202 	orr.w	r2, r3, #2
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	330c      	adds	r3, #12
 80071f6:	2202      	movs	r2, #2
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f8eb 	bl	80073d6 <USBD_CtlSendData>
      break;
 8007200:	e004      	b.n	800720c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f875 	bl	80072f4 <USBD_CtlError>
      break;
 800720a:	bf00      	nop
  }
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	885b      	ldrh	r3, [r3, #2]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d106      	bne.n	8007234 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f92b 	bl	800748a <USBD_CtlSendStatus>
  }
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724c:	b2db      	uxtb	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	2b02      	cmp	r3, #2
 8007252:	d80b      	bhi.n	800726c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	885b      	ldrh	r3, [r3, #2]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d10c      	bne.n	8007276 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f910 	bl	800748a <USBD_CtlSendStatus>
      }
      break;
 800726a:	e004      	b.n	8007276 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f840 	bl	80072f4 <USBD_CtlError>
      break;
 8007274:	e000      	b.n	8007278 <USBD_ClrFeature+0x3c>
      break;
 8007276:	bf00      	nop
  }
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3301      	adds	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	781a      	ldrb	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3301      	adds	r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7ff fabb 	bl	8006826 <SWAPBYTE>
 80072b0:	4603      	mov	r3, r0
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f7ff faae 	bl	8006826 <SWAPBYTE>
 80072ca:	4603      	mov	r3, r0
 80072cc:	461a      	mov	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff faa1 	bl	8006826 <SWAPBYTE>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	80da      	strh	r2, [r3, #6]
}
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80072fe:	2180      	movs	r1, #128	; 0x80
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fd4b 	bl	8007d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007306:	2100      	movs	r1, #0
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fd47 	bl	8007d9c <USBD_LL_StallEP>
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d036      	beq.n	800739a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007330:	6938      	ldr	r0, [r7, #16]
 8007332:	f000 f836 	bl	80073a2 <USBD_GetLen>
 8007336:	4603      	mov	r3, r0
 8007338:	3301      	adds	r3, #1
 800733a:	b29b      	uxth	r3, r3
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	4413      	add	r3, r2
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	7812      	ldrb	r2, [r2, #0]
 800734e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	3301      	adds	r3, #1
 8007354:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	4413      	add	r3, r2
 800735c:	2203      	movs	r2, #3
 800735e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	3301      	adds	r3, #1
 8007364:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007366:	e013      	b.n	8007390 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	4413      	add	r3, r2
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	7812      	ldrb	r2, [r2, #0]
 8007372:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	3301      	adds	r3, #1
 8007378:	613b      	str	r3, [r7, #16]
    idx++;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	3301      	adds	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	4413      	add	r3, r2
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
    idx++;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	3301      	adds	r3, #1
 800738e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e7      	bne.n	8007368 <USBD_GetString+0x52>
 8007398:	e000      	b.n	800739c <USBD_GetString+0x86>
    return;
 800739a:	bf00      	nop
  }
}
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073b2:	e005      	b.n	80073c0 <USBD_GetLen+0x1e>
  {
    len++;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	3301      	adds	r3, #1
 80073b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	3301      	adds	r3, #1
 80073be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f5      	bne.n	80073b4 <USBD_GetLen+0x12>
  }

  return len;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2202      	movs	r2, #2
 80073e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	2100      	movs	r1, #0
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fd56 	bl	8007eae <USBD_LL_Transmit>

  return USBD_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	2100      	movs	r1, #0
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fd45 	bl	8007eae <USBD_LL_Transmit>

  return USBD_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2203      	movs	r2, #3
 800743e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	2100      	movs	r1, #0
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fd49 	bl	8007ef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	2100      	movs	r1, #0
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fd38 	bl	8007ef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2204      	movs	r2, #4
 8007496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800749a:	2300      	movs	r3, #0
 800749c:	2200      	movs	r2, #0
 800749e:	2100      	movs	r1, #0
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fd04 	bl	8007eae <USBD_LL_Transmit>

  return USBD_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2205      	movs	r2, #5
 80074bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074c0:	2300      	movs	r3, #0
 80074c2:	2200      	movs	r2, #0
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fd12 	bl	8007ef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074dc:	2200      	movs	r2, #0
 80074de:	4912      	ldr	r1, [pc, #72]	; (8007528 <MX_USB_DEVICE_Init+0x50>)
 80074e0:	4812      	ldr	r0, [pc, #72]	; (800752c <MX_USB_DEVICE_Init+0x54>)
 80074e2:	f7fe fe8f 	bl	8006204 <USBD_Init>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074ec:	f7f9 f8e4 	bl	80006b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074f0:	490f      	ldr	r1, [pc, #60]	; (8007530 <MX_USB_DEVICE_Init+0x58>)
 80074f2:	480e      	ldr	r0, [pc, #56]	; (800752c <MX_USB_DEVICE_Init+0x54>)
 80074f4:	f7fe feb6 	bl	8006264 <USBD_RegisterClass>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074fe:	f7f9 f8db 	bl	80006b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007502:	490c      	ldr	r1, [pc, #48]	; (8007534 <MX_USB_DEVICE_Init+0x5c>)
 8007504:	4809      	ldr	r0, [pc, #36]	; (800752c <MX_USB_DEVICE_Init+0x54>)
 8007506:	f7fe fe07 	bl	8006118 <USBD_CDC_RegisterInterface>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007510:	f7f9 f8d2 	bl	80006b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007514:	4805      	ldr	r0, [pc, #20]	; (800752c <MX_USB_DEVICE_Init+0x54>)
 8007516:	f7fe fecc 	bl	80062b2 <USBD_Start>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007520:	f7f9 f8ca 	bl	80006b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007524:	bf00      	nop
 8007526:	bd80      	pop	{r7, pc}
 8007528:	20000134 	.word	0x20000134
 800752c:	2000026c 	.word	0x2000026c
 8007530:	20000018 	.word	0x20000018
 8007534:	20000120 	.word	0x20000120

08007538 <cdcDataIn>:
	}
	return ret;
}

void cdcDataIn(uint8_t rx_data)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	4603      	mov	r3, r0
 8007540:	71fb      	strb	r3, [r7, #7]
	uint32_t next_rx_in;
	next_rx_in = (rx_in + 1) % rx_len;
 8007542:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <cdcDataIn+0x48>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	4a0e      	ldr	r2, [pc, #56]	; (8007584 <cdcDataIn+0x4c>)
 800754a:	6812      	ldr	r2, [r2, #0]
 800754c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007550:	fb01 f202 	mul.w	r2, r1, r2
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
	rx_buf[rx_in] = rx_data;
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <cdcDataIn+0x48>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	490a      	ldr	r1, [pc, #40]	; (8007588 <cdcDataIn+0x50>)
 800755e:	79fa      	ldrb	r2, [r7, #7]
 8007560:	54ca      	strb	r2, [r1, r3]
	if(next_rx_in != rx_out)
 8007562:	4b0a      	ldr	r3, [pc, #40]	; (800758c <cdcDataIn+0x54>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	429a      	cmp	r2, r3
 800756a:	d002      	beq.n	8007572 <cdcDataIn+0x3a>
	{
		rx_in = next_rx_in;
 800756c:	4a04      	ldr	r2, [pc, #16]	; (8007580 <cdcDataIn+0x48>)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6013      	str	r3, [r2, #0]
	}
}
 8007572:	bf00      	nop
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	20000544 	.word	0x20000544
 8007584:	2000011c 	.word	0x2000011c
 8007588:	2000054c 	.word	0x2000054c
 800758c:	20000548 	.word	0x20000548

08007590 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007594:	2200      	movs	r2, #0
 8007596:	4905      	ldr	r1, [pc, #20]	; (80075ac <CDC_Init_FS+0x1c>)
 8007598:	4805      	ldr	r0, [pc, #20]	; (80075b0 <CDC_Init_FS+0x20>)
 800759a:	f7fe fdd2 	bl	8006142 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800759e:	4905      	ldr	r1, [pc, #20]	; (80075b4 <CDC_Init_FS+0x24>)
 80075a0:	4803      	ldr	r0, [pc, #12]	; (80075b0 <CDC_Init_FS+0x20>)
 80075a2:	f7fe fdec 	bl	800617e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000a4c 	.word	0x20000a4c
 80075b0:	2000026c 	.word	0x2000026c
 80075b4:	2000064c 	.word	0x2000064c

080075b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075be:	4618      	mov	r0, r3
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	6039      	str	r1, [r7, #0]
 80075d2:	71fb      	strb	r3, [r7, #7]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b23      	cmp	r3, #35	; 0x23
 80075dc:	f200 80a3 	bhi.w	8007726 <CDC_Control_FS+0x15e>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <CDC_Control_FS+0x20>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	08007727 	.word	0x08007727
 80075ec:	08007727 	.word	0x08007727
 80075f0:	08007727 	.word	0x08007727
 80075f4:	08007727 	.word	0x08007727
 80075f8:	08007727 	.word	0x08007727
 80075fc:	08007727 	.word	0x08007727
 8007600:	08007727 	.word	0x08007727
 8007604:	08007727 	.word	0x08007727
 8007608:	08007727 	.word	0x08007727
 800760c:	08007727 	.word	0x08007727
 8007610:	08007727 	.word	0x08007727
 8007614:	08007727 	.word	0x08007727
 8007618:	08007727 	.word	0x08007727
 800761c:	08007727 	.word	0x08007727
 8007620:	08007727 	.word	0x08007727
 8007624:	08007727 	.word	0x08007727
 8007628:	08007727 	.word	0x08007727
 800762c:	08007727 	.word	0x08007727
 8007630:	08007727 	.word	0x08007727
 8007634:	08007727 	.word	0x08007727
 8007638:	08007727 	.word	0x08007727
 800763c:	08007727 	.word	0x08007727
 8007640:	08007727 	.word	0x08007727
 8007644:	08007727 	.word	0x08007727
 8007648:	08007727 	.word	0x08007727
 800764c:	08007727 	.word	0x08007727
 8007650:	08007727 	.word	0x08007727
 8007654:	08007727 	.word	0x08007727
 8007658:	08007727 	.word	0x08007727
 800765c:	08007727 	.word	0x08007727
 8007660:	08007727 	.word	0x08007727
 8007664:	08007727 	.word	0x08007727
 8007668:	08007679 	.word	0x08007679
 800766c:	080076d3 	.word	0x080076d3
 8007670:	08007727 	.word	0x08007727
 8007674:	08007727 	.word	0x08007727
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING: // MCU�?? ?��?��?���?? set
    	LineCoding.bitrate 		 = (uint32_t)(pbuf[0]);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	4b2e      	ldr	r3, [pc, #184]	; (8007738 <CDC_Control_FS+0x170>)
 8007680:	601a      	str	r2, [r3, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[1]) << 8;
 8007682:	4b2d      	ldr	r3, [pc, #180]	; (8007738 <CDC_Control_FS+0x170>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	3301      	adds	r3, #1
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	4313      	orrs	r3, r2
 8007690:	4a29      	ldr	r2, [pc, #164]	; (8007738 <CDC_Control_FS+0x170>)
 8007692:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[2]) << 16;
 8007694:	4b28      	ldr	r3, [pc, #160]	; (8007738 <CDC_Control_FS+0x170>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	3302      	adds	r3, #2
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	041b      	lsls	r3, r3, #16
 80076a0:	4313      	orrs	r3, r2
 80076a2:	4a25      	ldr	r2, [pc, #148]	; (8007738 <CDC_Control_FS+0x170>)
 80076a4:	6013      	str	r3, [r2, #0]
    	LineCoding.bitrate 		|= (uint32_t)(pbuf[3]) << 24;
 80076a6:	4b24      	ldr	r3, [pc, #144]	; (8007738 <CDC_Control_FS+0x170>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	3303      	adds	r3, #3
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	061b      	lsls	r3, r3, #24
 80076b2:	4313      	orrs	r3, r2
 80076b4:	4a20      	ldr	r2, [pc, #128]	; (8007738 <CDC_Control_FS+0x170>)
 80076b6:	6013      	str	r3, [r2, #0]
    	LineCoding.format 		 = pbuf[4];
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	791a      	ldrb	r2, [r3, #4]
 80076bc:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <CDC_Control_FS+0x170>)
 80076be:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype  = pbuf[5];
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	795a      	ldrb	r2, [r3, #5]
 80076c4:	4b1c      	ldr	r3, [pc, #112]	; (8007738 <CDC_Control_FS+0x170>)
 80076c6:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype 	 = pbuf[6];
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	799a      	ldrb	r2, [r3, #6]
 80076cc:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <CDC_Control_FS+0x170>)
 80076ce:	719a      	strb	r2, [r3, #6]
    break;
 80076d0:	e02a      	b.n	8007728 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING: // PC�?? ?��?��?���?? ?��?���??
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80076d2:	4b19      	ldr	r3, [pc, #100]	; (8007738 <CDC_Control_FS+0x170>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80076dc:	4b16      	ldr	r3, [pc, #88]	; (8007738 <CDC_Control_FS+0x170>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	0a1a      	lsrs	r2, r3, #8
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	3301      	adds	r3, #1
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80076ea:	4b13      	ldr	r3, [pc, #76]	; (8007738 <CDC_Control_FS+0x170>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	0c1a      	lsrs	r2, r3, #16
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	3302      	adds	r3, #2
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80076f8:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <CDC_Control_FS+0x170>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	0e1a      	lsrs	r2, r3, #24
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	3303      	adds	r3, #3
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	3304      	adds	r3, #4
 800770a:	4a0b      	ldr	r2, [pc, #44]	; (8007738 <CDC_Control_FS+0x170>)
 800770c:	7912      	ldrb	r2, [r2, #4]
 800770e:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	3305      	adds	r3, #5
 8007714:	4a08      	ldr	r2, [pc, #32]	; (8007738 <CDC_Control_FS+0x170>)
 8007716:	7952      	ldrb	r2, [r2, #5]
 8007718:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	3306      	adds	r3, #6
 800771e:	4a06      	ldr	r2, [pc, #24]	; (8007738 <CDC_Control_FS+0x170>)
 8007720:	7992      	ldrb	r2, [r2, #6]
 8007722:	701a      	strb	r2, [r3, #0]
    break;
 8007724:	e000      	b.n	8007728 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007726:	bf00      	nop
  }

  return (USBD_OK);
 8007728:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	2000053c 	.word	0x2000053c

0800773c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	480e      	ldr	r0, [pc, #56]	; (8007784 <CDC_Receive_FS+0x48>)
 800774a:	f7fe fd18 	bl	800617e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800774e:	480d      	ldr	r0, [pc, #52]	; (8007784 <CDC_Receive_FS+0x48>)
 8007750:	f7fe fd2e 	bl	80061b0 <USBD_CDC_ReceivePacket>

  for(int i = 0 ; i < *Len ; i++)
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	e009      	b.n	800776e <CDC_Receive_FS+0x32>
  {
  	cdcDataIn(Buf[i]);// ?��?��?��?�� 발생?�� data in
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	4413      	add	r3, r2
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fee8 	bl	8007538 <cdcDataIn>
  for(int i = 0 ; i < *Len ; i++)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	429a      	cmp	r2, r3
 8007776:	d8f0      	bhi.n	800775a <CDC_Receive_FS+0x1e>
  }
  return (USBD_OK);
 8007778:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	2000026c 	.word	0x2000026c

08007788 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800779a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
	...

080077ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2212      	movs	r2, #18
 80077bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077be:	4b03      	ldr	r3, [pc, #12]	; (80077cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	20000150 	.word	0x20000150

080077d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2204      	movs	r2, #4
 80077e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	20000164 	.word	0x20000164

080077f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d105      	bne.n	8007812 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	4907      	ldr	r1, [pc, #28]	; (8007828 <USBD_FS_ProductStrDescriptor+0x34>)
 800780a:	4808      	ldr	r0, [pc, #32]	; (800782c <USBD_FS_ProductStrDescriptor+0x38>)
 800780c:	f7ff fd83 	bl	8007316 <USBD_GetString>
 8007810:	e004      	b.n	800781c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	4904      	ldr	r1, [pc, #16]	; (8007828 <USBD_FS_ProductStrDescriptor+0x34>)
 8007816:	4805      	ldr	r0, [pc, #20]	; (800782c <USBD_FS_ProductStrDescriptor+0x38>)
 8007818:	f7ff fd7d 	bl	8007316 <USBD_GetString>
  }
  return USBD_StrDesc;
 800781c:	4b02      	ldr	r3, [pc, #8]	; (8007828 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000e4c 	.word	0x20000e4c
 800782c:	08008050 	.word	0x08008050

08007830 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	6039      	str	r1, [r7, #0]
 800783a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	4904      	ldr	r1, [pc, #16]	; (8007850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007840:	4804      	ldr	r0, [pc, #16]	; (8007854 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007842:	f7ff fd68 	bl	8007316 <USBD_GetString>
  return USBD_StrDesc;
 8007846:	4b02      	ldr	r3, [pc, #8]	; (8007850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000e4c 	.word	0x20000e4c
 8007854:	08008068 	.word	0x08008068

08007858 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	6039      	str	r1, [r7, #0]
 8007862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	221a      	movs	r2, #26
 8007868:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800786a:	f000 f843 	bl	80078f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800786e:	4b02      	ldr	r3, [pc, #8]	; (8007878 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20000168 	.word	0x20000168

0800787c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	6039      	str	r1, [r7, #0]
 8007886:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d105      	bne.n	800789a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4907      	ldr	r1, [pc, #28]	; (80078b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007892:	4808      	ldr	r0, [pc, #32]	; (80078b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007894:	f7ff fd3f 	bl	8007316 <USBD_GetString>
 8007898:	e004      	b.n	80078a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	4904      	ldr	r1, [pc, #16]	; (80078b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800789e:	4805      	ldr	r0, [pc, #20]	; (80078b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078a0:	f7ff fd39 	bl	8007316 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078a4:	4b02      	ldr	r3, [pc, #8]	; (80078b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000e4c 	.word	0x20000e4c
 80078b4:	0800807c 	.word	0x0800807c

080078b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	6039      	str	r1, [r7, #0]
 80078c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d105      	bne.n	80078d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4907      	ldr	r1, [pc, #28]	; (80078ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078ce:	4808      	ldr	r0, [pc, #32]	; (80078f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078d0:	f7ff fd21 	bl	8007316 <USBD_GetString>
 80078d4:	e004      	b.n	80078e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	4904      	ldr	r1, [pc, #16]	; (80078ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078da:	4805      	ldr	r0, [pc, #20]	; (80078f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078dc:	f7ff fd1b 	bl	8007316 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078e0:	4b02      	ldr	r3, [pc, #8]	; (80078ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000e4c 	.word	0x20000e4c
 80078f0:	08008088 	.word	0x08008088

080078f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078fa:	4b0f      	ldr	r3, [pc, #60]	; (8007938 <Get_SerialNum+0x44>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007900:	4b0e      	ldr	r3, [pc, #56]	; (800793c <Get_SerialNum+0x48>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007906:	4b0e      	ldr	r3, [pc, #56]	; (8007940 <Get_SerialNum+0x4c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4413      	add	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d009      	beq.n	800792e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800791a:	2208      	movs	r2, #8
 800791c:	4909      	ldr	r1, [pc, #36]	; (8007944 <Get_SerialNum+0x50>)
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f814 	bl	800794c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007924:	2204      	movs	r2, #4
 8007926:	4908      	ldr	r1, [pc, #32]	; (8007948 <Get_SerialNum+0x54>)
 8007928:	68b8      	ldr	r0, [r7, #8]
 800792a:	f000 f80f 	bl	800794c <IntToUnicode>
  }
}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	1fff7a10 	.word	0x1fff7a10
 800793c:	1fff7a14 	.word	0x1fff7a14
 8007940:	1fff7a18 	.word	0x1fff7a18
 8007944:	2000016a 	.word	0x2000016a
 8007948:	2000017a 	.word	0x2000017a

0800794c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800795e:	2300      	movs	r3, #0
 8007960:	75fb      	strb	r3, [r7, #23]
 8007962:	e027      	b.n	80079b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	0f1b      	lsrs	r3, r3, #28
 8007968:	2b09      	cmp	r3, #9
 800796a:	d80b      	bhi.n	8007984 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	0f1b      	lsrs	r3, r3, #28
 8007970:	b2da      	uxtb	r2, r3
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	4619      	mov	r1, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	440b      	add	r3, r1
 800797c:	3230      	adds	r2, #48	; 0x30
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	e00a      	b.n	800799a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	0f1b      	lsrs	r3, r3, #28
 8007988:	b2da      	uxtb	r2, r3
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	4619      	mov	r1, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	440b      	add	r3, r1
 8007994:	3237      	adds	r2, #55	; 0x37
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	3301      	adds	r3, #1
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	4413      	add	r3, r2
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	3301      	adds	r3, #1
 80079b2:	75fb      	strb	r3, [r7, #23]
 80079b4:	7dfa      	ldrb	r2, [r7, #23]
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d3d3      	bcc.n	8007964 <IntToUnicode+0x18>
  }
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
	...

080079cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08a      	sub	sp, #40	; 0x28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079d4:	f107 0314 	add.w	r3, r7, #20
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	605a      	str	r2, [r3, #4]
 80079de:	609a      	str	r2, [r3, #8]
 80079e0:	60da      	str	r2, [r3, #12]
 80079e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079ec:	d13a      	bne.n	8007a64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ee:	2300      	movs	r3, #0
 80079f0:	613b      	str	r3, [r7, #16]
 80079f2:	4b1e      	ldr	r3, [pc, #120]	; (8007a6c <HAL_PCD_MspInit+0xa0>)
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	4a1d      	ldr	r2, [pc, #116]	; (8007a6c <HAL_PCD_MspInit+0xa0>)
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	6313      	str	r3, [r2, #48]	; 0x30
 80079fe:	4b1b      	ldr	r3, [pc, #108]	; (8007a6c <HAL_PCD_MspInit+0xa0>)
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007a0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a10:	2302      	movs	r3, #2
 8007a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a1c:	230a      	movs	r3, #10
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a20:	f107 0314 	add.w	r3, r7, #20
 8007a24:	4619      	mov	r1, r3
 8007a26:	4812      	ldr	r0, [pc, #72]	; (8007a70 <HAL_PCD_MspInit+0xa4>)
 8007a28:	f7f9 fd1c 	bl	8001464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <HAL_PCD_MspInit+0xa0>)
 8007a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a30:	4a0e      	ldr	r2, [pc, #56]	; (8007a6c <HAL_PCD_MspInit+0xa0>)
 8007a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a36:	6353      	str	r3, [r2, #52]	; 0x34
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	4b0b      	ldr	r3, [pc, #44]	; (8007a6c <HAL_PCD_MspInit+0xa0>)
 8007a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a40:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <HAL_PCD_MspInit+0xa0>)
 8007a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a46:	6453      	str	r3, [r2, #68]	; 0x44
 8007a48:	4b08      	ldr	r3, [pc, #32]	; (8007a6c <HAL_PCD_MspInit+0xa0>)
 8007a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a54:	2200      	movs	r2, #0
 8007a56:	2100      	movs	r1, #0
 8007a58:	2043      	movs	r0, #67	; 0x43
 8007a5a:	f7f9 f950 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a5e:	2043      	movs	r0, #67	; 0x43
 8007a60:	f7f9 f969 	bl	8000d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a64:	bf00      	nop
 8007a66:	3728      	adds	r7, #40	; 0x28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40023800 	.word	0x40023800
 8007a70:	40020000 	.word	0x40020000

08007a74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	f7fe fc5c 	bl	8006348 <USBD_LL_SetupStage>
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	1a9b      	subs	r3, r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	78fb      	ldrb	r3, [r7, #3]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f7fe fc96 	bl	80063f2 <USBD_LL_DataOutStage>
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ae0:	78fa      	ldrb	r2, [r7, #3]
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	440b      	add	r3, r1
 8007aee:	3348      	adds	r3, #72	; 0x48
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	4619      	mov	r1, r3
 8007af6:	f7fe fcdf 	bl	80064b8 <USBD_LL_DataInStage>
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fe fdf3 	bl	80066fc <USBD_LL_SOF>
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b26:	2301      	movs	r3, #1
 8007b28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d001      	beq.n	8007b36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b32:	f7f8 fdc1 	bl	80006b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b3c:	7bfa      	ldrb	r2, [r7, #15]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fd9d 	bl	8006680 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fd49 	bl	80065e4 <USBD_LL_Reset>
}
 8007b52:	bf00      	nop
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe fd98 	bl	80066a0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6812      	ldr	r2, [r2, #0]
 8007b7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b82:	f043 0301 	orr.w	r3, r3, #1
 8007b86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d005      	beq.n	8007b9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b90:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <HAL_PCD_SuspendCallback+0x48>)
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	4a03      	ldr	r2, [pc, #12]	; (8007ba4 <HAL_PCD_SuspendCallback+0x48>)
 8007b96:	f043 0306 	orr.w	r3, r3, #6
 8007b9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	e000ed00 	.word	0xe000ed00

08007ba8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe fd88 	bl	80066cc <USBD_LL_Resume>
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bd6:	78fa      	ldrb	r2, [r7, #3]
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fdd6 	bl	800678c <USBD_LL_IsoOUTIncomplete>
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fd9e 	bl	8006740 <USBD_LL_IsoINIncomplete>
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fddc 	bl	80067d8 <USBD_LL_DevConnected>
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fdd9 	bl	80067ee <USBD_LL_DevDisconnected>
}
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d13c      	bne.n	8007cce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c54:	4a20      	ldr	r2, [pc, #128]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a1e      	ldr	r2, [pc, #120]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c64:	4b1c      	ldr	r3, [pc, #112]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c6c:	4b1a      	ldr	r3, [pc, #104]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c6e:	2204      	movs	r2, #4
 8007c70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c72:	4b19      	ldr	r3, [pc, #100]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c74:	2202      	movs	r2, #2
 8007c76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c78:	4b17      	ldr	r3, [pc, #92]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c7e:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c80:	2202      	movs	r2, #2
 8007c82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c84:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c8a:	4b13      	ldr	r3, [pc, #76]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c90:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c96:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ca2:	480d      	ldr	r0, [pc, #52]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007ca4:	f7f9 fd7b 	bl	800179e <HAL_PCD_Init>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007cae:	f7f8 fd03 	bl	80006b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007cb2:	2180      	movs	r1, #128	; 0x80
 8007cb4:	4808      	ldr	r0, [pc, #32]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007cb6:	f7fa fed8 	bl	8002a6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cba:	2240      	movs	r2, #64	; 0x40
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4806      	ldr	r0, [pc, #24]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007cc0:	f7fa fe8c 	bl	80029dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007cc4:	2280      	movs	r2, #128	; 0x80
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	4803      	ldr	r0, [pc, #12]	; (8007cd8 <USBD_LL_Init+0x94>)
 8007cca:	f7fa fe87 	bl	80029dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	2000104c 	.word	0x2000104c

08007cdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7f9 fe70 	bl	80019d8 <HAL_PCD_Start>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f942 	bl	8007f88 <USBD_Get_USB_Status>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	4608      	mov	r0, r1
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	461a      	mov	r2, r3
 8007d20:	4603      	mov	r3, r0
 8007d22:	70fb      	strb	r3, [r7, #3]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70bb      	strb	r3, [r7, #2]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d3a:	78bb      	ldrb	r3, [r7, #2]
 8007d3c:	883a      	ldrh	r2, [r7, #0]
 8007d3e:	78f9      	ldrb	r1, [r7, #3]
 8007d40:	f7fa fa54 	bl	80021ec <HAL_PCD_EP_Open>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 f91c 	bl	8007f88 <USBD_Get_USB_Status>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d78:	78fa      	ldrb	r2, [r7, #3]
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fa fa9d 	bl	80022bc <HAL_PCD_EP_Close>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 f8fd 	bl	8007f88 <USBD_Get_USB_Status>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	4611      	mov	r1, r2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fa fb75 	bl	80024aa <HAL_PCD_EP_SetStall>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f8de 	bl	8007f88 <USBD_Get_USB_Status>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	4611      	mov	r1, r2
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fa fbba 	bl	8002572 <HAL_PCD_EP_ClrStall>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 f8bf 	bl	8007f88 <USBD_Get_USB_Status>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	da0b      	bge.n	8007e4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e34:	78fb      	ldrb	r3, [r7, #3]
 8007e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e3a:	68f9      	ldr	r1, [r7, #12]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	440b      	add	r3, r1
 8007e46:	333e      	adds	r3, #62	; 0x3e
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	e00b      	b.n	8007e64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e52:	68f9      	ldr	r1, [r7, #12]
 8007e54:	4613      	mov	r3, r2
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	1a9b      	subs	r3, r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	440b      	add	r3, r1
 8007e5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e8a:	78fa      	ldrb	r2, [r7, #3]
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fa f987 	bl	80021a2 <HAL_PCD_SetAddress>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 f874 	bl	8007f88 <USBD_Get_USB_Status>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b086      	sub	sp, #24
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ecc:	7af9      	ldrb	r1, [r7, #11]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	f7fa faa0 	bl	8002416 <HAL_PCD_EP_Transmit>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 f853 	bl	8007f88 <USBD_Get_USB_Status>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ee6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	607a      	str	r2, [r7, #4]
 8007efa:	603b      	str	r3, [r7, #0]
 8007efc:	460b      	mov	r3, r1
 8007efe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f0e:	7af9      	ldrb	r1, [r7, #11]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	f7fa fa1c 	bl	8002350 <HAL_PCD_EP_Receive>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f832 	bl	8007f88 <USBD_Get_USB_Status>
 8007f24:	4603      	mov	r3, r0
 8007f26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f28:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f44:	78fa      	ldrb	r2, [r7, #3]
 8007f46:	4611      	mov	r1, r2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fa fa4c 	bl	80023e6 <HAL_PCD_EP_GetRxCount>
 8007f4e:	4603      	mov	r3, r0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f60:	4b03      	ldr	r3, [pc, #12]	; (8007f70 <USBD_static_malloc+0x18>)
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20001454 	.word	0x20001454

08007f74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]

}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d817      	bhi.n	8007fcc <USBD_Get_USB_Status+0x44>
 8007f9c:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <USBD_Get_USB_Status+0x1c>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	08007fb5 	.word	0x08007fb5
 8007fa8:	08007fbb 	.word	0x08007fbb
 8007fac:	08007fc1 	.word	0x08007fc1
 8007fb0:	08007fc7 	.word	0x08007fc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb8:	e00b      	b.n	8007fd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8007fbe:	e008      	b.n	8007fd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc4:	e005      	b.n	8007fd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fca:	e002      	b.n	8007fd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd0:	bf00      	nop
  }
  return usb_status;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <__libc_init_array>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4d0d      	ldr	r5, [pc, #52]	; (8008018 <__libc_init_array+0x38>)
 8007fe4:	4c0d      	ldr	r4, [pc, #52]	; (800801c <__libc_init_array+0x3c>)
 8007fe6:	1b64      	subs	r4, r4, r5
 8007fe8:	10a4      	asrs	r4, r4, #2
 8007fea:	2600      	movs	r6, #0
 8007fec:	42a6      	cmp	r6, r4
 8007fee:	d109      	bne.n	8008004 <__libc_init_array+0x24>
 8007ff0:	4d0b      	ldr	r5, [pc, #44]	; (8008020 <__libc_init_array+0x40>)
 8007ff2:	4c0c      	ldr	r4, [pc, #48]	; (8008024 <__libc_init_array+0x44>)
 8007ff4:	f000 f820 	bl	8008038 <_init>
 8007ff8:	1b64      	subs	r4, r4, r5
 8007ffa:	10a4      	asrs	r4, r4, #2
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	42a6      	cmp	r6, r4
 8008000:	d105      	bne.n	800800e <__libc_init_array+0x2e>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	f855 3b04 	ldr.w	r3, [r5], #4
 8008008:	4798      	blx	r3
 800800a:	3601      	adds	r6, #1
 800800c:	e7ee      	b.n	8007fec <__libc_init_array+0xc>
 800800e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008012:	4798      	blx	r3
 8008014:	3601      	adds	r6, #1
 8008016:	e7f2      	b.n	8007ffe <__libc_init_array+0x1e>
 8008018:	080080c0 	.word	0x080080c0
 800801c:	080080c0 	.word	0x080080c0
 8008020:	080080c0 	.word	0x080080c0
 8008024:	080080c4 	.word	0x080080c4

08008028 <memset>:
 8008028:	4402      	add	r2, r0
 800802a:	4603      	mov	r3, r0
 800802c:	4293      	cmp	r3, r2
 800802e:	d100      	bne.n	8008032 <memset+0xa>
 8008030:	4770      	bx	lr
 8008032:	f803 1b01 	strb.w	r1, [r3], #1
 8008036:	e7f9      	b.n	800802c <memset+0x4>

08008038 <_init>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	bf00      	nop
 800803c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803e:	bc08      	pop	{r3}
 8008040:	469e      	mov	lr, r3
 8008042:	4770      	bx	lr

08008044 <_fini>:
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	bf00      	nop
 8008048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804a:	bc08      	pop	{r3}
 800804c:	469e      	mov	lr, r3
 800804e:	4770      	bx	lr
