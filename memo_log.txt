qbuffer 은 송신용
rx_buf 는 수신용으로 선언 

수신 = 인터럽트
송신 = 폴링

* HAL_UART_Receive_IT(&UartHandle, (uint8_t *)aRxBuffer, RXBUFFERSIZE)
수신 인터럽트 함수

** HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
완료되었을 때 콜백함수

HAL_UART_IRQHandler는 인터럽트 핸들러 함수이다. 
<HAL_UART_IRQHandler의 역할>
1. HAL_UART_ErrorCallback(huart) 호출
2. 수신 됐을 경우에 UART_Receive_IT를 호출하고
3. HAL_UART_RxCpltCallback(huart)를 호출 

__weak 타입은 다른 파일에서 같은 함수를 만들면 새롭게 만들어진 non-weak 타입이 호출된다.

수신버퍼 사이즈를 지정해주는 작업이 uartOpen에 추가되어야함
	-> HAL_UART_Receive_IT 함수 예시

  if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
  {
    /* Transfer error in reception process */
    Error_Handler();
  }

 예시처럼 호출하면 aRxBuffer에 수신 데이터가 저장될 것이다.

 <디버깅>
   숫자 1입력시,
   HAL_UART_RxCpltCallback 호출 >> qbufferWrite >> HAL_UART_Receive_IT

   rx_data 에 아스키 49 들어온거 확인 

   !! : HAL_UART_RxCpltCallback 에서 HAL_UART_Receive_IT 를 다시 호출하여 한바이트를 받을 수 있도록 해주어야한다. 

      UART 인터럽트 함수를 browse 하다보면 UART_Recieve_IT 함수에서 컴플리트를 하기전에 인터럽트를 비활성화 시킨다.


      바람선생님께서는 빠르게 송신할때 인터럽트도 많이 걸리게 되어 overrun을 겪으신 적이 있음.
      -> DMA가 차선책


--------------------------------------------------------------------------------------------
< UART #3 DMA>

4. DMA stream x number of data register (DMA_SxNDTR) (x = 0..7)
    이 레지스터를 활용할 것 
    enable 를 하고 receive dma 함수 호출 하면, 현 레지스터가 사이즈만큼 세팅,
    수신쪽에 데이터 들어오면 하나씩 감소됨.

    qbuffer 에서 별도로 write 할 필요가 없어짐.

    그렇다면 인덱스 관리는?

5. 인덱스 관리
    기존에는 write가 interrupt 함수에서 적용되었지만 지금은 그렇게 안하기 때문에
    uartAvailable 에서
      버퍼의 in인덱스가 dma의 핸들러의 instance의 레지스터 값을 참고한다. 
      qbuffer[_DEF_UART2].in = hdma_usart1_rx.Instance->NDTR;

--------------------------------------------------------------------------------------------
< UART #4 usb to Serial>
- usb rx -> tx to uart (반대도 마찬가지)

1. HAL_uart_deinit 하는 이유  
    속도를 바꿔 오픈하게 되면 다시 오픈해야하는 상황이 가끔 있음.
    현재 오픈된 상태에서 다시 재오픈 하기 위해서는 deinit함수 호출이 필요 

2. usb 같은 경우 보드레이트 바뀐다해서 통신이 안되진 않음 
  그러나 물리적 유아트는 바꿔줘야함
  usb가 바뀌면 uart도 바뀌어야함.
  
---------------------------------------------------------------------------------------------
< UART #5 usb통신 개선 >
?: 용량 큰 데이터를 uart에서 usb로 보낼 때는 괜찮은데, 
  usb에서 uart로 보낼 때 데이터가 빠지는 소실현상이 나타난다.
  이 현상은..
    usb에서 빠른 속도로 보내는 데이터를 버퍼링 한 후
    uart가 read하는 속도가 느리기 때문에 덮어써지게 되는 것이다.
      -> ★★★★★usb가 빠르게 못보내게 (버퍼가 받을 수 있는 정도로 속도를 제한해야한다) 


lib에 USB_Device에 usbd_conf.c에
HAL_PCD_SOFCallback
    >>> usb는 1ms기준으로 frame 신호가 떨어지는데 이때마다 HAL_PCD_SOFCallback가 호출된다.
    이걸로 버퍼가 쓸타이밍을 재기위한 모니터링을 usb sof 동기화를 맞춰서 처리해주면 가장 좋음 

    이 함수를 브라우징하면 함수포인터를 정의한 USBD_ClassTypeDef가 나옴.
    USBD_ClassTypeDef  USBD_CDC =
    {
      USBD_CDC_Init,
      USBD_CDC_DeInit,
      USBD_CDC_Setup,
      NULL,                 /* EP0_TxSent, */
      USBD_CDC_EP0_RxReady,
      USBD_CDC_DataIn,
      USBD_CDC_DataOut,
      NULL,-> 우리가 쓰려는 함수포인터가 null로 되있음 이거를 우리가 지정한 함수포인터로 바꿔줌
      NULL,
      NULL,
      USBD_CDC_GetHSCfgDesc,
      USBD_CDC_GetFSCfgDesc,
      USBD_CDC_GetOtherSpeedCfgDesc,
      USBD_CDC_GetDeviceQualifierDescriptor,
    };

    usbd_cdc_if.c 에서 USBD_CDC_ReceivePacket(&hUsbDeviceFS)는 데이터를 받을 수 있음을 알려줌
    USBD_LL_Init 에서 hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE로설정하니 됨.

    *PCD stands for peripheral control driver.

---------------------------------------------------------------------------------------------
< FLASH #1 >
내장 플래시 read & write

1. printf 쓰는 법
 -> __io_putchar 추가
 -> write 함수가 콜백함수로써 호출되면서

2. api
  sector 정보를 알고있어야함으로 구조체 선언
  const 로 주소와 길이 정보 저장
  flashInSector
    지워야할 섹터를 4가지 인덱스로 체크,삭
    flash_start, flash_end 지워야할 주소 시작, 끝
    sector_start, sector_end 매개변수로 받은 인덱스에 해당되는 섹터 시작주소, 끝주소

3. flashErase 함수 
  FLASH_EraseInitTypeDef init 멤버에 무엇을 넣어야할지?
  구조체 타입선언에서 뭘참조하라는지 친절하게 설명되어있으니 찾기에서 해당 상수나 값들을 불러오면된다
---------------------------------------------------------------------------------------------
< FLASH #2 >
1. HAL_FLASHEx_Erase 함수를 사용하기 위해 HAL_FLASH_Unlock() 함수를 사용하라 되어있지만 내 주석엔
그런 유의사항 노트가 없음.

2. flashWrite 함수 구현
    align 된 주소만 받을 수 있도록 해준다.


3. flashRead 함수 구현
    uint8_t *p_byte = (uint8_t *)addr;
    p_byte 는 주소를 받는 포인터이고 여기에서 인덱스로 접근하면 곧 그 주소에 저장된 값이다.
    그래서 p_data[i] = p_byte[i]; 가 가능한것.

4. ap
    펌웨어 영역을 지우면 안되니 다른 곳에서 read 와 write 를 테스트해본다.
    erase 후 플래시 특성상 모든 비트가 1이 되기때문에 0xFF 가 바이트 별로 들어간다.
---------------------------------------------------------------------------------------------
<USB DFU #1>
DFU 란?
  usb middleware에 포함되는 Download Firmware Update class 를 말한다.

* 간단한 부트로더를 만든 후 stm cube programmer 로 펌웨어를 다운받아본다.

1. 프로젝트를 copy & paste 했을 시, .mxproject 파일에 절대 경로가 나오게 되는데.. 이걸 지워줘야함.
    그러나 내 cube ide 는 상대경로로 저장되어있어 안지워도 될 것 같으나 혹시모르니 지운다.

2. 펌웨어의 주소가 부트로더로 인해 변경될 시 바꿔줘야하는 최소 두가지
    ** 링커스크립트
    ** 인터럽트 벡터 -> system_stm32f4xx.c USER_VECT_TAB_ADDRESS enable
      프로젝트 옵션에서 추가 함.
    *  ST link 디버깅시 옵션 변경

3. dfu를 사용하기위해 cube mx 를 사용하여 기존 uart를 disable하고 dfu를 설정하면 usbd_dfu_if.c 가  USB 디바이스 app 에 설치되는데 
---------------------------------------------------------------------------------------------
<USB DFU #2>
1. DFU 관련 함수를 포팅하기 위해 mx updater setting에있는 예제 코드 디렉토리를 get해서 확인
    STM32756G_EVAL\Applications\USB_Device\DFU_Standalone\Src\usbd_dfu_flash.c 
    -> 참고할 것.

2. 예제 코드를 참고하여 dfu interface를 완성한 후 Debug Configuration에서 신규 boot project를 추가 후 디버그하면 장치 관리자>> 범용 직렬 버스장치에서 DFU 확인 가능>> programmer에 product ID 에 dfu 확인 가능

3. 놀랍게도, STM32 programmer 에서 start programming 을 누르는 순간 IDE 에서도 자동으로 DEBUG 전환된다 

ERROR: rtcInit에서 Error_Handler 로빠짐 -> 임시방편으로 rtcInit() 주석(어찌저찌 해결?.. internel flash desc 주소 stm32f411ce규칙에 맞게변경 )

NVIC->ICER 인터럽트 벡터 초기화 레지스터 1이 써지면 작동

4. FW로 점프하기 전, 거쳐야하는 과정
  클럭 초기화
  HAL 드라이버 초기화
  인터럽트 레지스터 NVIC 1로
  SysTick 컨트롤 레지스터

RCC->CSR 리셋 핀이 눌렸을 때만 boot하기 위해
RCC->CSR == (1<<26)

STM32 programmer -> CLI 커맨드 쓰는법 -> USER MANUAL

